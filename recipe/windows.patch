--- python/CMakeLists.txt
+++ python/CMakeLists.txt
@@ -26,13 +26,17 @@
 ADD_LIBRARY(${PYWRAP} SHARED main.cpp)
 TARGET_LINK_LIBRARIES(${PYWRAP} ${PROJECT_NAME}) 
 TARGET_LINK_BOOST_PYTHON(${PYWRAP})
 #IF(BUILD_WITH_COMMIT_VERSION)
 #  TAG_LIBRARY_VERSION(${PYWRAP})
 #ENDIF(BUILD_WITH_COMMIT_VERSION)
-SET(${PYWRAP}_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
+IF(DEFINED EIGENPY_SITELIB_ROOT AND EIGENPY_SITELIB_ROOT)
+  SET(${PYWRAP}_INSTALL_DIR ${EIGENPY_SITELIB_ROOT}/${PYTHON_SITELIB})
+ELSE()
+  SET(${PYWRAP}_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
+ENDIF()
 
 SET_PROPERTY(TARGET ${PYWRAP} PROPERTY LINKER_LANGUAGE CXX)
 IF(APPLE)
   # We need to change the extension for python bindings
   SET_TARGET_PROPERTIES(${PYWRAP} PROPERTIES SUFFIX ".so")
 ELSEIF(WIN32)

--- CMakeLists.txt
+++ CMakeLists.txt
@@ -55,13 +55,13 @@
 FIND_NUMPY()
 INCLUDE_DIRECTORIES(SYSTEM ${NUMPY_INCLUDE_DIRS})
 
 # ----------------------------------------------------
 # --- DEPENDANCIES -----------------------------------
 # ----------------------------------------------------
-ADD_REQUIRED_DEPENDENCY("eigen3 >= 3.0.5")
+ADD_OPTIONAL_DEPENDENCY("eigen3 >= 3.0.5")
 
 SET(BOOST_COMPONENTS python)
 SEARCH_FOR_BOOST()
 # Add Boost path to include directories.
 INCLUDE_DIRECTORIES(SYSTEM ${Boost_INCLUDE_DIRS})
 
--- cmake/python.cmake
+++ cmake/python.cmake
@@ -62,7 +62,7 @@ ENDIF (NOT ${PYTHONINTERP_FOUND} STREQUAL TRUE)
 MESSAGE(STATUS "PythonInterp: ${PYTHON_EXECUTABLE}")
 
 # Set PYTHON_LIBRARY and PYTHON_INCLUDE_DIR variables if they are not defined by the user
-IF(DEFINED PYTHON_EXECUTABLE)
+IF(DEFINED PYTHON_EXECUTABLE AND NOT WIN32)
   # Retrieve the corresponding value of PYTHON_LIBRARY if it is not defined
   IF(NOT DEFINED PYTHON_LIBRARY)
       EXECUTE_PROCESS(
@@ -81,7 +81,7 @@ IF(DEFINED PYTHON_EXECUTABLE)
         ERROR_QUIET)
       STRING(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
   ENDIF(NOT DEFINED PYTHON_INCLUDE_DIR)
-ENDIF(DEFINED PYTHON_EXECUTABLE)
+ENDIF(DEFINED PYTHON_EXECUTABLE AND NOT WIN32)
 
 # Inform PythonLibs of the required version of PythonInterp
 SET(PYTHONLIBS_VERSION_STRING ${PYTHON_VERSION_STRING})

--- cmake/pkg-config.cmake
+++ cmake/pkg-config.cmake
@@ -721,6 +721,11 @@ MACRO(PKG_CONFIG_APPEND_LIBS LIBS)
         ELSE()
           SET(LIB_COMPLETE_NAME ${LIB_PREFIX}${LIB}${LIB_SUFFIX})
         ENDIF()
+        # Remove lib extension if any
+        IF(UNIX OR APPLE)
+          STRING(REPLACE ".so" "" LIB_COMPLETE_NAME ${LIB_COMPLETE_NAME})
+          STRING(REPLACE ".dylib" "" LIB_COMPLETE_NAME ${LIB_COMPLETE_NAME})
+        ENDIF(UNIX OR APPLE)
         # Single build type generator
         IF(DEFINED CMAKE_BUILD_TYPE)
           SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS} ${LIBINCL_KW}${LIB_COMPLETE_NAME}${PKGCONFIG_POSTFIX}${LIB_EXT}" CACHE INTERNAL "")
