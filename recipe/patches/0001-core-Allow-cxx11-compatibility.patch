From 896dee305dc3ddee6d5d6fb505269f892451b440 Mon Sep 17 00:00:00 2001
From: Joris Vaillant <joris.vaillant@inria.fr>
Date: Mon, 30 Sep 2024 16:20:43 +0200
Subject: [PATCH 1/3] core: Allow cxx11 compatibility

core: Fix enable_if use
---
 include/eigenpy/deprecation-policy.hpp |  2 +-
 include/eigenpy/numpy.hpp              | 11 ++++++-----
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/include/eigenpy/deprecation-policy.hpp b/include/eigenpy/deprecation-policy.hpp
index e866052..42de021 100644
--- a/include/eigenpy/deprecation-policy.hpp
+++ b/include/eigenpy/deprecation-policy.hpp
@@ -13,7 +13,7 @@ enum class DeprecationType { DEPRECATION, FUTURE };
 
 namespace detail {
 
-constexpr PyObject *deprecationTypeToPyObj(DeprecationType dep) {
+PyObject *deprecationTypeToPyObj(DeprecationType dep) {
   switch (dep) {
     case DeprecationType::DEPRECATION:
       return PyExc_DeprecationWarning;
diff --git a/include/eigenpy/numpy.hpp b/include/eigenpy/numpy.hpp
index f74349d..bf738b3 100644
--- a/include/eigenpy/numpy.hpp
+++ b/include/eigenpy/numpy.hpp
@@ -150,15 +150,16 @@ struct NumpyEquivalentType<unsigned long> {
 
 template <typename Scalar>
 struct NumpyEquivalentType<
-    Scalar, std::enable_if_t<!std::is_same<int64_t, long long>::value &&
-                             std::is_same<Scalar, long long>::value> > {
+    Scalar,
+    typename std::enable_if<!std::is_same<int64_t, long long>::value &&
+                            std::is_same<Scalar, long long>::value>::type> {
   enum { type_code = NPY_LONGLONG };
 };
 template <typename Scalar>
 struct NumpyEquivalentType<
-    Scalar,
-    std::enable_if_t<!std::is_same<uint64_t, unsigned long long>::value &&
-                     std::is_same<Scalar, unsigned long long>::value> > {
+    Scalar, typename std::enable_if<
+                !std::is_same<uint64_t, unsigned long long>::value &&
+                std::is_same<Scalar, unsigned long long>::value>::type> {
   enum { type_code = NPY_ULONGLONG };
 };
 
-- 
2.34.1

