diff --git a/.github/workflows/macos-linux-conda.yml b/.github/workflows/macos-linux-conda.yml
index da53704..8a1d376 100644
--- a/.github/workflows/macos-linux-conda.yml
+++ b/.github/workflows/macos-linux-conda.yml
@@ -53,6 +53,17 @@ jobs:
         make test
         make install
 
+    - name: Configure hpp-fcl
+      shell: bash -l {0}
+      run: |
+        conda activate eigenpy
+        conda install -c conda-forge octomap assimp qhull
+
+        git clone https://github.com/humanoid-path-planner/hpp-fcl.git --recursive
+        cd hpp-fcl
+        mkdir build && cd build
+        cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3)
+
     - name: Uninstall EigenPy
       shell: bash -l {0}
       run: |
diff --git a/.github/workflows/windows-conda.yml b/.github/workflows/windows-conda.yml
index 10a7dd5..b12713a 100644
--- a/.github/workflows/windows-conda.yml
+++ b/.github/workflows/windows-conda.yml
@@ -30,9 +30,11 @@ jobs:
         set BOOST_ROOT_1_69_0=
         set BOOST_ROOT_1_72_0=
         set PATH=%PATH:C:\hostedtoolcache\windows\Boost\1.72.0;=%
+        if errorlevel 1 exit 1
 
         :: start building
-        call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
+        call "%programfiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
+        if errorlevel 1 exit 1
         mkdir build
         pushd build
         cmake ^
@@ -43,17 +45,41 @@ jobs:
           -DPYTHON_SITELIB=%CONDA_PREFIX%\Lib\site-packages ^
           -DPYTHON_EXECUTABLE=%CONDA_PREFIX%\python.exe ^
           ..
+        if errorlevel 1 exit 1
 
         :: Build and Install
         cmake --build . --config Release --target install
+        if errorlevel 1 exit 1
 
         :: Build stubs
         git clone https://github.com/jcarpent/pybind11-stubgen.git
         python "%CD%\pybind11-stubgen\pybind11_stubgen\__init__.py" -o %CONDA_PREFIX%\Lib\site-packages\eigenpy eigenpy --boost-python --ignore-invalid signature --no-setup-py --root-module-suffix ""
+        if errorlevel 1 exit 1
 
         :: Testing
         ctest --output-on-failure -C Release -V
+        if errorlevel 1 exit 1
 
         :: Test Python import
         cd ..
         python -c "import eigenpy"
+        if errorlevel 1 exit 1
+
+        :: Test packaging
+        conda install -c conda-forge octomap assimp qhull
+        git clone --recursive https://github.com/humanoid-path-planner/hpp-fcl.git
+        pushd hpp-fcl
+        mkdir build
+        pushd build
+        cmake ^
+          -G "NMake Makefiles" ^
+          -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\Library ^
+          -DCMAKE_BUILD_TYPE=Release ^
+          -DPYTHON_EXECUTABLE=%CONDA_PREFIX%\python.exe ^
+          ..
+        cd ..
+        if errorlevel 1 exit 1
+
+        :: Uninstall
+        cmake --build . --config Release --target uninstall
+        if errorlevel 1 exit 1
Submodule cmake cf8b78d..e319590:
diff --git a/cmake/.docs/cmake.py b/cmake/.docs/cmake.py
index 0b933b4..1c4a7ac 100644
--- a/cmake/.docs/cmake.py
+++ b/cmake/.docs/cmake.py
@@ -10,30 +10,38 @@ import re
 from pygments.lexers import CMakeLexer
 from pygments.token import Name, Operator
 from pygments.lexer import bygroups
-CMakeLexer.tokens["args"].append(('(\\$<)(.+?)(>)',
-                                  bygroups(Operator, Name.Variable, Operator)))
+
+CMakeLexer.tokens["args"].append(
+    ("(\\$<)(.+?)(>)", bygroups(Operator, Name.Variable, Operator))
+)
 
 # Monkey patch for sphinx generating invalid content for qcollectiongenerator
 # https://bitbucket.org/birkenfeld/sphinx/issue/1435/qthelp-builder-should-htmlescape-keywords
 from sphinx.util.pycompat import htmlescape
 from sphinx.builders.qthelp import QtHelpBuilder
+
 old_build_keywords = QtHelpBuilder.build_keywords
+
+
 def new_build_keywords(self, title, refs, subitems):
-  old_items = old_build_keywords(self, title, refs, subitems)
-  new_items = []
-  for item in old_items:
-    before, rest = item.split("ref=\"", 1)
-    ref, after = rest.split("\"")
-    if ("<" in ref and ">" in ref):
-      new_items.append(before + "ref=\"" + htmlescape(ref) + "\"" + after)
-    else:
-      new_items.append(item)
-  return new_items
+    old_items = old_build_keywords(self, title, refs, subitems)
+    new_items = []
+    for item in old_items:
+        before, rest = item.split('ref="', 1)
+        ref, after = rest.split('"')
+        if "<" in ref and ">" in ref:
+            new_items.append(before + 'ref="' + htmlescape(ref) + '"' + after)
+        else:
+            new_items.append(item)
+    return new_items
+
+
 QtHelpBuilder.build_keywords = new_build_keywords
 
 
 from docutils.parsers.rst import Directive, directives
 from docutils.transforms import Transform
+
 try:
     from docutils.utils.error_reporting import SafeString, ErrorString
 except ImportError:
@@ -54,6 +62,7 @@ old_sphinx = False
 
 try:
     from sphinx import version_info
+
     if version_info < (1, 4):
         old_sphinx = True
 except ImportError:
@@ -65,10 +74,10 @@ class CMakeModule(Directive):
     required_arguments = 1
     optional_arguments = 0
     final_argument_whitespace = True
-    option_spec = {'encoding': directives.encoding}
+    option_spec = {"encoding": directives.encoding}
 
     def __init__(self, *args, **keys):
-        self.re_start = re.compile(r'^#\[(?P<eq>=*)\[\.rst:$')
+        self.re_start = re.compile(r"^#\[(?P<eq>=*)\[\.rst:$")
         Directive.__init__(self, *args, **keys)
 
     def run(self):
@@ -79,31 +88,35 @@ class CMakeModule(Directive):
         env = self.state.document.settings.env
         rel_path, path = env.relfn2path(self.arguments[0])
         path = os.path.normpath(path)
-        encoding = self.options.get('encoding', settings.input_encoding)
+        encoding = self.options.get("encoding", settings.input_encoding)
         e_handler = settings.input_encoding_error_handler
         try:
             settings.record_dependencies.add(path)
-            f = io.FileInput(source_path=path, encoding=encoding,
-                             error_handler=e_handler)
-        except UnicodeEncodeError as error:
-            raise self.severe('Problems with "%s" directive path:\n'
-                              'Cannot encode input file path "%s" '
-                              '(wrong locale?).' %
-                              (self.name, SafeString(path)))
+            f = io.FileInput(
+                source_path=path, encoding=encoding, error_handler=e_handler
+            )
+        except UnicodeEncodeError:
+            raise self.severe(
+                'Problems with "%s" directive path:\n'
+                'Cannot encode input file path "%s" '
+                "(wrong locale?)." % (self.name, SafeString(path))
+            )
         except IOError as error:
-            raise self.severe('Problems with "%s" directive path:\n%s.' %
-                      (self.name, ErrorString(error)))
+            raise self.severe(
+                'Problems with "%s" directive path:\n%s.'
+                % (self.name, ErrorString(error))
+            )
         raw_lines = f.read().splitlines()
         f.close()
         rst = None
         lines = []
         for line in raw_lines:
-            if rst is not None and rst != '#':
+            if rst is not None and rst != "#":
                 # Bracket mode: check for end bracket
                 pos = line.find(rst)
                 if pos >= 0:
-                    if line[0] == '#':
-                        line = ''
+                    if line[0] == "#":
+                        line = ""
                     else:
                         line = line[0:pos]
                     rst = None
@@ -111,61 +124,69 @@ class CMakeModule(Directive):
                 # Line mode: check for .rst start (bracket or line)
                 m = self.re_start.match(line)
                 if m:
-                    rst = ']%s]' % m.group('eq')
-                    line = ''
-                elif line == '#.rst:':
-                    rst = '#'
-                    line = ''
-                elif rst == '#':
-                    if line == '#' or line[:2] == '# ':
+                    rst = "]%s]" % m.group("eq")
+                    line = ""
+                elif line == "#.rst:":
+                    rst = "#"
+                    line = ""
+                elif rst == "#":
+                    if line == "#" or line[:2] == "# ":
                         line = line[2:]
                     else:
                         rst = None
-                        line = ''
+                        line = ""
                 elif rst is None:
-                    line = ''
+                    line = ""
             lines.append(line)
-        if rst is not None and rst != '#':
-            raise self.warning('"%s" found unclosed bracket "#[%s[.rst:" in %s' %
-                               (self.name, rst[1:-1], path))
+        if rst is not None and rst != "#":
+            raise self.warning(
+                '"%s" found unclosed bracket "#[%s[.rst:" in %s'
+                % (self.name, rst[1:-1], path)
+            )
         self.state_machine.insert_input(lines, path)
         return []
 
+
 class _cmake_index_entry:
     def __init__(self, desc):
         self.desc = desc
 
-    def __call__(self, title, targetid, main = 'main'):
+    def __call__(self, title, targetid, main="main"):
         # See https://github.com/sphinx-doc/sphinx/issues/2673
         if old_sphinx:
-            return ('pair', u'%s ; %s' % (self.desc, title), targetid, main)
+            return ("pair", "%s ; %s" % (self.desc, title), targetid, main)
         else:
-            return ('pair', u'%s ; %s' % (self.desc, title), targetid, main, None)
+            return ("pair", "%s ; %s" % (self.desc, title), targetid, main, None)
+
 
 _cmake_index_objs = {
-    'command':    _cmake_index_entry('command'),
-    'generator':  _cmake_index_entry('generator'),
-    'manual':     _cmake_index_entry('manual'),
-    'module':     _cmake_index_entry('module'),
-    'policy':     _cmake_index_entry('policy'),
-    'prop_cache': _cmake_index_entry('cache property'),
-    'prop_dir':   _cmake_index_entry('directory property'),
-    'prop_gbl':   _cmake_index_entry('global property'),
-    'prop_inst':  _cmake_index_entry('installed file property'),
-    'prop_sf':    _cmake_index_entry('source file property'),
-    'prop_test':  _cmake_index_entry('test property'),
-    'prop_tgt':   _cmake_index_entry('target property'),
-    'variable':   _cmake_index_entry('variable'),
-    }
+    "command": _cmake_index_entry("command"),
+    "generator": _cmake_index_entry("generator"),
+    "manual": _cmake_index_entry("manual"),
+    "module": _cmake_index_entry("module"),
+    "policy": _cmake_index_entry("policy"),
+    "prop_cache": _cmake_index_entry("cache property"),
+    "prop_dir": _cmake_index_entry("directory property"),
+    "prop_gbl": _cmake_index_entry("global property"),
+    "prop_inst": _cmake_index_entry("installed file property"),
+    "prop_sf": _cmake_index_entry("source file property"),
+    "prop_test": _cmake_index_entry("test property"),
+    "prop_tgt": _cmake_index_entry("target property"),
+    "variable": _cmake_index_entry("variable"),
+}
+
 
 def _cmake_object_inventory(env, document, line, objtype, targetid):
-    inv = env.domaindata['cmake']['objects']
+    inv = env.domaindata["cmake"]["objects"]
     if targetid in inv:
         document.reporter.warning(
-            'CMake object "%s" also described in "%s".' %
-            (targetid, env.doc2path(inv[targetid][0])), line=line)
+            'CMake object "%s" also described in "%s".'
+            % (targetid, env.doc2path(inv[targetid][0])),
+            line=line,
+        )
     inv[targetid] = (env.docname, objtype)
 
+
 class CMakeTransform(Transform):
 
     # Run this transform early since we insert nodes we want
@@ -178,21 +199,21 @@ class CMakeTransform(Transform):
 
     def parse_title(self, docname):
         """Parse a document title as the first line starting in [A-Za-z0-9<]
-           or fall back to the document basename if no such line exists.
-           The cmake --help-*-list commands also depend on this convention.
-           Return the title or False if the document file does not exist.
+        or fall back to the document basename if no such line exists.
+        The cmake --help-*-list commands also depend on this convention.
+        Return the title or False if the document file does not exist.
         """
         env = self.document.settings.env
         title = self.titles.get(docname)
         if title is None:
-            fname = os.path.join(env.srcdir, docname+'.rst')
+            fname = os.path.join(env.srcdir, docname + ".rst")
             try:
-                f = open(fname, 'r')
+                f = open(fname, "r")
             except IOError:
                 title = False
             else:
                 for line in f:
-                    if len(line) > 0 and (line[0].isalnum() or line[0] == '<'):
+                    if len(line) > 0 and (line[0].isalnum() or line[0] == "<"):
                         title = line.rstrip()
                         break
                 f.close()
@@ -205,28 +226,29 @@ class CMakeTransform(Transform):
         env = self.document.settings.env
 
         # Treat some documents as cmake domain objects.
-        objtype, sep, tail = env.docname.rpartition('/')
+        objtype, sep, tail = env.docname.rpartition("/")
         make_index_entry = _cmake_index_objs.get(objtype)
         if make_index_entry:
             title = self.parse_title(env.docname)
             # Insert the object link target.
-            if objtype == 'command':
+            if objtype == "command":
                 targetname = title.lower()
             else:
                 targetname = title
-            targetid = '%s:%s' % (objtype, targetname)
-            targetnode = nodes.target('', '', ids=[targetid])
+            targetid = "%s:%s" % (objtype, targetname)
+            targetnode = nodes.target("", "", ids=[targetid])
             self.document.note_explicit_target(targetnode)
             self.document.insert(0, targetnode)
             # Insert the object index entry.
             indexnode = addnodes.index()
-            indexnode['entries'] = [make_index_entry(title, targetid)]
+            indexnode["entries"] = [make_index_entry(title, targetid)]
             self.document.insert(0, indexnode)
             # Add to cmake domain object inventory
             _cmake_object_inventory(env, self.document, 1, objtype, targetid)
 
+
 class CMakeObject(ObjectDescription):
-    _re_sub = re.compile(r'^([^()\s]+)\s*\(([^()]*)\)$', re.DOTALL)
+    _re_sub = re.compile(r"^([^()\s]+)\s*\(([^()]*)\)$", re.DOTALL)
 
     def handle_signature(self, sig, signode):
         # called from sphinx.directives.ObjectDescription.run()
@@ -234,49 +256,51 @@ class CMakeObject(ObjectDescription):
         return sig
 
     def add_target_and_index(self, name, sig, signode):
-        if self.objtype == 'command':
+        if self.objtype == "command":
             # Reference of CMake commands does not include arguments
-            m = CMakeXRefRole._re_sub.match (name)
-            if m: 
+            m = CMakeXRefRole._re_sub.match(name)
+            if m:
                 targetname = m.group(1).lower()
             else:
                 targetname = name.lower()
         else:
             targetname = name
-        targetid = '%s:%s' % (self.objtype, targetname)
+        targetid = "%s:%s" % (self.objtype, targetname)
         if targetid not in self.state.document.ids:
-            signode['names'].append(targetid)
-            signode['ids'].append(targetid)
-            signode['first'] = (not self.names)
+            signode["names"].append(targetid)
+            signode["ids"].append(targetid)
+            signode["first"] = not self.names
             self.state.document.note_explicit_target(signode)
-            _cmake_object_inventory(self.env, self.state.document,
-                                    self.lineno, self.objtype, targetid)
+            _cmake_object_inventory(
+                self.env, self.state.document, self.lineno, self.objtype, targetid
+            )
 
         make_index_entry = _cmake_index_objs.get(self.objtype)
         if make_index_entry:
-            self.indexnode['entries'].append(make_index_entry(name, targetid))
+            self.indexnode["entries"].append(make_index_entry(name, targetid))
+
 
 class CMakeXRefRole(XRefRole):
 
     # See sphinx.util.nodes.explicit_title_re; \x00 escapes '<'.
-    _re = re.compile(r'^(.+?)(\s*)(?<!\x00)<(.*?)>$', re.DOTALL)
-    _re_sub = re.compile(r'^([^()\s]+)\s*\(([^()]*)\)$', re.DOTALL)
+    _re = re.compile(r"^(.+?)(\s*)(?<!\x00)<(.*?)>$", re.DOTALL)
+    _re_sub = re.compile(r"^([^()\s]+)\s*\(([^()]*)\)$", re.DOTALL)
 
     def __call__(self, typ, rawtext, text, *args, **keys):
         # Translate CMake command cross-references of the form:
         #  `command_name(SUB_COMMAND)`
         # to have an explicit target:
         #  `command_name(SUB_COMMAND) <command_name>`
-        if typ == 'cmake:command':
+        if typ == "cmake:command":
             m = CMakeXRefRole._re_sub.match(text)
             if m:
-                text = '%s <%s>' % (text, m.group(1))
+                text = "%s <%s>" % (text, m.group(1))
         # CMake cross-reference targets frequently contain '<' so escape
         # any explicit `<target>` with '<' not preceded by whitespace.
         while True:
             m = CMakeXRefRole._re.match(text)
             if m and len(m.group(2)) == 0:
-                text = '%s\x00<%s>' % (m.group(1), m.group(3))
+                text = "%s\x00<%s>" % (m.group(1), m.group(3))
             else:
                 break
         return XRefRole.__call__(self, typ, rawtext, text, *args, **keys)
@@ -292,6 +316,7 @@ class CMakeXRefRole(XRefRole):
     # def result_nodes(self, document, env, node, is_ref):
     #     pass
 
+
 class CMakeXRefTransform(Transform):
 
     # Run this transform early since we insert nodes we want
@@ -305,47 +330,49 @@ class CMakeXRefTransform(Transform):
         # Find CMake cross-reference nodes and add index and target
         # nodes for them.
         for ref in self.document.traverse(addnodes.pending_xref):
-            if not ref['refdomain'] == 'cmake':
+            if not ref["refdomain"] == "cmake":
                 continue
 
-            objtype = ref['reftype']
+            objtype = ref["reftype"]
             make_index_entry = _cmake_index_objs.get(objtype)
             if not make_index_entry:
                 continue
 
-            objname = ref['reftarget']
-            targetnum = env.new_serialno('index-%s:%s' % (objtype, objname))
+            objname = ref["reftarget"]
+            targetnum = env.new_serialno("index-%s:%s" % (objtype, objname))
 
-            targetid = 'index-%s-%s:%s' % (targetnum, objtype, objname)
-            targetnode = nodes.target('', '', ids=[targetid])
+            targetid = "index-%s-%s:%s" % (targetnum, objtype, objname)
+            targetnode = nodes.target("", "", ids=[targetid])
             self.document.note_explicit_target(targetnode)
 
             indexnode = addnodes.index()
-            indexnode['entries'] = [make_index_entry(objname, targetid, '')]
+            indexnode["entries"] = [make_index_entry(objname, targetid, "")]
             ref.replace_self([indexnode, targetnode, ref])
 
+
 class CMakeDomain(Domain):
     """CMake domain."""
-    name = 'cmake'
-    label = 'CMake'
+
+    name = "cmake"
+    label = "CMake"
     object_types = {
-        'command':    ObjType('command',    'command'),
-        'generator':  ObjType('generator',  'generator'),
-        'variable':   ObjType('variable',   'variable'),
-        'module':     ObjType('module',     'module'),
-        'policy':     ObjType('policy',     'policy'),
-        'prop_cache': ObjType('prop_cache', 'prop_cache'),
-        'prop_dir':   ObjType('prop_dir',   'prop_dir'),
-        'prop_gbl':   ObjType('prop_gbl',   'prop_gbl'),
-        'prop_inst':  ObjType('prop_inst',  'prop_inst'),
-        'prop_sf':    ObjType('prop_sf',    'prop_sf'),
-        'prop_test':  ObjType('prop_test',  'prop_test'),
-        'prop_tgt':   ObjType('prop_tgt',   'prop_tgt'),
-        'manual':     ObjType('manual',     'manual'),
+        "command": ObjType("command", "command"),
+        "generator": ObjType("generator", "generator"),
+        "variable": ObjType("variable", "variable"),
+        "module": ObjType("module", "module"),
+        "policy": ObjType("policy", "policy"),
+        "prop_cache": ObjType("prop_cache", "prop_cache"),
+        "prop_dir": ObjType("prop_dir", "prop_dir"),
+        "prop_gbl": ObjType("prop_gbl", "prop_gbl"),
+        "prop_inst": ObjType("prop_inst", "prop_inst"),
+        "prop_sf": ObjType("prop_sf", "prop_sf"),
+        "prop_test": ObjType("prop_test", "prop_test"),
+        "prop_tgt": ObjType("prop_tgt", "prop_tgt"),
+        "manual": ObjType("manual", "manual"),
     }
     directives = {
-        'command':    CMakeObject,
-        'variable':   CMakeObject,
+        "command": CMakeObject,
+        "variable": CMakeObject,
         # Other object types cannot be created except by the CMakeTransform
         # 'generator':  CMakeObject,
         # 'module':     CMakeObject,
@@ -360,48 +387,47 @@ class CMakeDomain(Domain):
         # 'manual':     CMakeObject,
     }
     roles = {
-        'command':    CMakeXRefRole(fix_parens = True, lowercase = True),
-        'generator':  CMakeXRefRole(),
-        'variable':   CMakeXRefRole(),
-        'module':     CMakeXRefRole(),
-        'policy':     CMakeXRefRole(),
-        'prop_cache': CMakeXRefRole(),
-        'prop_dir':   CMakeXRefRole(),
-        'prop_gbl':   CMakeXRefRole(),
-        'prop_inst':  CMakeXRefRole(),
-        'prop_sf':    CMakeXRefRole(),
-        'prop_test':  CMakeXRefRole(),
-        'prop_tgt':   CMakeXRefRole(),
-        'manual':     CMakeXRefRole(),
+        "command": CMakeXRefRole(fix_parens=True, lowercase=True),
+        "generator": CMakeXRefRole(),
+        "variable": CMakeXRefRole(),
+        "module": CMakeXRefRole(),
+        "policy": CMakeXRefRole(),
+        "prop_cache": CMakeXRefRole(),
+        "prop_dir": CMakeXRefRole(),
+        "prop_gbl": CMakeXRefRole(),
+        "prop_inst": CMakeXRefRole(),
+        "prop_sf": CMakeXRefRole(),
+        "prop_test": CMakeXRefRole(),
+        "prop_tgt": CMakeXRefRole(),
+        "manual": CMakeXRefRole(),
     }
     initial_data = {
-        'objects': {},  # fullname -> docname, objtype
+        "objects": {},  # fullname -> docname, objtype
     }
 
     def clear_doc(self, docname):
         to_clear = set()
-        for fullname, (fn, _) in self.data['objects'].items():
+        for fullname, (fn, _) in self.data["objects"].items():
             if fn == docname:
                 to_clear.add(fullname)
         for fullname in to_clear:
-            del self.data['objects'][fullname]
+            del self.data["objects"][fullname]
 
-    def resolve_xref(self, env, fromdocname, builder,
-                     typ, target, node, contnode):
-        targetid = '%s:%s' % (typ, target)
-        obj = self.data['objects'].get(targetid)
+    def resolve_xref(self, env, fromdocname, builder, typ, target, node, contnode):
+        targetid = "%s:%s" % (typ, target)
+        obj = self.data["objects"].get(targetid)
         if obj is None:
             # TODO: warn somehow?
             return None
-        return make_refnode(builder, fromdocname, obj[0], targetid,
-                            contnode, target)
+        return make_refnode(builder, fromdocname, obj[0], targetid, contnode, target)
 
     def get_objects(self):
-        for refname, (docname, type) in self.data['objects'].items():
+        for refname, (docname, type) in self.data["objects"].items():
             yield (refname, refname, type, docname, refname, 1)
 
+
 def setup(app):
-    app.add_directive('cmake-module', CMakeModule)
+    app.add_directive("cmake-module", CMakeModule)
     app.add_transform(CMakeTransform)
     app.add_transform(CMakeXRefTransform)
     app.add_domain(CMakeDomain)
diff --git a/cmake/.docs/conf.py b/cmake/.docs/conf.py
index fedf487..2823914 100644
--- a/cmake/.docs/conf.py
+++ b/cmake/.docs/conf.py
@@ -22,34 +22,32 @@ from sphinx.util.nodes import set_source_info
 # If extensions (or modules to document with autodoc) are in another directory,
 # add these directories to sys.path here. If the directory is relative to the
 # documentation root, use os.path.abspath to make it absolute, like shown here.
-sys.path.insert(0, os.path.abspath('.'))
+sys.path.insert(0, os.path.abspath("."))
 
 # -- General configuration ------------------------------------------------
 
 # If your documentation needs a minimal Sphinx version, state it here.
-#needs_sphinx = '1.0'
+# needs_sphinx = '1.0'
 
 # Add any Sphinx extension module names here, as strings. They can be
 # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
 # ones.
-extensions = [
-    'sphinx.ext.todo',
-    'cmake'
-]
+extensions = ["sphinx.ext.todo", "cmake"]
 
 # Add any paths that contain templates here, relative to this directory.
-templates_path = ['_templates']
+templates_path = ["_templates"]
 
 # The suffix of source filenames.
-source_suffix = '.rst'
+source_suffix = ".rst"
 
-primary_domain = 'cmake'
-highlight_language = 'cmake'
+primary_domain = "cmake"
+highlight_language = "cmake"
 
 todo_include_todos = True
 
 currentmode = "user"
 
+
 class IfMode(Directive):
 
     has_content = True
@@ -64,12 +62,14 @@ class IfMode(Directive):
             node = nodes.Element()
             node.document = self.state.document
             set_source_info(self, node)
-            self.state.nested_parse(self.content, self.content_offset,
-                                    node, match_titles=1)
+            self.state.nested_parse(
+                self.content, self.content_offset, node, match_titles=1
+            )
             return node.children
         return []
 
-class SetMode (Directive):
+
+class SetMode(Directive):
     has_content = False
     required_arguments = 1
     optional_arguments = 0
@@ -79,199 +79,204 @@ class SetMode (Directive):
         self.state.document.settings.env.config.currentmode = self.arguments[0]
         return []
 
+
 # The encoding of source files.
-#source_encoding = 'utf-8-sig'
+# source_encoding = 'utf-8-sig'
 
 # The master toctree document.
-master_doc = 'index'
+master_doc = "index"
 
 # General information about the project.
-project = u'Shared CMake submodule'
-copyright = u'2017, CNRS JRL / LAAS'
+project = "Shared CMake submodule"
+copyright = "2017, CNRS JRL / LAAS"
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
 # built documents.
 #
 # The short X.Y version.
-version = 'master'
+version = "master"
 # The full version, including alpha/beta/rc tags.
-release = 'master'
+release = "master"
 
 # The language for content autogenerated by Sphinx. Refer to documentation
 # for a list of supported languages.
-#language = None
+# language = None
 
 # There are two options for replacing |today|: either, you set today to some
 # non-false value, then it is used:
-#today = ''
+# today = ''
 # Else, today_fmt is used as the format for a strftime call.
-#today_fmt = '%B %d, %Y'
+# today_fmt = '%B %d, %Y'
 
 # List of patterns, relative to source directory, that match files and
 # directories to ignore when looking for source files.
-exclude_patterns = ['build' ]
+exclude_patterns = ["build"]
 
 # The reST default role (used for this markup: `text`) to use for all
 # documents.
-#default_role = None
+# default_role = None
 
 # If true, '()' will be appended to :func: etc. cross-reference text.
-#add_function_parentheses = True
+# add_function_parentheses = True
 
 # If true, the current module name will be prepended to all description
 # unit titles (such as .. function::).
-#add_module_names = True
+# add_module_names = True
 
 # If true, sectionauthor and moduleauthor directives will be shown in the
 # output. They are ignored by default.
-#show_authors = False
+# show_authors = False
 
 # The name of the Pygments (syntax highlighting) style to use.
-pygments_style = 'sphinx'
+pygments_style = "sphinx"
 
 # A list of ignored prefixes for module index sorting.
-#modindex_common_prefix = []
+# modindex_common_prefix = []
 
 # If true, keep warnings as "system message" paragraphs in the built documents.
-#keep_warnings = False
+# keep_warnings = False
 
 
 # -- Options for HTML output ----------------------------------------------
 
 # The theme to use for HTML and HTML Help pages.  See the documentation for
 # a list of builtin themes.
-html_theme = 'default'
+html_theme = "default"
 
 # Theme options are theme-specific and customize the look and feel of a theme
 # further.  For a list of options available for each theme, see the
 # documentation.
-#html_theme_options = {}
+# html_theme_options = {}
 
 # Add any paths that contain custom themes here, relative to this directory.
 try:
     import sphinx_theme
-    html_theme = 'neo_rtd_theme'
-    html_theme_path = [ sphinx_theme.get_html_theme_path() ]
+
+    html_theme = "neo_rtd_theme"
+    html_theme_path = [sphinx_theme.get_html_theme_path()]
     html_theme_options = {
-            'collapse_navigation': False,
-            'display_version': False,
-            'navigation_depth': 3,
-            }
-except:
+        "collapse_navigation": False,
+        "display_version": False,
+        "navigation_depth": 3,
+    }
+except Exception:
     html_theme_path = []
 
 # The name for this set of Sphinx documents.  If None, it defaults to
 # "<project> v<release> documentation".
-#html_title = None
+# html_title = None
 
 # A shorter title for the navigation bar.  Default is the same as html_title.
-#html_short_title = None
+# html_short_title = None
 
 # The name of an image file (relative to this directory) to place at the top
 # of the sidebar.
-#html_logo = None
+# html_logo = None
 
 # The name of an image file (within the static path) to use as favicon of the
 # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
 # pixels large.
-#html_favicon = None
+# html_favicon = None
 
 # Add any paths that contain custom static files (such as style sheets) here,
 # relative to this directory. They are copied after the builtin static files,
 # so a file named "default.css" will overwrite the builtin "default.css".
-html_static_path = ['_static']
+html_static_path = ["_static"]
 
 # Add any extra paths that contain custom files (such as robots.txt or
 # .htaccess) here, relative to this directory. These files are copied
 # directly to the root of the documentation.
-#html_extra_path = []
+# html_extra_path = []
 
 # If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
 # using the given strftime format.
-#html_last_updated_fmt = '%b %d, %Y'
+# html_last_updated_fmt = '%b %d, %Y'
 
 # If true, SmartyPants will be used to convert quotes and dashes to
 # typographically correct entities.
-#html_use_smartypants = True
+# html_use_smartypants = True
 
 # Custom sidebar templates, maps document names to template names.
-#html_sidebars = {}
+# html_sidebars = {}
 
 # Additional templates that should be rendered to pages, maps page names to
 # template names.
-#html_additional_pages = {}
+# html_additional_pages = {}
 
 # If false, no module index is generated.
-#html_domain_indices = True
+# html_domain_indices = True
 
 # If false, no index is generated.
-#html_use_index = True
+# html_use_index = True
 
 # If true, the index is split into individual pages for each letter.
-#html_split_index = False
+# html_split_index = False
 
 # If true, links to the reST sources are added to the pages.
-#html_show_sourcelink = True
+# html_show_sourcelink = True
 
 # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
-#html_show_sphinx = True
+# html_show_sphinx = True
 
 # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
-#html_show_copyright = True
+# html_show_copyright = True
 
 # If true, an OpenSearch description file will be output, and all pages will
 # contain a <link> tag referring to it.  The value of this option must be the
 # base URL from which the finished HTML is served.
-#html_use_opensearch = ''
+# html_use_opensearch = ''
 
 # This is the file name suffix for HTML files (e.g. ".xhtml").
-#html_file_suffix = None
+# html_file_suffix = None
 
 # Output file base name for HTML help builder.
-htmlhelp_basename = 'SharedCMakesubmoduledoc'
+htmlhelp_basename = "SharedCMakesubmoduledoc"
 
 
 # -- Options for LaTeX output ---------------------------------------------
 
 latex_elements = {
-# The paper size ('letterpaper' or 'a4paper').
-#'papersize': 'letterpaper',
-
-# The font size ('10pt', '11pt' or '12pt').
-#'pointsize': '10pt',
-
-# Additional stuff for the LaTeX preamble.
-#'preamble': '',
+    # The paper size ('letterpaper' or 'a4paper').
+    # 'papersize': 'letterpaper',
+    # The font size ('10pt', '11pt' or '12pt').
+    # 'pointsize': '10pt',
+    # Additional stuff for the LaTeX preamble.
+    # 'preamble': '',
 }
 
 # Grouping the document tree into LaTeX files. List of tuples
 # (source start file, target name, title,
 #  author, documentclass [howto, manual, or own class]).
 latex_documents = [
-  ('index', 'SharedCMakesubmodule.tex', u'Shared CMake submodule Documentation',
-   u'CNRS JRL / LAAS', 'manual'),
+    (
+        "index",
+        "SharedCMakesubmodule.tex",
+        "Shared CMake submodule Documentation",
+        "CNRS JRL / LAAS",
+        "manual",
+    ),
 ]
 
 # The name of an image file (relative to this directory) to place at the top of
 # the title page.
-#latex_logo = None
+# latex_logo = None
 
 # For "manual" documents, if this is true, then toplevel headings are parts,
 # not chapters.
-#latex_use_parts = False
+# latex_use_parts = False
 
 # If true, show page references after internal links.
-#latex_show_pagerefs = False
+# latex_show_pagerefs = False
 
 # If true, show URL addresses after external links.
-#latex_show_urls = False
+# latex_show_urls = False
 
 # Documents to append as an appendix to all manuals.
-#latex_appendices = []
+# latex_appendices = []
 
 # If false, no module index is generated.
-#latex_domain_indices = True
+# latex_domain_indices = True
 
 
 # -- Options for manual page output ---------------------------------------
@@ -279,12 +284,17 @@ latex_documents = [
 # One entry per manual page. List of tuples
 # (source start file, name, description, authors, manual section).
 man_pages = [
-    ('index', 'sharedcmakesubmodule', u'Shared CMake submodule Documentation',
-     [u'CNRS JRL / LAAS'], 1)
+    (
+        "index",
+        "sharedcmakesubmodule",
+        "Shared CMake submodule Documentation",
+        ["CNRS JRL / LAAS"],
+        1,
+    )
 ]
 
 # If true, show URL addresses after external links.
-#man_show_urls = False
+# man_show_urls = False
 
 
 # -- Options for Texinfo output -------------------------------------------
@@ -293,25 +303,32 @@ man_pages = [
 # (source start file, target name, title, author,
 #  dir menu entry, description, category)
 texinfo_documents = [
-  ('index', 'SharedCMakesubmodule', u'Shared CMake submodule Documentation',
-   u'CNRS JRL / LAAS', 'SharedCMakesubmodule', 'One line description of project.',
-   'Miscellaneous'),
+    (
+        "index",
+        "SharedCMakesubmodule",
+        "Shared CMake submodule Documentation",
+        "CNRS JRL / LAAS",
+        "SharedCMakesubmodule",
+        "One line description of project.",
+        "Miscellaneous",
+    ),
 ]
 
 # Documents to append as an appendix to all manuals.
-#texinfo_appendices = []
+# texinfo_appendices = []
 
 # If false, no module index is generated.
-#texinfo_domain_indices = True
+# texinfo_domain_indices = True
 
 # How to display URL addresses: 'footnote', 'no', or 'inline'.
-#texinfo_show_urls = 'footnote'
+# texinfo_show_urls = 'footnote'
 
 # If true, do not generate a @detailmenu in the "Top" node's menu.
-#texinfo_no_detailmenu = False
+# texinfo_no_detailmenu = False
+
 
 def setup(app):
-    app.add_config_value('currentmode', 'user', 'env')
+    app.add_config_value("currentmode", "user", "env")
     app.add_directive("setmode", SetMode)
     app.add_directive("ifmode", IfMode)
-    app.add_stylesheet('css/cmake.css')
+    app.add_stylesheet("css/cmake.css")
diff --git a/cmake/.docs/examples/minimal-hpp.cmake b/cmake/.docs/examples/minimal-hpp.cmake
index be14bf3..4552b3c 100644
--- a/cmake/.docs/examples/minimal-hpp.cmake
+++ b/cmake/.docs/examples/minimal-hpp.cmake
@@ -7,8 +7,7 @@ set(PROJECT_DESCRIPTION "A HPP project example")
 # hpp.cmake includes base.cmake.
 include(cmake/hpp.cmake)
 
-COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
+compute_project_args(PROJECT_ARGS LANGUAGES CXX)
 project(${PROJECT_NAME} ${PROJECT_ARGS})
 
-# Configure the build of your project here
-# add_subdirectory(src)
+# Configure the build of your project here add_subdirectory(src)
diff --git a/cmake/.docs/examples/minimal-with-packages.cmake b/cmake/.docs/examples/minimal-with-packages.cmake
index 0c65d06..f2d419c 100644
--- a/cmake/.docs/examples/minimal-with-packages.cmake
+++ b/cmake/.docs/examples/minimal-with-packages.cmake
@@ -1,4 +1,5 @@
-# Target-based approach should work from CMake 2.8.12 but it should fully work from 3.1
+# Target-based approach should work from CMake 2.8.12 but it should fully work
+# from 3.1
 cmake_minimum_required(VERSION 2.8.12)
 
 # These variables have to be defined before running SETUP_PROJECT
@@ -14,12 +15,14 @@ project(${PROJECT_NAME} CXX)
 # Add a required dependency
 add_project_dependency(MyDependency REQUIRED)
 
-# Another example to show that arguments can be passed down to the underlying find_package call
+# Another example to show that arguments can be passed down to the underlying
+# find_package call
 add_project_dependency(Boost 1.50 REQUIRED COMPONENT timer)
 
 add_library(myLibrary ${MY_SOURCES})
 target_link_libraries(myLibrary MyDependency::MyAwesomeLib Boost::timer)
 
-install(TARGETS myLibrary
-        EXPORT ${TARGETS_EXPORT_NAME}
-        DESTINATION lib)
+install(
+  TARGETS myLibrary
+  EXPORT ${TARGETS_EXPORT_NAME}
+  DESTINATION lib)
diff --git a/cmake/.docs/examples/minimal.cmake b/cmake/.docs/examples/minimal.cmake
index 18e66fc..3792853 100644
--- a/cmake/.docs/examples/minimal.cmake
+++ b/cmake/.docs/examples/minimal.cmake
@@ -9,5 +9,4 @@ include(cmake/base.cmake)
 
 project(${PROJECT_NAME} CXX)
 
-# Configure the build of your project here
-# add_subdirectory(src)
\ No newline at end of file
+# Configure the build of your project here add_subdirectory(src)
diff --git a/cmake/.docs/pages/developers.rst b/cmake/.docs/pages/developers.rst
index e7bbe56..803e281 100644
--- a/cmake/.docs/pages/developers.rst
+++ b/cmake/.docs/pages/developers.rst
@@ -46,7 +46,7 @@ To document a macro or a variable in a ``.cmake`` file, use
   #   Related to :cmake:command:`HOW_TO_DOCUMENT_A_COMMAND`.
   #
   #   A code block::
-  #   
+  #
   #     notice the double : and the indention
   #
   #   or the more verbose, but supports other language
@@ -74,7 +74,7 @@ gives
   Related to :cmake:command:`HOW_TO_DOCUMENT_A_COMMAND`.
 
   A cmake code block::
-  
+
     set(foo "notice the double : and the indention")
 
   or the more verbose, but supports other language
diff --git a/cmake/.git-blame-ignore-revs b/cmake/.git-blame-ignore-revs
new file mode 100644
index 0000000..a158bf4
--- /dev/null
+++ b/cmake/.git-blame-ignore-revs
@@ -0,0 +1,2 @@
+# pre-commit run -a (Guilhem Saurel, 2022-07-26)
+a7abe2312a94b28f01173d6db5f74bb26c934e10
diff --git a/cmake/.github/workflows/cmake.yml b/cmake/.github/workflows/cmake.yml
index 4de4780..cf1773c 100644
--- a/cmake/.github/workflows/cmake.yml
+++ b/cmake/.github/workflows/cmake.yml
@@ -5,7 +5,7 @@ on: [push,pull_request]
 jobs:
   build-ubuntu:
 
-    runs-on: [ubuntu-18.04] 
+    runs-on: [ubuntu-18.04]
 
     steps:
     - uses: actions/checkout@v1
diff --git a/cmake/.pre-commit-config.yaml b/cmake/.pre-commit-config.yaml
new file mode 100644
index 0000000..680a814
--- /dev/null
+++ b/cmake/.pre-commit-config.yaml
@@ -0,0 +1,46 @@
+exclude: \.js$
+repos:
+-   repo: meta
+    hooks:
+    -  id: check-useless-excludes
+    -  id: check-hooks-apply
+-   repo: https://github.com/pre-commit/mirrors-clang-format
+    rev: v14.0.6
+    hooks:
+    -   id: clang-format
+        args: [--style=Google]
+-   repo: https://github.com/pre-commit/pre-commit-hooks
+    rev: v4.3.0
+    hooks:
+    -   id: check-added-large-files
+    -   id: check-ast
+    -   id: check-executables-have-shebangs
+    -   id: check-merge-conflict
+    -   id: check-yaml
+    -   id: debug-statements
+    -   id: destroyed-symlinks
+    -   id: detect-private-key
+    -   id: end-of-file-fixer
+    -   id: fix-byte-order-marker
+    -   id: mixed-line-ending
+    -   id: trailing-whitespace
+-   repo: https://github.com/psf/black
+    rev: 22.6.0
+    hooks:
+    -   id: black
+-   repo: https://github.com/PyCQA/flake8
+    rev: 4.0.1
+    hooks:
+    -   id: flake8
+-   repo: https://github.com/cheshirekow/cmake-format-precommit
+    rev: v0.6.13
+    hooks:
+    - id: cmake-format
+      exclude: |
+            (?x)^(
+                .*\.(h|hh|pc|py)\.cmake|
+                cython/python/FindPython.*\.cmake|
+                boost/FindBoost\.cmake|
+                python/FindPython.*\.cmake|
+                GNUInstallDirs\.cmake
+            )$
diff --git a/cmake/Config.cmake.in b/cmake/Config.cmake.in
index 4dd717d..fc31b70 100644
--- a/cmake/Config.cmake.in
+++ b/cmake/Config.cmake.in
@@ -109,6 +109,8 @@ endif(_@PROJECT_NAME@_PKG_CONFIG_LIBS_LIST)
 set("@PROJECT_NAME@_LIBRARIES" ${_PACKAGE_CONFIG_LIBRARIES})
 set("@PROJECT_NAME_UPPER@_LIBRARIES" ${_PACKAGE_CONFIG_LIBRARIES})
 
+@PYTHON_EXPORT_DEPENDENCY_MACROS@
+
 include(CMakeFindDependencyMacro)
 if(${CMAKE_VERSION} VERSION_LESS "3.15.0")
   @PACKAGE_DEPENDENCIES_FIND_PACKAGE@
diff --git a/cmake/README.md b/cmake/README.md
index c75773f..0380943 100644
--- a/cmake/README.md
+++ b/cmake/README.md
@@ -2,6 +2,8 @@ Shared CMake submodule
 ======================
 
 [![Documentation Status](https://readthedocs.org/projects/jrl-cmakemodules/badge/?version=master)](https://jrl-cmakemodules.readthedocs.io/en/master/?badge=master)
+[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/jrl-umi3218/jrl-cmakemodules/master.svg)](https://results.pre-commit.ci/latest/github/jrl-umi3218/jrl-cmakemodules/master)
+[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
 
 This repository is meant to be used as a submodule for any project
 from CNRS LAAS/HPP or JRL.
@@ -17,3 +19,20 @@ You can also checkout the more complete [documentation] of the modules.
 [wiki]: http://github.com/jrl-umi3218/jrl-cmakemodules/wiki
 
 [documentation]: http://jrl-cmakemodules.readthedocs.io/en/master/
+
+# pre-commit
+
+This project use [pre-commit](https://pre-commit.com) and [pre-commit.ci](https://pre-commit.ci).
+
+You can get a nice documentation directly on those 2 projects, but here is a quickstart:
+
+```
+# install pre-commit:
+python -m pip install pre-commit
+
+# run all hooks on all files:
+pre-commit run -a
+
+# run automatically the hooks on the added / modified files, when you try to commit:
+pre-commit install
+```
diff --git a/cmake/_unittests/cpp/CMakeLists.txt b/cmake/_unittests/cpp/CMakeLists.txt
index ee46449..12a540a 100644
--- a/cmake/_unittests/cpp/CMakeLists.txt
+++ b/cmake/_unittests/cpp/CMakeLists.txt
@@ -11,20 +11,20 @@ include(../../base.cmake)
 compute_project_args(PROJECT_ARGS LANGUAGES CXX)
 project(${PROJECT_NAME} ${PROJECT_ARGS})
 
-set(${PROJECT_NAME}_HEADERS
-  include/jrl_cmakemodule/lib.hh)
+set(${PROJECT_NAME}_HEADERS include/jrl_cmakemodule/lib.hh)
 
 add_library(jrl_cmakemodule_lib SHARED src/lib.cc)
-target_include_directories(jrl_cmakemodule_lib PUBLIC
-  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  $<INSTALL_INTERFACE:include>)
+target_include_directories(
+  jrl_cmakemodule_lib
+  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+         $<INSTALL_INTERFACE:include>)
 
-install(TARGETS jrl_cmakemodule_lib
-        EXPORT ${TARGETS_EXPORT_NAME}
-        DESTINATION lib)
+install(
+  TARGETS jrl_cmakemodule_lib
+  EXPORT ${TARGETS_EXPORT_NAME}
+  DESTINATION lib)
 
 add_executable(jrl_cmakemodule_main src/main.cc)
 target_link_libraries(jrl_cmakemodule_main jrl_cmakemodule_lib)
 
-install(TARGETS jrl_cmakemodule_main
-        DESTINATION main)
+install(TARGETS jrl_cmakemodule_main DESTINATION main)
diff --git a/cmake/_unittests/cpp/src/lib.cc b/cmake/_unittests/cpp/src/lib.cc
index af0036a..df7db04 100644
--- a/cmake/_unittests/cpp/src/lib.cc
+++ b/cmake/_unittests/cpp/src/lib.cc
@@ -1,7 +1,6 @@
 #include <iostream>
 #include <jrl_cmakemodule/lib.hh>
 
-void lib_function()
-{
+void lib_function() {
   std::cout << "JRL CMake module - unittest - lib_function" << std::endl;
 }
diff --git a/cmake/_unittests/cpp/src/main.cc b/cmake/_unittests/cpp/src/main.cc
index 640e9ae..6426a32 100644
--- a/cmake/_unittests/cpp/src/main.cc
+++ b/cmake/_unittests/cpp/src/main.cc
@@ -1,8 +1,7 @@
 #include <iostream>
 #include <jrl_cmakemodule/lib.hh>
 
-int main()
-{
+int main() {
   std::cout << "JRL CMake module - unittest - cpp" << std::endl;
   lib_function();
 }
diff --git a/cmake/_unittests/test_pkg-config.cmake b/cmake/_unittests/test_pkg-config.cmake
index 55471de..97bae31 100644
--- a/cmake/_unittests/test_pkg-config.cmake
+++ b/cmake/_unittests/test_pkg-config.cmake
@@ -1,7 +1,7 @@
 include(cmake/pkg-config.cmake)
 
 cmake_policy(SET CMP0054 NEW)
-#cmake -P
+# cmake -P
 macro(EXPECT_STREQUAL _lhs _rhs)
   if(NOT "${_lhs}" STREQUAL ${_rhs})
     message(SEND_ERROR "EXPECT_STREQUAL failed: \"${_lhs}\" != \"${_rhs}\"")
@@ -9,34 +9,38 @@ macro(EXPECT_STREQUAL _lhs _rhs)
 endmacro()
 
 macro(UNSET_TEST_VARS)
-  UNSET(PKG_LIB_NAME)
-  UNSET(PKG_PREFIX)
-  UNSET(PKG_CONFIG_STRING_NOSPACE)
+  unset(PKG_LIB_NAME)
+  unset(PKG_PREFIX)
+  unset(PKG_CONFIG_STRING_NOSPACE)
 endmacro()
 
-UNSET_TEST_VARS()
-_PARSE_PKG_CONFIG_STRING("my-package > 0.4" PKG_LIB_NAME PKG_PREFIX PKG_CONFIG_STRING_NOSPACE)
-EXPECT_STREQUAL("my-package" "${PKG_LIB_NAME}")
-EXPECT_STREQUAL("MY_PACKAGE" "${PKG_PREFIX}")
-EXPECT_STREQUAL("my-package>0.4" "${PKG_CONFIG_STRING_NOSPACE}")
+unset_test_vars()
+_parse_pkg_config_string("my-package > 0.4" PKG_LIB_NAME PKG_PREFIX
+                         PKG_CONFIG_STRING_NOSPACE)
+expect_strequal("my-package" "${PKG_LIB_NAME}")
+expect_strequal("MY_PACKAGE" "${PKG_PREFIX}")
+expect_strequal("my-package>0.4" "${PKG_CONFIG_STRING_NOSPACE}")
 
-UNSET_TEST_VARS()
-_PARSE_PKG_CONFIG_STRING("my-package >= 0.4" PKG_LIB_NAME PKG_PREFIX PKG_CONFIG_STRING_NOSPACE)
-EXPECT_STREQUAL("my-package" "${PKG_LIB_NAME}")
-EXPECT_STREQUAL("MY_PACKAGE" "${PKG_PREFIX}")
-EXPECT_STREQUAL("my-package>=0.4" "${PKG_CONFIG_STRING_NOSPACE}")
+unset_test_vars()
+_parse_pkg_config_string("my-package >= 0.4" PKG_LIB_NAME PKG_PREFIX
+                         PKG_CONFIG_STRING_NOSPACE)
+expect_strequal("my-package" "${PKG_LIB_NAME}")
+expect_strequal("MY_PACKAGE" "${PKG_PREFIX}")
+expect_strequal("my-package>=0.4" "${PKG_CONFIG_STRING_NOSPACE}")
 
-UNSET_TEST_VARS()
-_PARSE_PKG_CONFIG_STRING("my-package" PKG_LIB_NAME PKG_PREFIX PKG_CONFIG_STRING_NOSPACE)
-EXPECT_STREQUAL("my-package" "${PKG_LIB_NAME}")
-EXPECT_STREQUAL("MY_PACKAGE" "${PKG_PREFIX}")
-EXPECT_STREQUAL("my-package" "${PKG_CONFIG_STRING_NOSPACE}")
+unset_test_vars()
+_parse_pkg_config_string("my-package" PKG_LIB_NAME PKG_PREFIX
+                         PKG_CONFIG_STRING_NOSPACE)
+expect_strequal("my-package" "${PKG_LIB_NAME}")
+expect_strequal("MY_PACKAGE" "${PKG_PREFIX}")
+expect_strequal("my-package" "${PKG_CONFIG_STRING_NOSPACE}")
 
-# it the input does not have spaces around the operator,
-# the operator is considered as being part of the library name.
-# This is expected and consistent with pkg-config's behavior.
-UNSET_TEST_VARS()
-_PARSE_PKG_CONFIG_STRING("my-package>=0.4" PKG_LIB_NAME PKG_PREFIX PKG_CONFIG_STRING_NOSPACE)
-EXPECT_STREQUAL("my-package>=0.4" "${PKG_LIB_NAME}")
-EXPECT_STREQUAL("MY_PACKAGE__0_4" "${PKG_PREFIX}")
-EXPECT_STREQUAL("my-package>=0.4" "${PKG_CONFIG_STRING_NOSPACE}")
+# it the input does not have spaces around the operator, the operator is
+# considered as being part of the library name. This is expected and consistent
+# with pkg-config's behavior.
+unset_test_vars()
+_parse_pkg_config_string("my-package>=0.4" PKG_LIB_NAME PKG_PREFIX
+                         PKG_CONFIG_STRING_NOSPACE)
+expect_strequal("my-package>=0.4" "${PKG_LIB_NAME}")
+expect_strequal("MY_PACKAGE__0_4" "${PKG_PREFIX}")
+expect_strequal("my-package>=0.4" "${PKG_CONFIG_STRING_NOSPACE}")
diff --git a/cmake/announce-gen b/cmake/announce-gen
index db9ed50..9c5f905 100755
--- a/cmake/announce-gen
+++ b/cmake/announce-gen
@@ -1,3 +1,4 @@
+#!/usr/bin/env perl
 eval '(exit $?0)' && eval 'exec perl -wS "$0" ${1+"$@"}'
   & eval 'exec perl -wS "$0" $argv:q'
     if 0;
diff --git a/cmake/apple.cmake b/cmake/apple.cmake
index f02d497..93ba4c5 100644
--- a/cmake/apple.cmake
+++ b/cmake/apple.cmake
@@ -1,36 +1,34 @@
 # Copyright (C) 2018 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-
-#.rst:
-# .. command:: APPLY_DEFAULT_APPLE_CONFIGURATION ()
+# .rst: .. command:: APPLY_DEFAULT_APPLE_CONFIGURATION ()
 #
-#   Apply a default CMake policy on OSX systems
+# Apply a default CMake policy on OSX systems
 #
-MACRO(APPLY_DEFAULT_APPLE_CONFIGURATION)
-  IF(APPLE) # Ensure that the policy if is only applied on OSX systems
-    SET(CMAKE_MACOSX_RPATH TRUE)
-    SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
-    SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
-    SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
-
-    SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
-    LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
-    IF("${isSystemDir}" STREQUAL "-1")
-       set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
-    ENDIF("${isSystemDir}" STREQUAL "-1")
-  ENDIF(APPLE)
-ENDMACRO(APPLY_DEFAULT_APPLE_CONFIGURATION)
+macro(APPLY_DEFAULT_APPLE_CONFIGURATION)
+  if(APPLE) # Ensure that the policy if is only applied on OSX systems
+    set(CMAKE_MACOSX_RPATH TRUE)
+    set(CMAKE_SKIP_BUILD_RPATH FALSE)
+    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
+    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 
+    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES
+         "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
+    if("${isSystemDir}" STREQUAL "-1")
+      set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+    endif("${isSystemDir}" STREQUAL "-1")
+  endif(APPLE)
+endmacro(APPLY_DEFAULT_APPLE_CONFIGURATION)
diff --git a/cmake/base.cmake b/cmake/base.cmake
index 2ab34f0..422fc96 100644
--- a/cmake/base.cmake
+++ b/cmake/base.cmake
@@ -1,333 +1,337 @@
 # Copyright (C) 2008-2022 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
- # ------ #
- # README #
- # ------ #
+# ------ # README # ------ #
 
-
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
-#   This section lists the variables and macros that must be defined and
-#   invoked in the right place to enable the features of this cmake modules.
+# This section lists the variables and macros that must be defined and invoked
+# in the right place to enable the features of this cmake modules.
 #
-#   For a minimal working example see :ref:`minimal-working-example`.
+# For a minimal working example see :ref:`minimal-working-example`.
 #
-#   Required variables
-#   ------------------
+# Required variables
+# ------------------
 #
-#   .. variable:: PROJECT_NAME
+# .. variable:: PROJECT_NAME
 #
-#     Please keep respect our coding style and choose a name
-#     which respects the following regexp: ``[a-z][a-z0-9-]*``
-#     I.e. a lower-case letter then one or more lower-case
-#     letter, number or hyphen ``-``.
+# Please keep respect our coding style and choose a name which respects the
+# following regexp: ``[a-z][a-z0-9-]*`` I.e. a lower-case letter then one or
+# more lower-case letter, number or hyphen ``-``.
 #
-#   .. variable:: PROJECT_URL
+# .. variable:: PROJECT_URL
 #
-#     Project's website.
+# Project's website.
 #
-#   .. variable:: PROJECT_DESCRIPTION
+# .. variable:: PROJECT_DESCRIPTION
 #
-#     One line summary of the package goal.
+# One line summary of the package goal.
 #
-#   Optional variables
-#   ------------------
+# Optional variables
+# ------------------
 #
-#   .. variable:: PROJECT_VERSION
+# .. variable:: PROJECT_VERSION
 #
-#     Project version (X.Y.Z where X, Y, Z are unsigned
-#     integers). If not defined, it will automatically
-#     be computed through `git describe`.
-#     See :cmake:command:`VERSION_COMPUTE` for more information.
+# Project version (X.Y.Z where X, Y, Z are unsigned integers). If not defined,
+# it will automatically be computed through `git describe`. See
+# :cmake:command:`VERSION_COMPUTE` for more information.
 #
-#   .. variable:: PROJECT_DEBUG_POSTFIX
+# .. variable:: PROJECT_DEBUG_POSTFIX
 #
-#     If set, ``${PROJECT_DEBUG_POSTFIX}`` will be appended to the libraries
-#     generated by the project (as the builtin `CMAKE_DEBUG_POSTFIX
-#     <https://cmake.org/cmake/help/v3.0/variable/CMAKE_DEBUG_POSTFIX.html>`_)
-#     but this will also trigger the generation of an appropriate debug
-#     pkg-config file.
+# If set, ``${PROJECT_DEBUG_POSTFIX}`` will be appended to the libraries
+# generated by the project (as the builtin `CMAKE_DEBUG_POSTFIX
+# <https://cmake.org/cmake/help/v3.0/variable/CMAKE_DEBUG_POSTFIX.html>`_) but
+# this will also trigger the generation of an appropriate debug pkg-config file.
 #
-#   .. variable:: PROJECT_USE_KEYWORD_LINK_LIBRARIES
+# .. variable:: PROJECT_USE_KEYWORD_LINK_LIBRARIES
 #
-#     If set to true, the jrl-cmakemodules will use the PUBLIC keyword in
-#     ``target_link_libraries``. Defaults to false.
+# If set to true, the jrl-cmakemodules will use the PUBLIC keyword in
+# ``target_link_libraries``. Defaults to false.
 #
-#   .. variable: PROJECT_CUSTOM_HEADER_EXTENSION
-#     Allows to define a custome extension for C/C++ header files (e.g. .h, .hh, .hpp).
-#     The default value is set to .hh.
+# .. variable: PROJECT_CUSTOM_HEADER_EXTENSION Allows to define a custome
+# extension for C/C++ header files (e.g. .h, .hh, .hpp). The default value is
+# set to .hh.
 #
-#   .. variable:: PROJECT_USE_CMAKE_EXPORT
+# .. variable:: PROJECT_USE_CMAKE_EXPORT
 #
-#     This tells jrl-cmakemodules that you are using export functionalities so it will
-#     hook the installation of your configuration files. Defaults to false
+# This tells jrl-cmakemodules that you are using export functionalities so it
+# will hook the installation of your configuration files. Defaults to false
 #
-#   .. variable:: PROJECT_EXPORT_NO_TARGET
+# .. variable:: PROJECT_EXPORT_NO_TARGET
 #
-#     This tells jrl-cmakemodules that there is no targets in the project.
-#     However the export functionalities are still provided to detect the
-#     project properties. Not setting this variable when no target is present
-#     will result in an error.
+# This tells jrl-cmakemodules that there is no targets in the project. However
+# the export functionalities are still provided to detect the project
+# properties. Not setting this variable when no target is present will result in
+# an error.
 #
-#   .. variable:: PROJECT_JRL_CMAKE_MODULE_DIR
+# .. variable:: PROJECT_JRL_CMAKE_MODULE_DIR
 #
-#     This variable provides the full path pointing to the JRL cmake module.
+# This variable provides the full path pointing to the JRL cmake module.
 #
-#   .. variable:: PROJECT_COMPATIBILITY_VERSION
+# .. variable:: PROJECT_COMPATIBILITY_VERSION
 #
-#     If set, this variable defines COMPATIBILITY version of the project (AnyNewerVersion|SameMajorVersion|SameMinorVersion|ExactVersion).
-#     The default value is SameMajorVersion.
-#     See https://cmake.org/cmake/help/latest/module/CMakePackageConfigHelpers.html#generating-a-package-version-file for further details.
+# If set, this variable defines COMPATIBILITY version of the project
+# (AnyNewerVersion|SameMajorVersion|SameMinorVersion|ExactVersion). The default
+# value is SameMajorVersion. See
+# https://cmake.org/cmake/help/latest/module/CMakePackageConfigHelpers.html#generating-a-package-version-file
+# for further details.
 #
-#   Macros
-#   ------
+# Macros
+# ------
 #
 
-SET(PROJECT_JRL_CMAKE_MODULE_DIR ${CMAKE_CURRENT_LIST_DIR} CACHE INTERNAL "")
+set(PROJECT_JRL_CMAKE_MODULE_DIR
+    ${CMAKE_CURRENT_LIST_DIR}
+    CACHE INTERNAL "")
 
-# Please note that functions starting with an underscore are internal
-# functions and should not be used directly.
+# Please note that functions starting with an underscore are internal functions
+# and should not be used directly.
 
 # Include base features.
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/logging.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/portability.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/compiler.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/debian.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/dist.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/distcheck.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/doxygen.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/header.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/uninstall.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/install-data.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/release.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/version.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/package-config.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/version-script.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/test.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/oscheck.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cxx-standard.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/coverage.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/modernize-links.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/logging.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/portability.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/compiler.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/debian.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/dist.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/distcheck.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/doxygen.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/header.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/uninstall.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/install-data.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/release.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/version.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/package-config.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/version-script.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/test.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/oscheck.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/cxx-standard.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/coverage.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/modernize-links.cmake)
 
- # --------- #
- # Constants #
- # --------- #
+# --------- # Constants # --------- #
 
 # Variables requires by SETUP_PROJECT.
-SET(REQUIRED_VARIABLES PROJECT_NAME PROJECT_DESCRIPTION PROJECT_URL)
+set(REQUIRED_VARIABLES PROJECT_NAME PROJECT_DESCRIPTION PROJECT_URL)
 
 # Check that required variables are defined.
-FOREACH(VARIABLE ${REQUIRED_VARIABLES})
-  IF (NOT DEFINED ${VARIABLE})
-    MESSAGE(AUTHOR_WARNING "Required variable ``${VARIABLE}'' has not been defined, perhaps you are including cmake/base.cmake too early")
-    MESSAGE(AUTHOR_WARNING "Check out https://jrl-cmakemodules.readthedocs.io/en/master/pages/base.html#minimal-working-example for an example")
-    MESSAGE(FATAL_ERROR "Required variable ``${VARIABLE}'' has not been defined.")
-  ENDIF(NOT DEFINED ${VARIABLE})
-ENDFOREACH(VARIABLE)
+foreach(VARIABLE ${REQUIRED_VARIABLES})
+  if(NOT DEFINED ${VARIABLE})
+    message(
+      AUTHOR_WARNING
+        "Required variable ``${VARIABLE}'' has not been defined, perhaps you are including cmake/base.cmake too early"
+    )
+    message(
+      AUTHOR_WARNING
+        "Check out https://jrl-cmakemodules.readthedocs.io/en/master/pages/base.html#minimal-working-example for an example"
+    )
+    message(
+      FATAL_ERROR "Required variable ``${VARIABLE}'' has not been defined.")
+  endif(NOT DEFINED ${VARIABLE})
+endforeach(VARIABLE)
 
 # If the project version number is not set, compute it automatically.
-IF(NOT DEFINED PROJECT_VERSION)
-  VERSION_COMPUTE()
-ELSE()
-  IF(NOT DEFINED PROJECT_VERSION_MAJOR AND
-      NOT DEFINED PROJECT_VERSION_MINOR AND
-      NOT DEFINED PROJECT_VERSION_PATCH)
-    SPLIT_VERSION_NUMBER(${PROJECT_VERSION}
-      PROJECT_VERSION_MAJOR
-      PROJECT_VERSION_MINOR
-      PROJECT_VERSION_PATCH)
-  ENDIF()
-ENDIF()
-SET(SAVED_PROJECT_VERSION "${PROJECT_VERSION}")
-SET(SAVED_PROJECT_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
-SET(SAVED_PROJECT_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
-SET(SAVED_PROJECT_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
+if(NOT DEFINED PROJECT_VERSION)
+  version_compute()
+else()
+  if(NOT DEFINED PROJECT_VERSION_MAJOR
+     AND NOT DEFINED PROJECT_VERSION_MINOR
+     AND NOT DEFINED PROJECT_VERSION_PATCH)
+    split_version_number(${PROJECT_VERSION} PROJECT_VERSION_MAJOR
+                         PROJECT_VERSION_MINOR PROJECT_VERSION_PATCH)
+  endif()
+endif()
+set(SAVED_PROJECT_VERSION "${PROJECT_VERSION}")
+set(SAVED_PROJECT_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
+set(SAVED_PROJECT_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
+set(SAVED_PROJECT_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
 
-IF(PROJECT_VERSION MATCHES UNKNOWN)
-  SET(PROJECT_VERSION_FULL "")
-ELSE(PROJECT_VERSION MATCHES UNKNOWN)
-  IF(PROJECT_VERSION_PATCH)
-  SET(PROJECT_VERSION_FULL "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
-  ELSE(PROJECT_VERSION_PATCH)
-    SET(PROJECT_VERSION_FULL "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
-  ENDIF(PROJECT_VERSION_PATCH)
-ENDIF(PROJECT_VERSION MATCHES UNKNOWN)
+if(PROJECT_VERSION MATCHES UNKNOWN)
+  set(PROJECT_VERSION_FULL "")
+else(PROJECT_VERSION MATCHES UNKNOWN)
+  if(PROJECT_VERSION_PATCH)
+    set(PROJECT_VERSION_FULL
+        "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"
+    )
+  else(PROJECT_VERSION_PATCH)
+    set(PROJECT_VERSION_FULL
+        "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
+  endif(PROJECT_VERSION_PATCH)
+endif(PROJECT_VERSION MATCHES UNKNOWN)
 
 # Set a script to run after project called
-SET(CMAKE_PROJECT_${PROJECT_NAME}_INCLUDE "${CMAKE_CURRENT_LIST_DIR}/post-project.cmake")
+set(CMAKE_PROJECT_${PROJECT_NAME}_INCLUDE
+    "${CMAKE_CURRENT_LIST_DIR}/post-project.cmake")
 
-# Set a hook to finalize the setup, CMake will set CMAKE_CURRENT_LIST_DIR to "" at the end
-# Based off https://stackoverflow.com/questions/15760580/execute-command-or-macro-in-cmake-as-the-last-step-before-the-configure-step-f
-VARIABLE_WATCH(CMAKE_CURRENT_LIST_DIR SETUP_PROJECT_FINALIZE_HOOK)
-FUNCTION(SETUP_PROJECT_FINALIZE_HOOK VARIABLE ACCESS)
-  IF("${${VARIABLE}}" STREQUAL "")
-    SET(CMAKE_CURRENT_LIST_DIR ${PROJECT_JRL_CMAKE_MODULE_DIR})
-    SETUP_PROJECT_FINALIZE()
-    IF(PROJECT_USE_CMAKE_EXPORT)
-      SETUP_PROJECT_PACKAGE_FINALIZE()
-    ENDIF()
-    SET(CMAKE_CURRENT_LIST_DIR "") # restore value
-  ENDIF()
-ENDFUNCTION()
+# Set a hook to finalize the setup, CMake will set CMAKE_CURRENT_LIST_DIR to ""
+# at the end Based off
+# https://stackoverflow.com/questions/15760580/execute-command-or-macro-in-cmake-as-the-last-step-before-the-configure-step-f
+variable_watch(CMAKE_CURRENT_LIST_DIR SETUP_PROJECT_FINALIZE_HOOK)
+function(SETUP_PROJECT_FINALIZE_HOOK VARIABLE ACCESS)
+  if("${${VARIABLE}}" STREQUAL "")
+    set(CMAKE_CURRENT_LIST_DIR ${PROJECT_JRL_CMAKE_MODULE_DIR})
+    setup_project_finalize()
+    if(PROJECT_USE_CMAKE_EXPORT)
+      setup_project_package_finalize()
+    endif()
+    set(CMAKE_CURRENT_LIST_DIR "") # restore value
+  endif()
+endfunction()
 
- # --------------------- #
- # Project configuration #
- # --------------------- #
+# --------------------- # Project configuration # --------------------- #
 
 # _ADD_TO_LIST LIST VALUE
 # -----------------------
 #
 # Add a value to a comma-separated list.
 #
-# LIST		: the list.
-# VALUE		: the value to be appended.
-# SEPARATOR	: the separation symol.
-#
-MACRO(_ADD_TO_LIST LIST VALUE SEPARATOR)
-  IF("${${LIST}}" STREQUAL "")
-    SET(${LIST} "${VALUE}")
-  ELSE("${${LIST}}" STREQUAL "")
-    IF(NOT "${VALUE}" STREQUAL "")
-      SET(${LIST} "${${LIST}}${SEPARATOR} ${VALUE}")
-    ENDIF(NOT "${VALUE}" STREQUAL "")
-  ENDIF("${${LIST}}" STREQUAL "")
-ENDMACRO(_ADD_TO_LIST LIST VALUE)
+# LIST            : the list. VALUE           : the value to be appended.
+# SEPARATOR       : the separation symol.
+#
+macro(_ADD_TO_LIST LIST VALUE SEPARATOR)
+  if("${${LIST}}" STREQUAL "")
+    set(${LIST} "${VALUE}")
+  else("${${LIST}}" STREQUAL "")
+    if(NOT "${VALUE}" STREQUAL "")
+      set(${LIST} "${${LIST}}${SEPARATOR} ${VALUE}")
+    endif(NOT "${VALUE}" STREQUAL "")
+  endif("${${LIST}}" STREQUAL "")
+endmacro(
+  _ADD_TO_LIST
+  LIST
+  VALUE)
 
 # _ADD_TO_LIST_IF_NOT_PRESENT LIST VALUE
 # -----------------------
 #
 # Add a value to a CMake standard list list.
 #
-# LIST		: the list.
-# VALUE		: the value to be appended.
+# LIST            : the list. VALUE           : the value to be appended.
 #
-MACRO(_ADD_TO_LIST_IF_NOT_PRESENT LIST VALUE)
-  IF(CMAKE_VERSION VERSION_GREATER "3.3.0")
-    CMAKE_POLICY(PUSH)
-    CMAKE_POLICY(SET CMP0057 NEW)
+macro(_ADD_TO_LIST_IF_NOT_PRESENT LIST VALUE)
+  if(CMAKE_VERSION VERSION_GREATER "3.3.0")
+    cmake_policy(PUSH)
+    cmake_policy(SET CMP0057 NEW)
     # To be more robust, value should be stripped
-    IF(NOT "${VALUE}" IN_LIST ${LIST})
-      LIST(APPEND ${LIST} "${VALUE}")
-    ENDIF()
-    CMAKE_POLICY(POP)
-  ELSE()
-    LIST (FIND LIST "${VALUE}" _index)
-    IF(${_index} EQUAL -1)
-      LIST(APPEND LIST "${VALUE}")
-    ENDIF()
-  ENDIF()
-ENDMACRO(_ADD_TO_LIST_IF_NOT_PRESENT LIST VALUE)
+    if(NOT "${VALUE}" IN_LIST ${LIST})
+      list(APPEND ${LIST} "${VALUE}")
+    endif()
+    cmake_policy(POP)
+  else()
+    list(FIND LIST "${VALUE}" _index)
+    if(${_index} EQUAL -1)
+      list(APPEND LIST "${VALUE}")
+    endif()
+  endif()
+endmacro(
+  _ADD_TO_LIST_IF_NOT_PRESENT
+  LIST
+  VALUE)
 
 # _CONCATENATE_ARGUMENTS
 # ----------------------
 #
 # Concatenate all arguments into the output variable.
 #
-# OUTPUT	: the output variable.
-# SEPARTOR	: the list separation symbol.
-# ARG1...ARGN	: the values to be concatenated.
+# OUTPUT  : the output variable. SEPARTOR        : the list separation symbol.
+# ARG1...ARGN     : the values to be concatenated.
 #
-MACRO(_CONCATENATE_ARGUMENTS OUTPUT SEPARATOR)
-  FOREACH(I RANGE 2 ${ARGC})
-    _ADD_TO_LIST("${OUTPUT}" "${ARGV${I}}" "${SEPARATOR}")
-  ENDFOREACH(I RANGE 2 ${ARGC})
-  MESSAGE(${${OUTPUT}})
-ENDMACRO(_CONCATENATE_ARGUMENTS OUTPUT)
+macro(_CONCATENATE_ARGUMENTS OUTPUT SEPARATOR)
+  foreach(I RANGE 2 ${ARGC})
+    _add_to_list("${OUTPUT}" "${ARGV${I}}" "${SEPARATOR}")
+  endforeach(I RANGE 2 ${ARGC})
+  message(${${OUTPUT}})
+endmacro(_CONCATENATE_ARGUMENTS OUTPUT)
 
-#.rst:
-# .. ifmode:: internal
+# .rst: .. ifmode:: internal
 #
-#   .. command:: SETUP_PROJECT
+# .. command:: SETUP_PROJECT
 #
-#     Initialize the project. Should be called first in the root
-#     CMakeList.txt.
+# Initialize the project. Should be called first in the root CMakeList.txt.
 #
-#     This function does not take any argument but check that some
-#     variables are defined (see documentation at the beginning of this
-#     file).
+# This function does not take any argument but check that some variables are
+# defined (see documentation at the beginning of this file).
 #
-#     .. warning::
+# .. warning::
 #
-#       This function should not be called manually.
-#       Instead, simply call project(\${PROJECT_NAME} CXX) after including cmake/base.cmake
-#       You can also remove setup_project_finalize() call.
+# This function should not be called manually. Instead, simply call
+# project(\${PROJECT_NAME} CXX) after including cmake/base.cmake You can also
+# remove setup_project_finalize() call.
 #
-MACRO(SETUP_PROJECT)
+macro(SETUP_PROJECT)
   # Define project name.
-  PROJECT(${PROJECT_NAME} CXX)
-  IF(${CMAKE_VERSION} VERSION_GREATER 3.15)
-    MESSAGE("Please update your CMakeLists: instead of setup_project() simply call project(\${PROJECT_NAME} CXX) after including cmake/base.cmake\nYou can also remove setup_project_finalize() call")
-  ENDIF()
-ENDMACRO(SETUP_PROJECT)
+  project(${PROJECT_NAME} CXX)
+  if(${CMAKE_VERSION} VERSION_GREATER 3.15)
+    message(
+      "Please update your CMakeLists: instead of setup_project() simply call project(\${PROJECT_NAME} CXX) after including cmake/base.cmake\nYou can also remove setup_project_finalize() call"
+    )
+  endif()
+endmacro(SETUP_PROJECT)
 
-#.rst:
-# .. ifmode:: internal
-#
-#   .. command:: SETUP_PROJECT_FINALIZE
-#
-#     Called automatically at the end of the CMakeLists.txt to
-#     finalize the project setup.
-#
-MACRO(SETUP_PROJECT_FINALIZE)
-  IF(INSTALL_PKG_CONFIG_FILE)
-    _SETUP_PROJECT_PKG_CONFIG_FINALIZE()
-  ENDIF(INSTALL_PKG_CONFIG_FILE)
-  _SETUP_PROJECT_DOCUMENTATION_FINALIZE()
-  _SETUP_PROJECT_HEADER_FINALIZE()
-  _SETUP_COVERAGE_FINALIZE()
-  _SETUP_DEBIAN()
+# .rst: .. ifmode:: internal
+#
+# .. command:: SETUP_PROJECT_FINALIZE
+#
+# Called automatically at the end of the CMakeLists.txt to finalize the project
+# setup.
+#
+macro(SETUP_PROJECT_FINALIZE)
+  if(INSTALL_PKG_CONFIG_FILE)
+    _setup_project_pkg_config_finalize()
+  endif(INSTALL_PKG_CONFIG_FILE)
+  _setup_project_documentation_finalize()
+  _setup_project_header_finalize()
+  _setup_coverage_finalize()
+  _setup_debian()
   # Install data if needed
-  _INSTALL_PROJECT_DATA()
+  _install_project_data()
 
-  LOGGING_FINALIZE()
-ENDMACRO(SETUP_PROJECT_FINALIZE)
+  logging_finalize()
+endmacro(SETUP_PROJECT_FINALIZE)
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
-#   .. command:: COMPUTE_PROJECT_ARGS (OUTPUT_VARIABLE [LANGUAGES <languages>...])
+# .. command:: COMPUTE_PROJECT_ARGS (OUTPUT_VARIABLE [LANGUAGES <languages>...])
 #
-#     Compute the arguments to be passed to command PROJECT.
-#     For instance::
+# Compute the arguments to be passed to command PROJECT. For instance::
 #
-#       COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
-#       PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})
+# COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX) PROJECT(${PROJECT_NAME}
+# ${PROJECT_ARGS})
 #
-#     :param OUTPUT_VARIABLE: the variable where to write the result
-#     :param LANGUAGES: the project languages. It defaults to CXX.
+# :param OUTPUT_VARIABLE: the variable where to write the result :param
+# LANGUAGES: the project languages. It defaults to CXX.
 #
-MACRO(COMPUTE_PROJECT_ARGS _project_VARIABLE)
-  CMAKE_PARSE_ARGUMENTS(_project "" "" "LANGUAGES" ${ARGN})
-  IF(NOT DEFINED _project_LANGUAGES)
-    SET(_project_LANGUAGES "CXX")
-  ENDIF()
+macro(COMPUTE_PROJECT_ARGS _project_VARIABLE)
+  cmake_parse_arguments(_project "" "" "LANGUAGES" ${ARGN})
+  if(NOT DEFINED _project_LANGUAGES)
+    set(_project_LANGUAGES "CXX")
+  endif()
 
-  IF(CMAKE_VERSION VERSION_GREATER "3.0.0")
+  if(CMAKE_VERSION VERSION_GREATER "3.0.0")
     # CMake >= 3.0
-    CMAKE_POLICY(SET CMP0048 NEW)
-    SET(${_project_VARIABLE} VERSION ${PROJECT_VERSION_FULL} LANGUAGES ${_project_LANGUAGES})
+    cmake_policy(SET CMP0048 NEW)
+    set(${_project_VARIABLE} VERSION ${PROJECT_VERSION_FULL} LANGUAGES
+                             ${_project_LANGUAGES})
 
     # Append description for CMake >= 3.9
-    IF(CMAKE_VERSION VERSION_GREATER "3.9.0")
-      SET(${_project_VARIABLE} ${${_project_VARIABLE}} DESCRIPTION ${PROJECT_DESCRIPTION})
-    ENDIF(CMAKE_VERSION VERSION_GREATER "3.9.0")
-  ELSE(CMAKE_VERSION VERSION_GREATER "3.0.0")
+    if(CMAKE_VERSION VERSION_GREATER "3.9.0")
+      set(${_project_VARIABLE} ${${_project_VARIABLE}} DESCRIPTION
+                               ${PROJECT_DESCRIPTION})
+    endif(CMAKE_VERSION VERSION_GREATER "3.9.0")
+  else(CMAKE_VERSION VERSION_GREATER "3.0.0")
 
     # CMake < 3.0
-    SET(${_project_VARIABLE} ${_project_LANGUAGES})
-  ENDIF(CMAKE_VERSION VERSION_GREATER "3.0.0")
-ENDMACRO(COMPUTE_PROJECT_ARGS)
+    set(${_project_VARIABLE} ${_project_LANGUAGES})
+  endif(CMAKE_VERSION VERSION_GREATER "3.0.0")
+endmacro(COMPUTE_PROJECT_ARGS)
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
index eb4b7c0..f5d0bd6 100644
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -1,191 +1,223 @@
 # Copyright (C) 2008-2019 LAAS-CNRS, JRL AIST-CNRS, INRIA
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. command:: SEARCH_FOR_BOOST_COMPONENT
+# .rst: .. command:: SEARCH_FOR_BOOST_COMPONENT
 #
-#   :param boost_python_name:
-#   :param found:
+# :param boost_python_name: :param found:
 #
-#  This function returns found to TRUE if the boost_python_name has been found, FALSE otherwise.
-#  This function is for internal use only.
+# This function returns found to TRUE if the boost_python_name has been found,
+# FALSE otherwise. This function is for internal use only.
 #
-FUNCTION(SEARCH_FOR_BOOST_COMPONENT boost_python_name found)
-  SET(${found} FALSE PARENT_SCOPE)
-  FIND_PACKAGE(Boost ${BOOST_REQUIRED} QUIET OPTIONAL_COMPONENTS ${boost_python_name})
-  STRING(TOUPPER ${boost_python_name} boost_python_name_UPPER)
-  IF(Boost_${boost_python_name_UPPER}_FOUND)
-    SET(${found} TRUE PARENT_SCOPE)
-  ENDIF()
-ENDFUNCTION(SEARCH_FOR_BOOST_COMPONENT boost_python_name found)
-
-IF(CMAKE_VERSION VERSION_LESS "3.12")
-  SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/boost ${CMAKE_MODULE_PATH})
-  MESSAGE(STATUS "CMake versions older than 3.12 may warn when looking to Boost components. Custom macros are used to find it.")
-ENDIF(CMAKE_VERSION VERSION_LESS "3.12")
-
-#.rst:
-# .. command:: SET_BOOST_DEFAULT_OPTIONS
+function(SEARCH_FOR_BOOST_COMPONENT boost_python_name found)
+  set(${found}
+      FALSE
+      PARENT_SCOPE)
+  find_package(Boost ${BOOST_REQUIRED} QUIET
+               OPTIONAL_COMPONENTS ${boost_python_name})
+  string(TOUPPER ${boost_python_name} boost_python_name_UPPER)
+  if(Boost_${boost_python_name_UPPER}_FOUND)
+    set(${found}
+        TRUE
+        PARENT_SCOPE)
+  endif()
+endfunction(
+  SEARCH_FOR_BOOST_COMPONENT
+  boost_python_name
+  found)
+
+if(CMAKE_VERSION VERSION_LESS "3.12")
+  set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/boost ${CMAKE_MODULE_PATH})
+  message(
+    STATUS
+      "CMake versions older than 3.12 may warn when looking to Boost components. Custom macros are used to find it."
+  )
+endif(CMAKE_VERSION VERSION_LESS "3.12")
+
+# .rst: .. command:: SET_BOOST_DEFAULT_OPTIONS
 #
-#  This function allows to set up the default options for detecting Boost components.
+# This function allows to set up the default options for detecting Boost
+# components.
 #
-MACRO(SET_BOOST_DEFAULT_OPTIONS)
-  SET(Boost_USE_STATIC_LIBS OFF)
-  SET(Boost_USE_MULTITHREADED ON)
-  SET(Boost_NO_BOOST_CMAKE ON)
-ENDMACRO(SET_BOOST_DEFAULT_OPTIONS)
-
-#.rst:
-# .. command:: EXPORT_BOOST_DEFAULT_OPTIONS
+macro(SET_BOOST_DEFAULT_OPTIONS)
+  set(Boost_USE_STATIC_LIBS OFF)
+  set(Boost_USE_MULTITHREADED ON)
+  set(Boost_NO_BOOST_CMAKE ON)
+endmacro(SET_BOOST_DEFAULT_OPTIONS)
+
+# .rst: .. command:: EXPORT_BOOST_DEFAULT_OPTIONS
 #
-#  This function allows to export the default options for detecting Boost components.
+# This function allows to export the default options for detecting Boost
+# components.
 #
-MACRO(EXPORT_BOOST_DEFAULT_OPTIONS)
-  LIST(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE 0 "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)")
-  LIST(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY 0 "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)")
-ENDMACRO(EXPORT_BOOST_DEFAULT_OPTIONS)
+macro(EXPORT_BOOST_DEFAULT_OPTIONS)
+  list(
+    INSERT
+    _PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE
+    0
+    "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
+  )
+  list(
+    INSERT
+    _PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY
+    0
+    "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
+  )
+endmacro(EXPORT_BOOST_DEFAULT_OPTIONS)
 
 #
-#.rst
-# .. command:: SEARCH_FOR_BOOST_PYTHON([REQUIRED])
+# .rst .. command:: SEARCH_FOR_BOOST_PYTHON([REQUIRED])
 #
-#  Find boost-python component.
-#  For boost >= 1.67.0, FindPython macro should be called first in order
-#  to automatically detect the right boost-python component version according
-#  to the Python version (2.7 or 3.x).
+# Find boost-python component. For boost >= 1.67.0, FindPython macro should be
+# called first in order to automatically detect the right boost-python component
+# version according to the Python version (2.7 or 3.x).
 #
 
-MACRO(SEARCH_FOR_BOOST_PYTHON)
-
-  CMAKE_PARSE_ARGUMENTS(_BOOST_PYTHON_REQUIRED "REQUIRED" "" "" ${ARGN})
-  SET(BOOST_PYTHON_NAME "python")
-  SET(BOOST_PYTHON_REQUIRED "")
-  IF(_BOOST_PYTHON_REQUIRED)
-    SET(BOOST_PYTHON_REQUIRED REQUIRED)
-  ENDIF(_BOOST_PYTHON_REQUIRED)
+macro(SEARCH_FOR_BOOST_PYTHON)
 
-  SET_BOOST_DEFAULT_OPTIONS()
+  cmake_parse_arguments(_BOOST_PYTHON_REQUIRED "REQUIRED" "" "" ${ARGN})
+  set(BOOST_PYTHON_NAME "python")
+  set(BOOST_PYTHON_REQUIRED "")
+  if(_BOOST_PYTHON_REQUIRED)
+    set(BOOST_PYTHON_REQUIRED REQUIRED)
+  endif(_BOOST_PYTHON_REQUIRED)
 
-  IF(NOT PYTHONLIBS_FOUND)
-    MESSAGE(FATAL_ERROR "Python has not been found. You should first call FindPython before calling SEARCH_FOR_BOOST_PYTHON macro.")
-  ENDIF(NOT PYTHONLIBS_FOUND)
+  set_boost_default_options()
 
-  # Test: pythonX, pythonXY and python-pyXY
-  SET(BOOST_PYTHON_COMPONENT_LIST
-    "python${PYTHON_VERSION_MAJOR}"
-    "python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}"
-    "python-py${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}")
-
-  SET(BOOST_PYTHON_FOUND FALSE)
-  FOREACH(BOOST_PYTHON_COMPONENT ${BOOST_PYTHON_COMPONENT_LIST})
-    SEARCH_FOR_BOOST_COMPONENT(${BOOST_PYTHON_COMPONENT} BOOST_PYTHON_FOUND)
-    IF(BOOST_PYTHON_FOUND)
-      SET(BOOST_PYTHON_NAME ${BOOST_PYTHON_COMPONENT})
-      BREAK()
-    ENDIF(BOOST_PYTHON_FOUND)
-  ENDFOREACH(BOOST_PYTHON_COMPONENT ${BOOST_PYTHON_COMPONENT_LIST})
-
-  # If boost-python has not been found, warn the user, and look for just "python"
-  IF(NOT BOOST_PYTHON_FOUND)
-    MESSAGE(WARNING "Impossible to check Boost.Python version. Trying with 'python'.")
-  ENDIF(NOT BOOST_PYTHON_FOUND)
-
-  IF(PYTHON_EXPORT_DEPENDENCY)
-    ADD_PROJECT_DEPENDENCY(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
-  ELSE()
-    FIND_PACKAGE(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
-  ENDIF()
-  STRING(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)
-
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
-    Boost_${UPPERCOMPONENT}_FOUND
-    Boost_${UPPERCOMPONENT}_LIBRARY
-    Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG
-    Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE
+  if(NOT PYTHON_EXECUTABLE)
+    message(
+      FATAL_ERROR
+        "Python has not been found. You should first call FindPython before calling SEARCH_FOR_BOOST_PYTHON macro."
     )
+  endif(NOT PYTHON_EXECUTABLE)
 
-  SET(Boost_PYTHON_LIBRARY ${Boost_${UPPERCOMPONENT}_LIBRARY})
-  MESSAGE(STATUS "Boost_PYTHON_LIBRARY: ${Boost_PYTHON_LIBRARY}")
-  LIST(APPEND Boost_PYTHON_LIBRARIES ${Boost_PYTHON_LIBRARY})
-  LIST(APPEND LOGGING_WATCHED_VARIABLES Boost_PYTHON_LIBRARY)
-ENDMACRO(SEARCH_FOR_BOOST_PYTHON)
+  # Test: pythonX, pythonXY and python-pyXY
+  set(BOOST_PYTHON_COMPONENT_LIST
+      "python${PYTHON_VERSION_MAJOR}"
+      "python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}"
+      "python-py${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}")
+
+  set(BOOST_PYTHON_FOUND FALSE)
+  foreach(BOOST_PYTHON_COMPONENT ${BOOST_PYTHON_COMPONENT_LIST})
+    search_for_boost_component(${BOOST_PYTHON_COMPONENT} BOOST_PYTHON_FOUND)
+    if(BOOST_PYTHON_FOUND)
+      set(BOOST_PYTHON_NAME ${BOOST_PYTHON_COMPONENT})
+      break()
+    endif(BOOST_PYTHON_FOUND)
+  endforeach(BOOST_PYTHON_COMPONENT ${BOOST_PYTHON_COMPONENT_LIST})
+
+  # If boost-python has not been found, warn the user, and look for just
+  # "python"
+  if(NOT BOOST_PYTHON_FOUND)
+    message(
+      WARNING "Impossible to check Boost.Python version. Trying with 'python'.")
+  endif(NOT BOOST_PYTHON_FOUND)
+
+  if(PYTHON_EXPORT_DEPENDENCY)
+    add_project_dependency(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS
+                           ${BOOST_PYTHON_NAME})
+  else()
+    find_package(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
+  endif()
+  string(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)
+
+  list(APPEND LOGGING_WATCHED_VARIABLES Boost_${UPPERCOMPONENT}_FOUND
+       Boost_${UPPERCOMPONENT}_LIBRARY Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG
+       Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE)
+
+  set(Boost_PYTHON_LIBRARY ${Boost_${UPPERCOMPONENT}_LIBRARY})
+  message(STATUS "Boost_PYTHON_LIBRARY: ${Boost_PYTHON_LIBRARY}")
+  list(APPEND Boost_PYTHON_LIBRARIES ${Boost_PYTHON_LIBRARY})
+  list(APPEND LOGGING_WATCHED_VARIABLES Boost_PYTHON_LIBRARY)
+endmacro(SEARCH_FOR_BOOST_PYTHON)
 
 #
-#.rst:
-# .. command:: SEARCH_FOR_BOOST
+# .rst: .. command:: SEARCH_FOR_BOOST
 #
-#  Deprecated. For Boost Python, use :command:`SEARCH_FOR_BOOST_PYTHON`. For other Boost components, use::
+# Deprecated. For Boost Python, use :command:`SEARCH_FOR_BOOST_PYTHON`. For
+# other Boost components, use::
 #
-#    add_project_dependency(Boost COMPONENTS ...) # or other argument to the find_package command.
+# add_project_dependency(Boost COMPONENTS ...) # or other argument to the
+# find_package command.
 #
-#  or, if you don't want it to be exported::
+# or, if you don't want it to be exported::
 #
-#    find_package(Boost COMPONENTS ...) # or other argument to the find_package command.
+# find_package(Boost COMPONENTS ...) # or other argument to the find_package
+# command.
 #
-#  This macro deals with Visual Studio Fortran incompatibilities
-#  and add detected flags to the pkg-config file automatically.
+# This macro deals with Visual Studio Fortran incompatibilities and add detected
+# flags to the pkg-config file automatically.
 #
-#  The components to be detected is controlled by :variable:`BOOST_COMPONENTS`.
+# The components to be detected is controlled by :variable:`BOOST_COMPONENTS`.
 #
-#  A special treatment must be done for the boost-python component.
-#  For boost >= 1.67.0, FindPython macro should be called first in order
-#  to automatically detect the right boost-python component version according
-#  to the Python version (2.7 or 3.x).
+# A special treatment must be done for the boost-python component. For boost >=
+# 1.67.0, FindPython macro should be called first in order to automatically
+# detect the right boost-python component version according to the Python
+# version (2.7 or 3.x).
 #
 
-
-MACRO(SEARCH_FOR_BOOST)
-  MESSAGE(AUTHOR_WARNING "SEARCH_FOR_BOOST is deprecated. Please use find_package() / SEARCH_FOR_BOOST_PYTHON()")
-  SET(Boost_USE_STATIC_LIBS OFF)
-  SET(Boost_USE_MULTITHREADED ON)
+macro(SEARCH_FOR_BOOST)
+  message(
+    AUTHOR_WARNING
+      "SEARCH_FOR_BOOST is deprecated. Please use find_package() / SEARCH_FOR_BOOST_PYTHON()"
+  )
+  set(Boost_USE_STATIC_LIBS OFF)
+  set(Boost_USE_MULTITHREADED ON)
 
   # First try to find Boost to get the version
-  FIND_PACKAGE(Boost ${BOOST_REQUIRED})
-  STRING(REPLACE "_" "." Boost_SHORT_VERSION ${Boost_LIB_VERSION})
-  IF("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
-    SET(BUILD_SHARED_LIBS ON)
-    SET(Boost_NO_BOOST_CMAKE ON)
-  ENDIF("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
-
-  IF(NOT DEFINED BOOST_COMPONENTS)
-    SET(BOOST_COMPONENTS
-      filesystem system thread program_options unit_test_framework)
-  ENDIF(NOT DEFINED BOOST_COMPONENTS)
-
-  # Check if python is in the list and adjust the version according to the current Python version.
-  # This is made mandatory if for Boost version greater than 1.67.0
-  LIST(FIND BOOST_COMPONENTS python PYTHON_IN_BOOST_COMPONENTS)
-  IF(${PYTHON_IN_BOOST_COMPONENTS} GREATER -1)
-    LIST(REMOVE_AT BOOST_COMPONENTS ${PYTHON_IN_BOOST_COMPONENTS})
-    SEARCH_FOR_BOOST_PYTHON(${BOOST_REQUIRED})
-  ENDIF(${PYTHON_IN_BOOST_COMPONENTS} GREATER -1)
+  find_package(Boost ${BOOST_REQUIRED})
+  string(REPLACE "_" "." Boost_SHORT_VERSION ${Boost_LIB_VERSION})
+  if("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70" OR "${Boost_SHORT_VERSION}"
+                                                        VERSION_EQUAL "1.70")
+    set(BUILD_SHARED_LIBS ON)
+    set(Boost_NO_BOOST_CMAKE ON)
+  endif("${Boost_SHORT_VERSION}" VERSION_GREATER "1.70"
+        OR "${Boost_SHORT_VERSION}" VERSION_EQUAL "1.70")
+
+  if(NOT DEFINED BOOST_COMPONENTS)
+    set(BOOST_COMPONENTS filesystem system thread program_options
+                         unit_test_framework)
+  endif(NOT DEFINED BOOST_COMPONENTS)
+
+  # Check if python is in the list and adjust the version according to the
+  # current Python version. This is made mandatory if for Boost version greater
+  # than 1.67.0
+  list(FIND BOOST_COMPONENTS python PYTHON_IN_BOOST_COMPONENTS)
+  if(${PYTHON_IN_BOOST_COMPONENTS} GREATER -1)
+    list(REMOVE_AT BOOST_COMPONENTS ${PYTHON_IN_BOOST_COMPONENTS})
+    search_for_boost_python(${BOOST_REQUIRED})
+  endif(${PYTHON_IN_BOOST_COMPONENTS} GREATER -1)
 
   # Make Boost component exportable
-  LIST(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE 0 "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON)")
-  LIST(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY 0 "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON)")
-  ADD_PROJECT_DEPENDENCY(Boost ${BOOST_REQUIRED} COMPONENTS ${BOOST_COMPONENTS} REQUIRED)
-
-  IF(NOT Boost_FOUND)
-    MESSAGE(
+  list(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE 0
+       "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON)")
+  list(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY 0
+       "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON)")
+  add_project_dependency(Boost ${BOOST_REQUIRED} COMPONENTS ${BOOST_COMPONENTS}
+                         REQUIRED)
+
+  if(NOT Boost_FOUND)
+    message(
       FATAL_ERROR "Failed to detect Boost with the following components:\n"
-      ${COMPONENTS})
-  ENDIF(NOT Boost_FOUND)
+                  ${COMPONENTS})
+  endif(NOT Boost_FOUND)
 
-  PKG_CONFIG_APPEND_CFLAGS("-I${Boost_INCLUDE_DIR}")
+  pkg_config_append_cflags("-I${Boost_INCLUDE_DIR}")
 
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
+  list(
+    APPEND
+    LOGGING_WATCHED_VARIABLES
     Boost_USE_MULTITHREADED
     Boost_USE_STATIC_LIBS
     Boost_ADDITIONAL_VERSIONS
@@ -205,107 +237,109 @@ MACRO(SEARCH_FOR_BOOST)
     Boost_MAJOR_VERSION
     Boost_MINOR_VERSION
     Boost_SUBMINOR_VERSION
-    Boost_LIB_DIAGNOSTIC_DEFINITIONS
-    )
-  FOREACH(COMPONENT ${BOOST_COMPONENTS})
-    STRING(TOUPPER ${COMPONENT} UPPERCOMPONENT)
-    LIST(APPEND LOGGING_WATCHED_VARIABLES
-      Boost_${UPPERCOMPONENT}_FOUND
-      Boost_${UPPERCOMPONENT}_LIBRARY
-      Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG
-      Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE
-      )
-  ENDFOREACH()
+    Boost_LIB_DIAGNOSTIC_DEFINITIONS)
+  foreach(COMPONENT ${BOOST_COMPONENTS})
+    string(TOUPPER ${COMPONENT} UPPERCOMPONENT)
+    list(APPEND LOGGING_WATCHED_VARIABLES Boost_${UPPERCOMPONENT}_FOUND
+         Boost_${UPPERCOMPONENT}_LIBRARY Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG
+         Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE)
+  endforeach()
 
   # On darwin systems, we must link againt boost_python with unresolved symbols.
-  # We then remove boost_python from the global Boost_LIBRARIES list to handle it with specific care.
-  IF(Boost_PYTHON_LIBRARY)
-    LIST(REMOVE_ITEM Boost_LIBRARIES ${Boost_PYTHON_LIBRARY})
-  ENDIF(Boost_PYTHON_LIBRARY)
-ENDMACRO(SEARCH_FOR_BOOST)
-
-#.rst:
-# .. command:: TARGET_LINK_BOOST_PYTHON (TARGET <PRIVATE|PUBLIC|INTERFACE>)
+  # We then remove boost_python from the global Boost_LIBRARIES list to handle
+  # it with specific care.
+  if(Boost_PYTHON_LIBRARY)
+    list(REMOVE_ITEM Boost_LIBRARIES ${Boost_PYTHON_LIBRARY})
+  endif(Boost_PYTHON_LIBRARY)
+endmacro(SEARCH_FOR_BOOST)
+
+# .rst: .. command:: TARGET_LINK_BOOST_PYTHON (TARGET
+# <PRIVATE|PUBLIC|INTERFACE>)
 #
-#   Link target againt boost_python library.
+# Link target againt boost_python library.
 #
-#   :target: is either a library or an executable
-#   :private,public,interface: The PUBLIC, PRIVATE and INTERFACE keywords can be used to specify both the link dependencies and the link interface.
+# :target: is either a library or an executable :private,public,interface: The
+# PUBLIC, PRIVATE and INTERFACE keywords can be used to specify both the link
+# dependencies and the link interface.
 #
-#   On darwin systems, boost_python is not linked against any python library.
-#   This linkage is resolved at execution time via the python interpreter.
-#   We then need to stipulate that boost_python has unresolved symbols at compile time for a library target.
-#   Otherwise, for executables we need to link to a specific version of python.
+# On darwin systems, boost_python is not linked against any python library. This
+# linkage is resolved at execution time via the python interpreter. We then need
+# to stipulate that boost_python has unresolved symbols at compile time for a
+# library target. Otherwise, for executables we need to link to a specific
+# version of python.
 #
-MACRO(TARGET_LINK_BOOST_PYTHON target)
-  IF(${ARGC} GREATER 1)
-    SET(PUBLIC_KEYWORD ${ARGV1})
-  ENDIF()
-
-  IF(APPLE)
-    GET_TARGET_PROPERTY(TARGET_TYPE ${target} TYPE)
-
-    IF(${TARGET_TYPE} MATCHES EXECUTABLE)
-      TARGET_LINK_LIBRARIES(${target} ${PUBLIC_KEYWORD} ${Boost_PYTHON_LIBRARY})
-    ELSE(${TARGET_TYPE} MATCHES EXECUTABLE)
-      TARGET_LINK_LIBRARIES(${target} ${PUBLIC_KEYWORD} -Wl,-undefined,dynamic_lookup,${Boost_PYTHON_LIBRARIES})
-    ENDIF(${TARGET_TYPE} MATCHES EXECUTABLE)
-
-    TARGET_INCLUDE_DIRECTORIES(${target} SYSTEM ${PUBLIC_KEYWORD} ${Boost_INCLUDE_DIR})
-  ELSE(APPLE)
-    IF(TARGET Boost::python3${Python3_VERSION_MINOR})
-      TARGET_LINK_LIBRARIES(${target} ${PUBLIC_KEYWORD} Boost::python3${Python3_VERSION_MINOR})
-    ELSE()
-      TARGET_LINK_LIBRARIES(${target} ${PUBLIC_KEYWORD} ${Boost_PYTHON_LIBRARIES})
-      TARGET_INCLUDE_DIRECTORIES(${target} SYSTEM ${PUBLIC_KEYWORD} ${Boost_INCLUDE_DIR} ${PYTHON_INCLUDE_DIR})
-    ENDIF()
-  ENDIF(APPLE)
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
-    Boost_PYTHON_LIBRARIES
-    )
-ENDMACRO(TARGET_LINK_BOOST_PYTHON)
-
-#.rst:
-# .. command:: PKG_CONFIG_APPEND_BOOST_LIBS
+macro(TARGET_LINK_BOOST_PYTHON target)
+  if(${ARGC} GREATER 1)
+    set(PUBLIC_KEYWORD ${ARGV1})
+  endif()
+
+  if(APPLE)
+    get_target_property(TARGET_TYPE ${target} TYPE)
+
+    if(${TARGET_TYPE} MATCHES EXECUTABLE)
+      target_link_libraries(${target} ${PUBLIC_KEYWORD} ${Boost_PYTHON_LIBRARY})
+    else(${TARGET_TYPE} MATCHES EXECUTABLE)
+      target_link_libraries(
+        ${target} ${PUBLIC_KEYWORD}
+        -Wl,-undefined,dynamic_lookup,${Boost_PYTHON_LIBRARIES})
+    endif(${TARGET_TYPE} MATCHES EXECUTABLE)
+
+    target_include_directories(${target} SYSTEM ${PUBLIC_KEYWORD}
+                               ${Boost_INCLUDE_DIR})
+  else(APPLE)
+    if(TARGET Boost::python3${Python3_VERSION_MINOR})
+      target_link_libraries(${target} ${PUBLIC_KEYWORD}
+                            Boost::python3${Python3_VERSION_MINOR})
+    else()
+      target_link_libraries(${target} ${PUBLIC_KEYWORD}
+                            ${Boost_PYTHON_LIBRARIES})
+      target_include_directories(${target} SYSTEM ${PUBLIC_KEYWORD}
+                                 ${Boost_INCLUDE_DIR} ${PYTHON_INCLUDE_DIR})
+    endif()
+  endif(APPLE)
+  list(APPEND LOGGING_WATCHED_VARIABLES Boost_PYTHON_LIBRARIES)
+endmacro(TARGET_LINK_BOOST_PYTHON)
+
+# .rst: .. command:: PKG_CONFIG_APPEND_BOOST_LIBS
 #
-#   This macro appends Boost libraries to the pkg-config file. A list of Boost
-#   components is expected, for instance::
+# This macro appends Boost libraries to the pkg-config file. A list of Boost
+# components is expected, for instance::
 #
-#     PKG_CONFIG_APPEND_BOOST_LIBS(system filesystem)
+# PKG_CONFIG_APPEND_BOOST_LIBS(system filesystem)
 #
-MACRO(PKG_CONFIG_APPEND_BOOST_LIBS)
-  PKG_CONFIG_APPEND_LIBRARY_DIR("${Boost_LIBRARY_DIRS}")
+macro(PKG_CONFIG_APPEND_BOOST_LIBS)
+  pkg_config_append_library_dir("${Boost_LIBRARY_DIRS}")
 
-  FOREACH(COMPONENT ${ARGN})
-    STRING(TOUPPER ${COMPONENT} UPPERCOMPONENT)
-    STRING(TOLOWER ${COMPONENT} LOWERCOMPONENT)
+  foreach(COMPONENT ${ARGN})
+    string(TOUPPER ${COMPONENT} UPPERCOMPONENT)
+    string(TOLOWER ${COMPONENT} LOWERCOMPONENT)
 
     # See https://cmake.org/cmake/help/latest/module/FindBoost.html
-    IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
-      SET(LIB_PATH ${Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG})
-    ELSE()
-      SET(LIB_PATH ${Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE})
-    ENDIF()
-
-    IF("${LIB_PATH}" STREQUAL "")
-      SET(LIB_PATH ${Boost_${UPPERCOMPONENT}_LIBRARY})
-    ENDIF("${LIB_PATH}" STREQUAL "")
-
-    IF(APPLE)
-      GET_FILENAME_COMPONENT(LIB_NAME ${LIB_PATH} NAME_WE)
-      STRING(REGEX REPLACE "^lib" "" LIB_NAME "${LIB_NAME}")
-      IF("${LOWERCOMPONENT}" MATCHES "python")
-        PKG_CONFIG_APPEND_LIBS_RAW(-Wl,-undefined,dynamic_lookup,-l${LIB_NAME})
-      ELSE("${LOWERCOMPONENT}" MATCHES "python")
-        PKG_CONFIG_APPEND_LIBS_RAW(-l${LIB_NAME})
-      ENDIF("${LOWERCOMPONENT}" MATCHES "python")
-    ELSEIF(WIN32)
-      GET_FILENAME_COMPONENT(LIB_NAME ${LIB_PATH} NAME)
-      PKG_CONFIG_APPEND_LIBS_RAW("-l${LIB_NAME}")
-    ELSE()
-      GET_FILENAME_COMPONENT(LIB_NAME ${LIB_PATH} NAME_WE)
-      STRING(REGEX REPLACE "^lib" "" LIB_NAME "${LIB_NAME}")
-      PKG_CONFIG_APPEND_LIBS_RAW("-l${LIB_NAME}")
-    ENDIF(APPLE)
-  ENDFOREACH()
-ENDMACRO(PKG_CONFIG_APPEND_BOOST_LIBS)
+    if(CMAKE_BUILD_TYPE MATCHES DEBUG)
+      set(LIB_PATH ${Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG})
+    else()
+      set(LIB_PATH ${Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE})
+    endif()
+
+    if("${LIB_PATH}" STREQUAL "")
+      set(LIB_PATH ${Boost_${UPPERCOMPONENT}_LIBRARY})
+    endif("${LIB_PATH}" STREQUAL "")
+
+    if(APPLE)
+      get_filename_component(LIB_NAME ${LIB_PATH} NAME_WE)
+      string(REGEX REPLACE "^lib" "" LIB_NAME "${LIB_NAME}")
+      if("${LOWERCOMPONENT}" MATCHES "python")
+        pkg_config_append_libs_raw(-Wl,-undefined,dynamic_lookup,-l${LIB_NAME})
+      else("${LOWERCOMPONENT}" MATCHES "python")
+        pkg_config_append_libs_raw(-l${LIB_NAME})
+      endif("${LOWERCOMPONENT}" MATCHES "python")
+    elseif(WIN32)
+      get_filename_component(LIB_NAME ${LIB_PATH} NAME)
+      pkg_config_append_libs_raw("-l${LIB_NAME}")
+    else()
+      get_filename_component(LIB_NAME ${LIB_PATH} NAME_WE)
+      string(REGEX REPLACE "^lib" "" LIB_NAME "${LIB_NAME}")
+      pkg_config_append_libs_raw("-l${LIB_NAME}")
+    endif(APPLE)
+  endforeach()
+endmacro(PKG_CONFIG_APPEND_BOOST_LIBS)
diff --git a/cmake/boost/FindBoost.cmake b/cmake/boost/FindBoost.cmake
index ce68c2f..4e5c45d 100644
--- a/cmake/boost/FindBoost.cmake
+++ b/cmake/boost/FindBoost.cmake
@@ -2096,4 +2096,3 @@ set(_Boost_COMPONENTS_SEARCHED "${_Boost_COMPONENTS_SEARCHED}"
 
 # Restore project's policies
 cmake_policy(POP)
-
diff --git a/cmake/bootstrap b/cmake/bootstrap
deleted file mode 100755
index e69de29..0000000
diff --git a/cmake/catkin.cmake b/cmake/catkin.cmake
index 6369f7e..2a12d3f 100644
--- a/cmake/catkin.cmake
+++ b/cmake/catkin.cmake
@@ -2,22 +2,20 @@
 #
 # Author: Florent Lamiraux
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-# Override binary installation directory
-# Be aware that including this file implies that binary installation directory
-# cannot be chosen by user.
-SET(CATKIN_PACKAGE_BIN_DESTINATION ${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME})
-SET(CMAKE_INSTALL_BINDIR ${CATKIN_PACKAGE_BIN_DESTINATION})
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
+# Override binary installation directory Be aware that including this file
+# implies that binary installation directory cannot be chosen by user.
+set(CATKIN_PACKAGE_BIN_DESTINATION ${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME})
+set(CMAKE_INSTALL_BINDIR ${CATKIN_PACKAGE_BIN_DESTINATION})
diff --git a/cmake/compile.py b/cmake/compile.py
index 97bc31f..8f63506 100755
--- a/cmake/compile.py
+++ b/cmake/compile.py
@@ -15,30 +15,28 @@
 # received a copy of the GNU Lesser General Public License along with
 # jrl-cmakemodules. If not, see <http://www.gnu.org/licenses/>.
 
-import sys, os, py_compile
+import sys
+import py_compile
 
 srcdir = sys.argv[1]
 builddir = sys.argv[2]
 name = sys.argv[3]
 
-if srcdir[-1] != '/':
-    srcdir = srcdir + '/'
-if builddir[-1] != '/':
-    builddir = builddir + '/'
+if srcdir[-1] != "/":
+    srcdir = srcdir + "/"
+if builddir[-1] != "/":
+    builddir = builddir + "/"
 
 src = srcdir + name
-comp = builddir + name + (__debug__ and 'c' or 'o')
+comp = builddir + name + (__debug__ and "c" or "o")
 
-#print("compiling " + src + " into " + comp)
+# print("compiling " + src + " into " + comp)
 
-#os.mkdir(os.path.splittext(comp)[0])
+# os.mkdir(os.path.splittext(comp)[0])
 
 try:
     py_compile.compile(src, comp, doraise=True)
 except Exception as e:
-    print ("Failed to compile python script: {0}".format (repr (src)))
-    print ("Exception raised: {0}".format (str(e)))
-    sys.exit(1)
-except:
-    print ("Failed to compile python script: {0}".format (repr (src)))
+    print("Failed to compile python script: {0}".format(repr(src)))
+    print("Exception raised: {0}".format(str(e)))
     sys.exit(1)
diff --git a/cmake/compiler.cmake b/cmake/compiler.cmake
index a191c80..fcd428e 100644
--- a/cmake/compiler.cmake
+++ b/cmake/compiler.cmake
@@ -1,64 +1,69 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-INCLUDE(CheckCXXCompilerFlag)
+include(CheckCXXCompilerFlag)
 
-MACRO(_SETUP_PROJECT_WARNINGS)
-  # -Wmissing-declarations is disabled for now
-  # as older GCC version does not support it
-  # but CMake doest not check for the flag acceptance
-  # correctly.
+macro(_SETUP_PROJECT_WARNINGS)
+  # -Wmissing-declarations is disabled for now as older GCC version does not
+  # support it but CMake doest not check for the flag acceptance correctly.
 
- IF(UNIX)
-  SET(FLAGS -pedantic -Wno-long-long -Wall -Wextra -Wcast-align -Wcast-qual
-            -Wformat -Wwrite-strings -Wconversion)
-  FOREACH(FLAG ${FLAGS})
-    CHECK_CXX_COMPILER_FLAG(${FLAG} R${FLAG})
-    IF(${R${FLAG}})
-      SET(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} ${FLAG}")
-    ENDIF(${R${FLAG}})
-  ENDFOREACH(FLAG ${FLAGS})
+  if(UNIX)
+    set(FLAGS
+        -pedantic
+        -Wno-long-long
+        -Wall
+        -Wextra
+        -Wcast-align
+        -Wcast-qual
+        -Wformat
+        -Wwrite-strings
+        -Wconversion)
+    foreach(FLAG ${FLAGS})
+      check_cxx_compiler_flag(${FLAG} R${FLAG})
+      if(${R${FLAG}})
+        set(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} ${FLAG}")
+      endif(${R${FLAG}})
+    endforeach(FLAG ${FLAGS})
 
-  IF(NOT DEFINED CXX_DISABLE_WERROR)
-    SET(WARNING_CXX_FLAGS "-Werror ${WARNING_CXX_FLAGS}")
-  ENDIF(NOT DEFINED CXX_DISABLE_WERROR)
- ENDIF(UNIX)
+    if(NOT DEFINED CXX_DISABLE_WERROR)
+      set(WARNING_CXX_FLAGS "-Werror ${WARNING_CXX_FLAGS}")
+    endif(NOT DEFINED CXX_DISABLE_WERROR)
+  endif(UNIX)
 
- # For win32 systems, it is impossible to use Wall,
- # especially with boost, which is way too verbose
- # The default levels (W3/W4) are enough
- # The next macro remove warnings on deprecations due to stl.
- IF(MSVC)
-  SET(WARNING_CXX_FLAGS "-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS")
-  SET(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
-  ## -- The following warnings are removed to highlight the output
-  # C4101 The local variable is never used
-  # removed since happens frequently in headers.
-  SET(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4101")
-  # C4250 'class1' : inherits 'class2::member' via dominance
-  SET(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4250")
-  # C4251 class 'type' needs to have dll-interface to be used by clients of class 'type2'
-  # ~ in practice, raised by the classes that have non-dll attribute (such as std::vector)
-  SET(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4251")
-  # C4275 non - DLL-interface used as base for DLL-interface
-  SET(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4275")
-  # C4355 "this" used in base member initializer list
-  SET(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4355")
- ENDIF()
+  # For win32 systems, it is impossible to use Wall, especially with boost,
+  # which is way too verbose The default levels (W3/W4) are enough The next
+  # macro remove warnings on deprecations due to stl.
+  if(MSVC)
+    set(WARNING_CXX_FLAGS "-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS")
+    set(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
+    # -- The following warnings are removed to highlight the output C4101 The
+    # local variable is never used removed since happens frequently in headers.
+    set(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4101")
+    # C4250 'class1' : inherits 'class2::member' via dominance
+    set(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4250")
+    # C4251 class 'type' needs to have dll-interface to be used by clients of
+    # class 'type2' ~ in practice, raised by the classes that have non-dll
+    # attribute (such as std::vector)
+    set(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4251")
+    # C4275 non - DLL-interface used as base for DLL-interface
+    set(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4275")
+    # C4355 "this" used in base member initializer list
+    set(WARNING_CXX_FLAGS "${WARNING_CXX_FLAGS} /wd4355")
+  endif()
 
- SET(CMAKE_CXX_FLAGS "${WARNING_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")
+  set(CMAKE_CXX_FLAGS "${WARNING_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")
 
- LIST(APPEND LOGGING_WATCHED_VARIABLES WARNING_CXX_FLAGS)
-ENDMACRO(_SETUP_PROJECT_WARNINGS)
+  list(APPEND LOGGING_WATCHED_VARIABLES WARNING_CXX_FLAGS)
+endmacro(_SETUP_PROJECT_WARNINGS)
diff --git a/cmake/config.hh.cmake b/cmake/config.hh.cmake
index a4b2d88..0af547f 100644
--- a/cmake/config.hh.cmake
+++ b/cmake/config.hh.cmake
@@ -1,4 +1,4 @@
-/* 
+/*
  * This file has been automatically generated by the jrl-cmakemodules.
  * Please see https://github.com/jrl-umi3218/jrl-cmakemodules/blob/master/config.hh.cmake for details.
 */
diff --git a/cmake/coverage.cmake b/cmake/coverage.cmake
index 3b50f71..da4c989 100644
--- a/cmake/coverage.cmake
+++ b/cmake/coverage.cmake
@@ -1,19 +1,17 @@
 #
-#   Copyright 2022 CNRS
-#
-#   Author: Guilhem Saurel
+# Copyright 2022 CNRS
 #
+# Author: Guilhem Saurel
 #
 
 set_property(GLOBAL PROPERTY JRL_CMAKEMODULES_HAS_CPP_COVERAGE OFF)
 set_property(GLOBAL PROPERTY JRL_CMAKEMODULES_HAS_PYTHON_COVERAGE OFF)
 
-#.rst:
-# .. ifmode:: internal
+# .rst: .. ifmode:: internal
 #
-#   .. variable:: ENABLE_COVERAGE
+# .. variable:: ENABLE_COVERAGE
 #
-#      When this is ON, coverage compiler flags are enabled. Disabled for MSVC.
+# When this is ON, coverage compiler flags are enabled. Disabled for MSVC.
 
 if(NOT MSVC)
   option(ENABLE_COVERAGE "Enable C++ and Python code coverage" OFF)
@@ -21,22 +19,23 @@ else()
   set(ENABLE_COVERAGE OFF)
 endif()
 
-#.rst:
-# .. ifmode:: internal
+# .rst: .. ifmode:: internal
 #
-#   .. command:: enable_coverage
+# .. command:: enable_coverage
 #
-#      Configure a target with --coverage compilation and link flags
-#      if the ENABLE_COVERAGE option is ON
+# Configure a target with --coverage compilation and link flags if the
+# ENABLE_COVERAGE option is ON
 function(enable_coverage target)
   set_property(GLOBAL PROPERTY JRL_CMAKEMODULES_HAS_CPP_COVERAGE ON)
-  target_compile_options(${target} PRIVATE $<$<BOOL:ENABLE_COVERAGE>:--coverage>)
+  target_compile_options(${target}
+                         PRIVATE $<$<BOOL:ENABLE_COVERAGE>:--coverage>)
   target_link_options(${target} PRIVATE $<$<BOOL:ENABLE_COVERAGE>:--coverage>)
 endfunction()
 
 macro(_SETUP_COVERAGE_FINALIZE)
   get_property(_CPP_COVERAGE GLOBAL PROPERTY JRL_CMAKEMODULES_HAS_CPP_COVERAGE)
-  get_property(_PYTHON_COVERAGE GLOBAL PROPERTY JRL_CMAKEMODULES_HAS_PYTHON_COVERAGE)
+  get_property(_PYTHON_COVERAGE GLOBAL
+               PROPERTY JRL_CMAKEMODULES_HAS_PYTHON_COVERAGE)
 
   if(ENABLE_COVERAGE AND (_CPP_COVERAGE OR _PYTHON_COVERAGE))
     find_program(GENHTML genhtml)
@@ -51,10 +50,15 @@ macro(_SETUP_COVERAGE_FINALIZE)
     if(_CPP_COVERAGE)
       find_program(LCOV lcov)
       if(NOT LCOV)
-        message(FATAL_ERROR "lcov is required with ENABLE_COVERAGE=ON and enable_coverage() on C/C++ target")
+        message(
+          FATAL_ERROR
+            "lcov is required with ENABLE_COVERAGE=ON and enable_coverage() on C/C++ target"
+        )
       endif()
-      add_custom_command(OUTPUT cpp.lcov
-        COMMAND ${LCOV} --include "${PROJECT_SOURCE_DIR}/\\*" -c -d ${PROJECT_SOURCE_DIR} -o cpp.lcov
+      add_custom_command(
+        OUTPUT cpp.lcov
+        COMMAND ${LCOV} --include "${PROJECT_SOURCE_DIR}/\\*" -c -d
+                ${PROJECT_SOURCE_DIR} -o cpp.lcov
         COMMENT "Generating code coverage data for C++")
       set(_COVERAGE_HTML ${_COVERAGE_HTML} -p ${PROJECT_SOURCE_DIR})
       set(_COVERAGE_FILES ${_COVERAGE_FILES} cpp.lcov)
@@ -62,21 +66,26 @@ macro(_SETUP_COVERAGE_FINALIZE)
     endif()
 
     if(_PYTHON_COVERAGE)
-      execute_process(COMMAND ${PYTHON_EXECUTABLE} -m coverage RESULT_VARIABLE _cov_ret)
+      execute_process(COMMAND ${PYTHON_EXECUTABLE} -m coverage
+                      RESULT_VARIABLE _cov_ret)
       if(_cov_ret EQUAL 1)
-        message(FATAL_ERROR "coverage.py required for python with ENABLE_COVERAGE=ON")
+        message(
+          FATAL_ERROR "coverage.py required for python with ENABLE_COVERAGE=ON")
       endif()
-      add_custom_command(OUTPUT python.lcov
+      add_custom_command(
+        OUTPUT python.lcov
         COMMAND ${PYTHON_EXECUTABLE} -m coverage combine
         COMMAND ${PYTHON_EXECUTABLE} -m coverage lcov -o python.lcov
         BYPRODUCTS .coverage
         COMMENT "Generating code coverage data for Python")
-      set(_COVERAGE_HTML ${_COVERAGE_HTML} -p ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
+      set(_COVERAGE_HTML ${_COVERAGE_HTML} -p
+                         ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
       set(_COVERAGE_FILES ${_COVERAGE_FILES} python.lcov)
       message(STATUS "Python coverage will be generated")
     endif()
 
-    add_custom_target(coverage
+    add_custom_target(
+      coverage
       COMMAND ${_COVERAGE_HTML} -o ${_COVERAGE_DIR} ${_COVERAGE_FILES}
       DEPENDS ${_COVERAGE_FILES}
       BYPRODUCTS ${_COVERAGE_DIR}
diff --git a/cmake/cpack.cmake b/cmake/cpack.cmake
index 2cb0ae7..612b0b2 100644
--- a/cmake/cpack.cmake
+++ b/cmake/cpack.cmake
@@ -1,84 +1,81 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # ADD_CMAKE_DEPENDENCY
 # --------------------
-# 
+#
 # Warning: use on this macro if NECESSARY.
-# 
-# This macro adds CPack dependencies support to the package.
-# It should be avoided unless Ubuntu 8.04 packages have to be built.
 #
-# Please, prefer the use of git-archive for tarball generation
-# and debhelper for Debian package generation.
+# This macro adds CPack dependencies support to the package. It should be
+# avoided unless Ubuntu 8.04 packages have to be built.
+#
+# Please, prefer the use of git-archive for tarball generation and debhelper for
+# Debian package generation.
 #
-MACRO(ADD_CMAKE_DEPENDENCY PKG_CONFIG_STRING)
-  MESSAGE(STATUS "PKG_CONFIG_STRING: ${PKG_CONFIG_STRING}")
-  STRING(REGEX MATCH "[^<>= ]+" LIBRARY_NAME "${PKG_CONFIG_STRING}")
+macro(ADD_CMAKE_DEPENDENCY PKG_CONFIG_STRING)
+  message(STATUS "PKG_CONFIG_STRING: ${PKG_CONFIG_STRING}")
+  string(REGEX MATCH "[^<>= ]+" LIBRARY_NAME "${PKG_CONFIG_STRING}")
   # Carefull the space in front of the matching string is important to avoid
   # confusion with package name.
-  STRING(REGEX MATCHALL " [0-9]+.[0-9]+(.[a-z0-9-])*" VERSION "${PKG_CONFIG_STRING}")
-  _ADD_TO_LIST(CPACK_INTERNAL_CONFIG_REQUIRES "${LIBRARY_NAME}(>=${VERSION})" ",")
-ENDMACRO(ADD_CMAKE_DEPENDENCY)
+  string(REGEX MATCHALL " [0-9]+.[0-9]+(.[a-z0-9-])*" VERSION
+               "${PKG_CONFIG_STRING}")
+  _add_to_list(CPACK_INTERNAL_CONFIG_REQUIRES "${LIBRARY_NAME}(>=${VERSION})"
+               ",")
+endmacro(ADD_CMAKE_DEPENDENCY)
 
 # SETUP_PROJECT_CPACK
 # -------------------
 #
 # Warning: use only this macro if NECESSARY.
 #
-# This macro adds CPack support to the package.
-# It should be avoided unless Ubuntu 8.04 packages have to be built.
+# This macro adds CPack support to the package. It should be avoided unless
+# Ubuntu 8.04 packages have to be built.
 #
-# Please, prefer the use of git-archive for tarball generation
-# and debhelper for Debian package generation.
+# Please, prefer the use of git-archive for tarball generation and debhelper for
+# Debian package generation.
 #
-MACRO(SETUP_PROJECT_CPACK)
-  SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})
-  SET(CPACK_PACKAGE_VENDOR "JRL CNRS/AIST")
-  SET(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
+macro(SETUP_PROJECT_CPACK)
+  set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})
+  set(CPACK_PACKAGE_VENDOR "JRL CNRS/AIST")
+  set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
 
-  SET(CPACK_PACKAGE_DESCRIPTION_FILE ${PROJECT_SOURCE_DIR}/README.md)
-  SET(CPACK_DEBIAN_PACKAGE_MAINTAINER
-    "Olivier Stasse (olivier.stasse@aist.go.jp)")
+  set(CPACK_PACKAGE_DESCRIPTION_FILE ${PROJECT_SOURCE_DIR}/README.md)
+  set(CPACK_DEBIAN_PACKAGE_MAINTAINER
+      "Olivier Stasse (olivier.stasse@aist.go.jp)")
 
-  # The following components are regex's to match anywhere (unless anchored)
-  # in absolute path + filename to find files or directories to be excluded
-  # from source tarball.
-  SET(CPACK_SOURCE_IGNORE_FILES
-    "~$"
-    "^${PROJECT_SOURCE_DIR}/build/"
-    "^${PROJECT_SOURCE_DIR}/.git/"
-    )
+  # The following components are regex's to match anywhere (unless anchored) in
+  # absolute path + filename to find files or directories to be excluded from
+  # source tarball.
+  set(CPACK_SOURCE_IGNORE_FILES "~$" "^${PROJECT_SOURCE_DIR}/build/"
+                                "^${PROJECT_SOURCE_DIR}/.git/")
 
-  SET(
-    CPACK_SOURCE_PACKAGE_FILE_NAME
-    "${PROJECT_NAME}-src-${PROJECT_VERSION}"
-    CACHE INTERNAL "tarball basename"
-    )
+  set(CPACK_SOURCE_PACKAGE_FILE_NAME
+      "${PROJECT_NAME}-src-${PROJECT_VERSION}"
+      CACHE INTERNAL "tarball basename")
 
-  SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})
-  SET(CPACK_BINARY_DEB ON)
-  SET(CPACK_GENERATOR TGZ)
-  SET(CPACK_GENERATOR DEB)
-  SET(CPACK_PACKAGING_INSTALL_PREFIX "/opt/openrobots")
+  set(CPACK_PACKAGE_NAME ${PROJECT_NAME})
+  set(CPACK_BINARY_DEB ON)
+  set(CPACK_GENERATOR TGZ)
+  set(CPACK_GENERATOR DEB)
+  set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/openrobots")
 
   # Set dependencies
-  SET(CPACK_DEBIAN_PACKAGE_DEPENDS "${CPACK_INTERNAL_CONFIG_REQUIRES}")
+  set(CPACK_DEBIAN_PACKAGE_DEPENDS "${CPACK_INTERNAL_CONFIG_REQUIRES}")
 
-  # CPack SHOULD be called after setting all the variables.
-  # SETUP_PROJECT_CPACK is supposed to be called only once for a project.
-  INCLUDE(CPack)
+  # CPack SHOULD be called after setting all the variables. SETUP_PROJECT_CPACK
+  # is supposed to be called only once for a project.
+  include(CPack)
 
-ENDMACRO(SETUP_PROJECT_CPACK)
+endmacro(SETUP_PROJECT_CPACK)
diff --git a/cmake/createshexe.cmake b/cmake/createshexe.cmake
index 9b27e36..bddca2b 100644
--- a/cmake/createshexe.cmake
+++ b/cmake/createshexe.cmake
@@ -1,31 +1,41 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # CREATE_SH_EXE
 # -------------------
 #
-# Add a deb target to generate a Debian package using
-# git-buildpackage (Linux specific).
+# Add a deb target to generate a Debian package using git-buildpackage (Linux
+# specific).
 #
-MACRO(CREATE_SH_EXE EXEC_NAME)
-  IF(UNIX)  
-    SET(sh_exe_filename "${EXEC_NAME}.sh")
-    FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${sh_exe_filename} "#!/bin/sh\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CMAKE_INSTALL_PREFIX}/lib/plugin;export LD_LIBRARY_PATH\n./${EXEC_NAME}")
-    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${sh_exe_filename} 
+macro(CREATE_SH_EXE EXEC_NAME)
+  if(UNIX)
+    set(sh_exe_filename "${EXEC_NAME}.sh")
+    file(
+      WRITE ${CMAKE_CURRENT_BINARY_DIR}/${sh_exe_filename}
+      "#!/bin/sh\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CMAKE_INSTALL_PREFIX}/lib/plugin;export LD_LIBRARY_PATH\n./${EXEC_NAME}"
+    )
+    install(
+      FILES ${CMAKE_CURRENT_BINARY_DIR}/${sh_exe_filename}
       DESTINATION bin
-      PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
-      GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ)
-  ENDIF(UNIX)
-ENDMACRO(CREATE_SH_EXE)
+      PERMISSIONS
+        OWNER_EXECUTE
+        OWNER_WRITE
+        OWNER_READ
+        GROUP_EXECUTE
+        GROUP_READ
+        WORLD_EXECUTE
+        WORLD_READ)
+  endif(UNIX)
+endmacro(CREATE_SH_EXE)
diff --git a/cmake/cxx-standard.cmake b/cmake/cxx-standard.cmake
index 6e12265..7b40b53 100644
--- a/cmake/cxx-standard.cmake
+++ b/cmake/cxx-standard.cmake
@@ -4,67 +4,86 @@
 # Author: Guilhem Saurel
 #
 
-#.rst:
-# .. ifmode:: internal
+# .rst: .. ifmode:: internal
 #
-#   .. variable:: ENFORCE_MINIMAL_CXX_STANDARD
+# .. variable:: ENFORCE_MINIMAL_CXX_STANDARD
 #
-#      When this is ON, every call to :cmake:command:`CHECK_MINIMAL_CXX_STANDARD` updates the :cmake:variable:`CMAKE_CXX_STANDARD`.
-option(ENFORCE_MINIMAL_CXX_STANDARD "Set CMAKE_CXX_STANDARD if a dependency require it" OFF)
+# When this is ON, every call to :cmake:command:`CHECK_MINIMAL_CXX_STANDARD`
+# updates the :cmake:variable:`CMAKE_CXX_STANDARD`.
+option(ENFORCE_MINIMAL_CXX_STANDARD
+       "Set CMAKE_CXX_STANDARD if a dependency require it" OFF)
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
-#   .. command:: CHECK_MINIMAL_CXX_STANDARD(STANDARD [ENFORCE])
+# .. command:: CHECK_MINIMAL_CXX_STANDARD(STANDARD [ENFORCE])
 #
-#      Ensure that a minimal C++ standard will be used.
+# Ensure that a minimal C++ standard will be used.
 #
-#      This will check the default standard of the current compiler,
-#      and set :cmake:variable:`CMAKE_CXX_STANDARD` if necessary, and `ENFORCE` is provided,
-#      or :cmake:variable:`ENFORCE_MINIMAL_CXX_STANDARD` is `ON`.
-#      Multiple calls to this macro will keep the highest standard.
+# This will check the default standard of the current compiler, and set
+# :cmake:variable:`CMAKE_CXX_STANDARD` if necessary, and `ENFORCE` is provided,
+# or :cmake:variable:`ENFORCE_MINIMAL_CXX_STANDARD` is `ON`. Multiple calls to
+# this macro will keep the highest standard.
 #
-#      Supported values are 98, 11, 14, 17, and 20.
+# Supported values are 98, 11, 14, 17, and 20.
 #
 macro(CHECK_MINIMAL_CXX_STANDARD STANDARD)
   set(options ENFORCE)
   set(oneValueArgs)
   set(multiValueArgs)
-  cmake_parse_arguments(MINIMAL_CXX_STANDARD "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
+  cmake_parse_arguments(MINIMAL_CXX_STANDARD "${options}" "${oneValueArgs}"
+                        "${multiValueArgs}" ${ARGN})
 
   # Get compiler default cxx standard, by printing "__cplusplus" (only once)
-  if(NOT DEFINED _COMPILER_DEFAULT_CXX_STANDARD AND (NOT CMAKE_CROSSCOMPILING OR (CMAKE_CROSSCOMPILING AND CMAKE_CROSSCOMPILING_EMULATOR)))
+  if(NOT DEFINED _COMPILER_DEFAULT_CXX_STANDARD
+     AND (NOT CMAKE_CROSSCOMPILING OR (CMAKE_CROSSCOMPILING
+                                       AND CMAKE_CROSSCOMPILING_EMULATOR)))
     if(MSVC)
-      # See https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
+      # See
+      # https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
       string(APPEND CMAKE_CXX_FLAGS " /Zc:__cplusplus")
     endif()
-    write_file(${CMAKE_CURRENT_BINARY_DIR}/cmake/tmp-cxx-standard.cpp "#include <iostream>\nint main(){std::cout << __cplusplus << std::endl;return 0;}")
-    try_run(_cxx_standard_run_status _cxx_standard_build_status
-      ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/cmake/tmp-cxx-standard.cpp
+    write_file(
+      ${CMAKE_CURRENT_BINARY_DIR}/cmake/tmp-cxx-standard.cpp
+      "#include <iostream>\nint main(){std::cout << __cplusplus << std::endl;return 0;}"
+    )
+    try_run(
+      _cxx_standard_run_status _cxx_standard_build_status
+      ${CMAKE_CURRENT_BINARY_DIR}
+      ${CMAKE_CURRENT_BINARY_DIR}/cmake/tmp-cxx-standard.cpp
       RUN_OUTPUT_VARIABLE _COMPILER_DEFAULT_CXX_STANDARD)
-    if(_cxx_standard_run_status EQUAL FAILED_TO_RUN OR _cxx_standard_build_status EQUAL FALSE)
-      message(WARNING "Impossible to build or run the script to retrive the _COMPILER_DEFAULT_CXX_STANDARD quantity from current compiler. Setting _COMPILER_DEFAULT_CXX_STANDARD to 199711")
+    if(_cxx_standard_run_status EQUAL FAILED_TO_RUN
+       OR _cxx_standard_build_status EQUAL FALSE)
+      message(
+        WARNING
+          "Impossible to build or run the script to retrive the _COMPILER_DEFAULT_CXX_STANDARD quantity from current compiler. Setting _COMPILER_DEFAULT_CXX_STANDARD to 199711"
+      )
       set(_COMPILER_DEFAULT_CXX_STANDARD "199711")
     endif()
-    string(STRIP "${_COMPILER_DEFAULT_CXX_STANDARD}" _COMPILER_DEFAULT_CXX_STANDARD)
+    string(STRIP "${_COMPILER_DEFAULT_CXX_STANDARD}"
+                 _COMPILER_DEFAULT_CXX_STANDARD)
     message(STATUS "Default C++ standard: ${_COMPILER_DEFAULT_CXX_STANDARD}")
   endif()
 
   # Check if we need to upgrade the current minimum
   if(NOT DEFINED _MINIMAL_CXX_STANDARD
-      OR (NOT ${STANDARD} EQUAL "98"
-        AND (_MINIMAL_CXX_STANDARD EQUAL "98" OR _MINIMAL_CXX_STANDARD LESS ${STANDARD})))
-    set(_MINIMAL_CXX_STANDARD "${STANDARD}" CACHE INTERNAL "")
+     OR (NOT ${STANDARD} EQUAL "98"
+         AND (_MINIMAL_CXX_STANDARD EQUAL "98" OR _MINIMAL_CXX_STANDARD LESS
+                                                  ${STANDARD})))
+    set(_MINIMAL_CXX_STANDARD
+        "${STANDARD}"
+        CACHE INTERNAL "")
     message(STATUS "Minimal C++ standard upgraded to ${_MINIMAL_CXX_STANDARD}")
   endif()
 
   # Check if a non-trivial minimum has been requested
   if(DEFINED _MINIMAL_CXX_STANDARD AND NOT _MINIMAL_CXX_STANDARD EQUAL 98)
 
-    if (DEFINED CMAKE_CXX_STANDARD)
+    if(DEFINED CMAKE_CXX_STANDARD)
       set(_CURRENT_STANDARD ${CMAKE_CXX_STANDARD})
     elseif(DEFINED _COMPILER_DEFAULT_CXX_STANDARD)
-      # ref https://en.cppreference.com/w/cpp/preprocessor/replace#Predefined_macros for constants
+      # ref
+      # https://en.cppreference.com/w/cpp/preprocessor/replace#Predefined_macros
+      # for constants
       if(_COMPILER_DEFAULT_CXX_STANDARD EQUAL 199711)
         set(_CURRENT_STANDARD 98)
       elseif(_COMPILER_DEFAULT_CXX_STANDARD EQUAL 201103)
@@ -73,35 +92,61 @@ macro(CHECK_MINIMAL_CXX_STANDARD STANDARD)
         set(_CURRENT_STANDARD 14)
       elseif(_COMPILER_DEFAULT_CXX_STANDARD EQUAL 201703)
         set(_CURRENT_STANDARD 17)
-      # C++20: g++-9 defines c++2a with literal 201709, g++-11 & clang-10 define c++2a with literal 202002
-      elseif(_COMPILER_DEFAULT_CXX_STANDARD EQUAL 201709 OR _COMPILER_DEFAULT_CXX_STANDARD EQUAL 202002)
+        # C++20: g++-9 defines c++2a with literal 201709, g++-11 & clang-10
+        # define c++2a with literal 202002
+      elseif(_COMPILER_DEFAULT_CXX_STANDARD EQUAL 201709
+             OR _COMPILER_DEFAULT_CXX_STANDARD EQUAL 202002)
         set(_CURRENT_STANDARD 20)
       else()
-        message(FATAL_ERROR "Unknown current C++ standard ${_COMPILER_DEFAULT_CXX_STANDARD} while trying to check for >= ${_MINIMAL_CXX_STANDARD}")
+        message(
+          FATAL_ERROR
+            "Unknown current C++ standard ${_COMPILER_DEFAULT_CXX_STANDARD} while trying to check for >= ${_MINIMAL_CXX_STANDARD}"
+        )
       endif()
     else()
       set(_CURRENT_STANDARD 98)
     endif()
 
     # Check that the requested minimum is higher than the currently selected
-    if(_CURRENT_STANDARD EQUAL 98 OR _CURRENT_STANDARD LESS _MINIMAL_CXX_STANDARD)
-      message(STATUS "Incompatible C++ standard detected: upgrade required from ${_CURRENT_STANDARD} to >= ${_MINIMAL_CXX_STANDARD}")
-      # Check that the requested minimum is higher than any pre-existing CMAKE_CXX_STANDARD
-      if(NOT CMAKE_CXX_STANDARD OR CMAKE_CXX_STANDARD EQUAL 98 OR CMAKE_CXX_STANDARD LESS _MINIMAL_CXX_STANDARD)
-        # Throw error if a specific version is required and the currently desired one is incompatible
+    if(_CURRENT_STANDARD EQUAL 98 OR _CURRENT_STANDARD LESS
+                                     _MINIMAL_CXX_STANDARD)
+      message(
+        STATUS
+          "Incompatible C++ standard detected: upgrade required from ${_CURRENT_STANDARD} to >= ${_MINIMAL_CXX_STANDARD}"
+      )
+      # Check that the requested minimum is higher than any pre-existing
+      # CMAKE_CXX_STANDARD
+      if(NOT CMAKE_CXX_STANDARD
+         OR CMAKE_CXX_STANDARD EQUAL 98
+         OR CMAKE_CXX_STANDARD LESS _MINIMAL_CXX_STANDARD)
+        # Throw error if a specific version is required and the currently
+        # desired one is incompatible
         if(CMAKE_CXX_STANDARD_REQUIRED)
-          message(FATAL_ERROR "CMAKE_CXX_STANDARD_REQUIRED set - cannot upgrade incompatible standard")
+          message(
+            FATAL_ERROR
+              "CMAKE_CXX_STANDARD_REQUIRED set - cannot upgrade incompatible standard"
+          )
         endif()
-        # Enforcing a standard version is required - check if we can upgrade automatically
+        # Enforcing a standard version is required - check if we can upgrade
+        # automatically
         if(ENFORCE_MINIMAL_CXX_STANDARD OR MINIMAL_CXX_STANDARD_ENFORCE)
           set(CMAKE_CXX_STANDARD ${_MINIMAL_CXX_STANDARD})
-          message(AUTHOR_WARNING "CMAKE_CXX_STANDARD automatically upgraded from ${_CURRENT_STANDARD} to ${CMAKE_CXX_STANDARD}")
+          message(
+            AUTHOR_WARNING
+              "CMAKE_CXX_STANDARD automatically upgraded from ${_CURRENT_STANDARD} to ${CMAKE_CXX_STANDARD}"
+          )
         else()
-          message(FATAL_ERROR "CMAKE_CXX_STANDARD upgrade from ${_CURRENT_STANDARD} to >= ${_MINIMAL_CXX_STANDARD} required")
+          message(
+            FATAL_ERROR
+              "CMAKE_CXX_STANDARD upgrade from ${_CURRENT_STANDARD} to >= ${_MINIMAL_CXX_STANDARD} required"
+          )
         endif()
       endif()
-    else()  # requested minimum is higher than the currently selected
-      message(STATUS "C++ standard sufficient: Minimal required ${_MINIMAL_CXX_STANDARD}, currently defined: ${_CURRENT_STANDARD}")
-    endif()  # requested minimum is higher than the currently selected
+    else() # requested minimum is higher than the currently selected
+      message(
+        STATUS
+          "C++ standard sufficient: Minimal required ${_MINIMAL_CXX_STANDARD}, currently defined: ${_CURRENT_STANDARD}"
+      )
+    endif() # requested minimum is higher than the currently selected
   endif()
 endmacro()
diff --git a/cmake/cxx11.cmake b/cmake/cxx11.cmake
index 9dee994..8c6779a 100644
--- a/cmake/cxx11.cmake
+++ b/cmake/cxx11.cmake
@@ -1,62 +1,64 @@
 # Copyright (C) 2018-2019 LAAS-CNRS, JRL AIST-CNRS, INRIA
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 include(CheckCXXCompilerFlag)
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
 # .. command:: CHECK_CXX11_SUPPORT
 #
-#    Set ouput variable CXX11_SUPPORTED to TRUE if C++11 is supported
-#    by the current compiler. Set to FALSE otherwise.
+# Set ouput variable CXX11_SUPPORTED to TRUE if C++11 is supported by the
+# current compiler. Set to FALSE otherwise.
 #
-FUNCTION(CHECK_CXX11_SUPPORT CXX11_SUPPORTED)
-  CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
-  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
+function(CHECK_CXX11_SUPPORT CXX11_SUPPORTED)
+  check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
+  check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
 
-  IF(COMPILER_SUPPORTS_CXX0X OR COMPILER_SUPPORTS_CXX11)
-    SET(${CXX11_SUPPORTED} TRUE PARENT_SCOPE)
-  ELSE()
-    SET(${CXX11_SUPPORTED} FALSE PARENT_SCOPE)
-  ENDIF()
-ENDFUNCTION(CHECK_CXX11_SUPPORT)
+  if(COMPILER_SUPPORTS_CXX0X OR COMPILER_SUPPORTS_CXX11)
+    set(${CXX11_SUPPORTED}
+        TRUE
+        PARENT_SCOPE)
+  else()
+    set(${CXX11_SUPPORTED}
+        FALSE
+        PARENT_SCOPE)
+  endif()
+endfunction(CHECK_CXX11_SUPPORT)
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
 # .. command:: PROJECT_USE_CXX11
 #
-#    This macro set up the project to compile the whole project 
-#    with C++11 standards.  
-#
-MACRO(PROJECT_USE_CXX11)
-  CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
-  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
-  IF(COMPILER_SUPPORTS_CXX0X OR COMPILER_SUPPORTS_CXX11)
-    IF(CMAKE_VERSION VERSION_LESS "3.1")
-      IF(COMPILER_SUPPORTS_CXX0X)
-        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
-      ELSEIF(COMPILER_SUPPORTS_CXX11)  
-        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-      ENDIF()
-    ELSE()
-      SET(CMAKE_CXX_STANDARD 11)
-      SET(CXX_STANDARD_REQUIRED ON)
-    ENDIF()
-  ELSE()
-    MESSAGE(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
-  ENDIF()
-ENDMACRO(PROJECT_USE_CXX11)
+# This macro set up the project to compile the whole project with C++11
+# standards.
+#
+macro(PROJECT_USE_CXX11)
+  check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
+  check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
+  if(COMPILER_SUPPORTS_CXX0X OR COMPILER_SUPPORTS_CXX11)
+    if(CMAKE_VERSION VERSION_LESS "3.1")
+      if(COMPILER_SUPPORTS_CXX0X)
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
+      elseif(COMPILER_SUPPORTS_CXX11)
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+      endif()
+    else()
+      set(CMAKE_CXX_STANDARD 11)
+      set(CXX_STANDARD_REQUIRED ON)
+    endif()
+  else()
+    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
+  endif()
+endmacro(PROJECT_USE_CXX11)
diff --git a/cmake/cython/cython.cmake b/cmake/cython/cython.cmake
index 0b1a7b1..c0122f7 100644
--- a/cmake/cython/cython.cmake
+++ b/cmake/cython/cython.cmake
@@ -1,17 +1,17 @@
 # Copyright (C) 2019 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 option(PYTHON_BINDING "Generate Python binding" ON)
 if(WIN32)
@@ -19,14 +19,17 @@ if(WIN32)
 else()
   set(PYTHON_BINDING_USER_INSTALL_DEFAULT OFF)
 endif()
-option(PYTHON_BINDING_USER_INSTALL "Install the Python binding in user space" ${PYTHON_BINDING_USER_INSTALL_DEFAULT})
+option(PYTHON_BINDING_USER_INSTALL "Install the Python binding in user space"
+       ${PYTHON_BINDING_USER_INSTALL_DEFAULT})
 option(PYTHON_BINDING_FORCE_PYTHON2 "Use python2 instead of python" OFF)
 option(PYTHON_BINDING_FORCE_PYTHON3 "Use python3 instead of python" OFF)
 set(PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3_DEFAULT OFF)
 if(DEFINED PYTHON_DEB_ROOT)
   set(PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3_DEFAULT ON)
 endif()
-option(PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3 "Build Python 2 and Python 3 bindings" ${PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3_DEFAULT})
+option(PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3
+       "Build Python 2 and Python 3 bindings"
+       ${PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3_DEFAULT})
 if(${PYTHON_BINDING_FORCE_PYTHON2} AND ${PYTHON_BINDING_FORCE_PYTHON3})
   message(FATAL_ERROR "Cannot enforce Python 2 and Python 3 at the same time")
 endif()
@@ -34,12 +37,15 @@ set(CYTHON_SETUP_IN_PY_LOCATION "${CMAKE_CURRENT_LIST_DIR}/setup.in.py")
 set(CYTHON_DUMMY_CPP_LOCATION "${CMAKE_CURRENT_LIST_DIR}/dummy.cpp")
 set(PYTHON_EXTRA_CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/python")
 
-# This macro adds a dummy shared library target to extract compilation flags from an interface library
+# This macro adds a dummy shared library target to extract compilation flags
+# from an interface library
 macro(_CYTHON_DUMMY_TARGET TARGET)
   if(NOT TARGET _cython_dummy_${TARGET})
-    add_library(_cython_dummy_${TARGET} SHARED EXCLUDE_FROM_ALL "${CYTHON_DUMMY_CPP_LOCATION}")
+    add_library(_cython_dummy_${TARGET} SHARED EXCLUDE_FROM_ALL
+                "${CYTHON_DUMMY_CPP_LOCATION}")
     target_link_libraries(_cython_dummy_${TARGET} PUBLIC ${TARGET})
-    set_target_properties(_cython_dummy_${TARGET} PROPERTIES FOLDER "bindings/details")
+    set_target_properties(_cython_dummy_${TARGET} PROPERTIES FOLDER
+                                                             "bindings/details")
   endif()
 endmacro()
 
@@ -65,9 +71,10 @@ endmacro()
 
 # Check if pip install supports --system
 macro(_pip_has_install_system PYTHON OUT)
-  execute_process(COMMAND ${PYTHON} -m pip install --system
-                  RESULT_VARIABLE ${OUT}
-                  OUTPUT_QUIET ERROR_QUIET)
+  execute_process(
+    COMMAND ${PYTHON} -m pip install --system
+    RESULT_VARIABLE ${OUT}
+    OUTPUT_QUIET ERROR_QUIET)
   if(${${OUT}} EQUAL 0)
     set(${OUT} True)
   else()
@@ -75,45 +82,64 @@ macro(_pip_has_install_system PYTHON OUT)
   endif()
 endmacro()
 
-# Copy bindings source to build directories and create appropriate target for building, installing and testing
-macro(_ADD_CYTHON_BINDINGS_TARGETS PYTHON PACKAGE SOURCES GENERATE_SOURCES TARGETS WITH_TESTS)
-  set(SETUP_LOCATION "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/${PYTHON}/$<CONFIGURATION>")
-  set(${PACKAGE}_${PYTHON}_SETUP_LOCATION "${SETUP_LOCATION}" CACHE INTERNAL "")
+# Copy bindings source to build directories and create appropriate target for
+# building, installing and testing
+macro(
+  _ADD_CYTHON_BINDINGS_TARGETS
+  PYTHON
+  PACKAGE
+  SOURCES
+  GENERATE_SOURCES
+  TARGETS
+  WITH_TESTS)
+  set(SETUP_LOCATION
+      "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/${PYTHON}/$<CONFIGURATION>")
+  set(${PACKAGE}_${PYTHON}_SETUP_LOCATION
+      "${SETUP_LOCATION}"
+      CACHE INTERNAL "")
   if(TARGET cython_${PYTHON}_${PACKAGE})
-    target_include_directories(cython_${PYTHON}_${PACKAGE} INTERFACE "${SETUP_LOCATION}")
+    target_include_directories(cython_${PYTHON}_${PACKAGE}
+                               INTERFACE "${SETUP_LOCATION}")
   endif()
   if(DEFINED CMAKE_BUILD_TYPE)
-    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/${PYTHON}/${CMAKE_BUILD_TYPE}")
+    file(MAKE_DIRECTORY
+         "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/${PYTHON}/${CMAKE_BUILD_TYPE}")
   else()
     foreach(CFG ${CMAKE_CONFIGURATION_TYPES})
-      file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/${PYTHON}/${CFG}")
+      file(MAKE_DIRECTORY
+           "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/${PYTHON}/${CFG}")
     endforeach()
   endif()
-  file(GENERATE
-       OUTPUT "${SETUP_LOCATION}/setup.py"
-       INPUT "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/setup.in.py"
-  )
+  file(
+    GENERATE
+    OUTPUT "${SETUP_LOCATION}/setup.py"
+    INPUT "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/setup.in.py")
   # Target to build the bindings
   set(TARGET_NAME ${PACKAGE}-${PYTHON}-bindings)
-  add_custom_target(${TARGET_NAME} ALL
-    COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} setup.py build_ext --inplace
+  add_custom_target(
+    ${TARGET_NAME} ALL
+    COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} setup.py
+            build_ext --inplace
     COMMENT "Generating local ${PACKAGE} ${PYTHON} bindings"
-    DEPENDS ${SOURCES} ${GENERATE_SOURCES} SOURCES ${SOURCES} ${GENERATE_SOURCES}
-  )
+    DEPENDS ${SOURCES} ${GENERATE_SOURCES}
+    SOURCES ${SOURCES} ${GENERATE_SOURCES})
   set_target_properties(${TARGET_NAME} PROPERTIES FOLDER "bindings")
   add_dependencies(${TARGET_NAME} ${TARGETS})
   # Copy sources
   foreach(F ${GENERATE_SOURCES})
-    file(GENERATE
-         OUTPUT "${SETUP_LOCATION}/${F}"
-         INPUT "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/configured/${F}"
-    )
+    file(
+      GENERATE
+      OUTPUT "${SETUP_LOCATION}/${F}"
+      INPUT "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/configured/${F}")
   endforeach()
   set(I 0)
   foreach(SRC ${SOURCES})
     if(IS_ABSOLUTE ${SRC})
       if(NOT ${SRC} MATCHES "^${CMAKE_CURRENT_BINARY_DIR}")
-        MESSAGE(FATAL_ERROR "Source provided to ADD_CYTHON_BINDINGS must have a relative path or an absolute path in CMAKE_CURRENT_BINARY_DIR (${CMAKE_CURRENT_BINARY_DIR})")
+        message(
+          FATAL_ERROR
+            "Source provided to ADD_CYTHON_BINDINGS must have a relative path or an absolute path in CMAKE_CURRENT_BINARY_DIR (${CMAKE_CURRENT_BINARY_DIR})"
+        )
       endif()
       file(RELATIVE_PATH REL_SRC "${CMAKE_CURRENT_BINARY_DIR}" "${SRC}")
       set(FILE_IN "${SRC}")
@@ -122,19 +148,21 @@ macro(_ADD_CYTHON_BINDINGS_TARGETS PYTHON PACKAGE SOURCES GENERATE_SOURCES TARGE
       set(FILE_IN "${CMAKE_CURRENT_SOURCE_DIR}/${SRC}")
       set(FILE_OUT "${SETUP_LOCATION}/${SRC}")
     endif()
-    add_custom_target(copy-sources-${I}-${TARGET_NAME}
+    add_custom_target(
+      copy-sources-${I}-${TARGET_NAME}
       COMMAND ${CMAKE_COMMAND} -E copy_if_different ${FILE_IN} ${FILE_OUT}
-      DEPENDS ${FILE_IN}
-    )
-    set_target_properties(copy-sources-${I}-${TARGET_NAME} PROPERTIES FOLDER "bindings/details")
+      DEPENDS ${FILE_IN})
+    set_target_properties(copy-sources-${I}-${TARGET_NAME}
+                          PROPERTIES FOLDER "bindings/details")
     add_dependencies(${TARGET_NAME} copy-sources-${I}-${TARGET_NAME})
     math(EXPR I "${I} + 1")
   endforeach()
   # Manual target to force regeneration
-  add_custom_target(force-${TARGET_NAME}
-    COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} setup.py build_ext --inplace --force
-    COMMENT "Generating local ${PACKAGE} ${PYTHON} bindings (forced)"
-  )
+  add_custom_target(
+    force-${TARGET_NAME}
+    COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} setup.py
+            build_ext --inplace --force
+    COMMENT "Generating local ${PACKAGE} ${PYTHON} bindings (forced)")
   set_target_properties(force-${TARGET_NAME} PROPERTIES FOLDER "bindings")
   # Tests
   if(${WITH_TESTS} AND ${BUILD_TESTING})
@@ -149,21 +177,27 @@ macro(_ADD_CYTHON_BINDINGS_TARGETS PYTHON PACKAGE SOURCES GENERATE_SOURCES TARGE
     foreach(TGT ${TARGETS})
       _is_interface_library(${TGT} IS_INTERFACE)
       if(NOT ${IS_INTERFACE})
-        set(EXTRA_LD_PATH "$<TARGET_FILE_DIR:${TGT}>${PATH_SEP}${EXTRA_LD_PATH}")
+        set(EXTRA_LD_PATH
+            "$<TARGET_FILE_DIR:${TGT}>${PATH_SEP}${EXTRA_LD_PATH}")
       endif()
     endforeach()
     if(${WITH_TESTS})
-      add_test(NAME test-${TARGET_NAME}
-        COMMAND ${CMAKE_COMMAND} -E env "${ENV_VAR}=${EXTRA_LD_PATH}$ENV{${ENV_VAR}}" ${CMAKE_COMMAND} -E env "PYTHONPATH=.${PATH_SEP}$ENV{PYTHONPATH}" ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} -c "import nose, sys; sys.exit(not nose.run())"
-      )
+      add_test(
+        NAME test-${TARGET_NAME}
+        COMMAND
+          ${CMAKE_COMMAND} -E env "${ENV_VAR}=${EXTRA_LD_PATH}$ENV{${ENV_VAR}}"
+          ${CMAKE_COMMAND} -E env "PYTHONPATH=.${PATH_SEP}$ENV{PYTHONPATH}"
+          ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} -c
+          "import nose, sys; sys.exit(not nose.run())")
     endif()
   endif()
   # Install targets
   if(DEFINED PYTHON_DEB_ROOT)
-    add_custom_target(install-${TARGET_NAME}
-      COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} setup.py install --root=${PYTHON_DEB_ROOT} --install-layout=deb
-      COMMENT "Install ${PACKAGE} ${PYTHON} bindings (Debian layout)"
-    )
+    add_custom_target(
+      install-${TARGET_NAME}
+      COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} setup.py
+              install --root=${PYTHON_DEB_ROOT} --install-layout=deb
+      COMMENT "Install ${PACKAGE} ${PYTHON} bindings (Debian layout)")
   else()
     set(PIP_EXTRA_OPTIONS "")
     if(${PYTHON_BINDING_USER_INSTALL})
@@ -171,59 +205,76 @@ macro(_ADD_CYTHON_BINDINGS_TARGETS PYTHON PACKAGE SOURCES GENERATE_SOURCES TARGE
     endif()
     if(DEFINED PIP_INSTALL_PREFIX)
       _pip_has_install_system(${PYTHON} PIP_HAS_INSTALL_SYSTEM)
-      execute_process(COMMAND ${PYTHON} -c "import sys; print(\"python{}.{}\".format(sys.version_info.major, sys.version_info.minor));" OUTPUT_VARIABLE PYTHON_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
-      set(PIP_TARGET "${PIP_INSTALL_PREFIX}/lib/${PYTHON_VERSION}/site-packages/")
+      execute_process(
+        COMMAND
+          ${PYTHON} -c
+          "import sys; print(\"python{}.{}\".format(sys.version_info.major, sys.version_info.minor));"
+        OUTPUT_VARIABLE PYTHON_VERSION
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+      set(PIP_TARGET
+          "${PIP_INSTALL_PREFIX}/lib/${PYTHON_VERSION}/site-packages/")
       set(PIP_EXTRA_OPTIONS --target "${PIP_TARGET}")
       if(${PIP_HAS_INSTALL_SYSTEM})
         set(PIP_EXTRA_OPTIONS --system ${PIP_EXTRA_OPTIONS})
       endif()
     endif()
-    add_custom_target(install-${TARGET_NAME}
-      COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} -m pip install . ${PIP_EXTRA_OPTIONS} --upgrade
-      COMMENT "Install ${PACKAGE} ${PYTHON} bindings"
-    )
+    add_custom_target(
+      install-${TARGET_NAME}
+      COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} -m pip
+              install . ${PIP_EXTRA_OPTIONS} --upgrade
+      COMMENT "Install ${PACKAGE} ${PYTHON} bindings")
     set_target_properties(install-${TARGET_NAME} PROPERTIES FOLDER "bindings")
-    add_custom_target(uninstall-${TARGET_NAME}
-      COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} -m pip uninstall -y ${PACKAGE}
-      COMMENT "Removing ${PACKAGE} ${PYTHON} bindings"
-    )
+    add_custom_target(
+      uninstall-${TARGET_NAME}
+      COMMAND ${CMAKE_COMMAND} -E chdir "${SETUP_LOCATION}" ${PYTHON} -m pip
+              uninstall -y ${PACKAGE}
+      COMMENT "Removing ${PACKAGE} ${PYTHON} bindings")
     set_target_properties(uninstall-${TARGET_NAME} PROPERTIES FOLDER "bindings")
     add_dependencies(uninstall uninstall-${TARGET_NAME})
   endif()
-  install(CODE "EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build \"${CMAKE_BINARY_DIR}\" --config \${CMAKE_INSTALL_CONFIG_NAME} --target install-${TARGET_NAME})")
+  install(
+    CODE "EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build \"${CMAKE_BINARY_DIR}\" --config \${CMAKE_INSTALL_CONFIG_NAME} --target install-${TARGET_NAME})"
+  )
 endmacro()
 
-#.rst:
-# .. command:: ADD_CYTHON_BINDINGS(PACKAGE TARGETS targets... [VERSION version] [MODULES modules...] [EXPORT_SOURCES sources...] [PRIVATE_SOURCES ...] [GENERATE_SOURCES ...])
+# .rst: .. command:: ADD_CYTHON_BINDINGS(PACKAGE TARGETS targets... [VERSION
+# version] [MODULES modules...] [EXPORT_SOURCES sources...] [PRIVATE_SOURCES
+# ...] [GENERATE_SOURCES ...])
 #
-#   This macro add cython bindings using one or more libraries built by the project.
+# This macro add cython bindings using one or more libraries built by the
+# project.
 #
-#   :PACKAGE:          Name of the Python package
+# :PACKAGE:          Name of the Python package
 #
-#   :TARGETS:          Name of the targets that the bindings should link to
+# :TARGETS:          Name of the targets that the bindings should link to
 #
-#   :VERSION:          Version of the bindings, defaults to ``PROJECT_VERSION``
+# :VERSION:          Version of the bindings, defaults to ``PROJECT_VERSION``
 #
-#   :MODULES:          Python modules built by this macro call. Defaults to ``PACKAGE.PACKAGE``
+# :MODULES:          Python modules built by this macro call. Defaults to
+# ``PACKAGE.PACKAGE``
 #
-#   :EXPORT_SOURCES:   Sources that will be installed along with the package (typically, public pxd files and __init__.py)
+# :EXPORT_SOURCES:   Sources that will be installed along with the package
+# (typically, public pxd files and __init__.py)
 #
-#   :PRIVATE_SOURCES:  Sources that are needed to built the package but will not be installed
+# :PRIVATE_SOURCES:  Sources that are needed to built the package but will not
+# be installed
 #
-#   :GENERATE_SOURCES: Sources that will be configured and then generated in the correct location,
-#                      the generated files are then considered as PRIVATE_SOURCES
+# :GENERATE_SOURCES: Sources that will be configured and then generated in the
+# correct location, the generated files are then considered as PRIVATE_SOURCES
 #
-#   The macro will generate a setup.py script in
-#   ``$CMAKE_CURRENT_BINARY_DIR/$PACKAGE/$PYTHON/$<CONFIGURATION>`` and copy the
-#   provided sources in this location. Relative paths are preferred to provide
-#   sources but one can use absolute paths if and only if the absolute path
-#   starts with ``$CMAKE_CURRENT_BINARY_DIR``
+# The macro will generate a setup.py script in
+# ``$CMAKE_CURRENT_BINARY_DIR/$PACKAGE/$PYTHON/$<CONFIGURATION>`` and copy the
+# provided sources in this location. Relative paths are preferred to provide
+# sources but one can use absolute paths if and only if the absolute path starts
+# with ``$CMAKE_CURRENT_BINARY_DIR``
 #
 macro(ADD_CYTHON_BINDINGS PACKAGE)
   set(options)
   set(oneValueArgs VERSION)
-  set(multiValueArgs MODULES TARGETS EXPORT_SOURCES PRIVATE_SOURCES GENERATE_SOURCES)
-  cmake_parse_arguments(CYTHON_BINDINGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )
+  set(multiValueArgs MODULES TARGETS EXPORT_SOURCES PRIVATE_SOURCES
+                     GENERATE_SOURCES)
+  cmake_parse_arguments(CYTHON_BINDINGS "${options}" "${oneValueArgs}"
+                        "${multiValueArgs}" ${ARGN})
   if(NOT DEFINED CYTHON_BINDINGS_VERSION)
     set(CYTHON_BINDINGS_VERSION ${PROJECT_VERSION})
   endif()
@@ -240,7 +291,10 @@ macro(ADD_CYTHON_BINDINGS PACKAGE)
     set(CYTHON_BINDINGS_MODULES "${PACKAGE}.${PACKAGE}")
   endif()
   if(NOT DEFINED CYTHON_BINDINGS_TARGETS)
-    message(FATAL_ERROR "Error in ADD_CYTHON_BINDINGS, bindings should depend on at least one target")
+    message(
+      FATAL_ERROR
+        "Error in ADD_CYTHON_BINDINGS, bindings should depend on at least one target"
+    )
   endif()
   # Setup the basic setup script
   set(CYTHON_BINDINGS_SOURCES)
@@ -263,45 +317,78 @@ macro(ADD_CYTHON_BINDINGS PACKAGE)
   foreach(TGT ${CYTHON_BINDINGS_TARGETS})
     _is_interface_library(${TGT} IS_INTERFACE)
     if(${IS_INTERFACE})
-      _CYTHON_DUMMY_TARGET(${TGT})
-      list(APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS "$<TARGET_PROPERTY:_cython_dummy_${TGT},COMPILE_DEFINITIONS>")
-      list(APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS "$<TARGET_PROPERTY:_cython_dummy_${TGT},INTERFACE_COMPILE_DEFINITIONS>")
-      list(APPEND CYTHON_BINDINGS_CXX_STANDARD "$<TARGET_PROPERTY:_cython_dummy_${TGT},CXX_STANDARD>")
-      list(APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES "$<TARGET_PROPERTY:_cython_dummy_${TGT},INCLUDE_DIRECTORIES>")
-      list(APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES "$<TARGET_PROPERTY:_cython_dummy_${TGT},INTERFACE_INCLUDE_DIRECTORIES>")
-      list(APPEND CYTHON_BINDINGS_LINK_FLAGS "$<TARGET_PROPERTY:_cython_dummy_${TGT},LINK_FLAGS>")
+      _cython_dummy_target(${TGT})
+      list(APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS
+           "$<TARGET_PROPERTY:_cython_dummy_${TGT},COMPILE_DEFINITIONS>")
+      list(
+        APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS
+        "$<TARGET_PROPERTY:_cython_dummy_${TGT},INTERFACE_COMPILE_DEFINITIONS>")
+      list(APPEND CYTHON_BINDINGS_CXX_STANDARD
+           "$<TARGET_PROPERTY:_cython_dummy_${TGT},CXX_STANDARD>")
+      list(APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES
+           "$<TARGET_PROPERTY:_cython_dummy_${TGT},INCLUDE_DIRECTORIES>")
+      list(
+        APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES
+        "$<TARGET_PROPERTY:_cython_dummy_${TGT},INTERFACE_INCLUDE_DIRECTORIES>")
+      list(APPEND CYTHON_BINDINGS_LINK_FLAGS
+           "$<TARGET_PROPERTY:_cython_dummy_${TGT},LINK_FLAGS>")
     else()
       _is_static_library(${TGT} IS_STATIC)
-      list(APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS "$<TARGET_PROPERTY:${TGT},COMPILE_DEFINITIONS>")
-      list(APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS "$<TARGET_PROPERTY:${TGT},INTERFACE_COMPILE_DEFINITIONS>")
-      list(APPEND CYTHON_BINDINGS_CXX_STANDARD "$<TARGET_PROPERTY:${TGT},CXX_STANDARD>")
-      list(APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES "$<TARGET_PROPERTY:${TGT},INCLUDE_DIRECTORIES>")
-      list(APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES "$<TARGET_PROPERTY:${TGT},INTERFACE_INCLUDE_DIRECTORIES>")
-      list(APPEND CYTHON_BINDINGS_LINK_FLAGS "$<TARGET_PROPERTY:${TGT},LINK_FLAGS>")
+      list(APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS
+           "$<TARGET_PROPERTY:${TGT},COMPILE_DEFINITIONS>")
+      list(APPEND CYTHON_BINDINGS_COMPILE_DEFINITIONS
+           "$<TARGET_PROPERTY:${TGT},INTERFACE_COMPILE_DEFINITIONS>")
+      list(APPEND CYTHON_BINDINGS_CXX_STANDARD
+           "$<TARGET_PROPERTY:${TGT},CXX_STANDARD>")
+      list(APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES
+           "$<TARGET_PROPERTY:${TGT},INCLUDE_DIRECTORIES>")
+      list(APPEND CYTHON_BINDINGS_INCLUDE_DIRECTORIES
+           "$<TARGET_PROPERTY:${TGT},INTERFACE_INCLUDE_DIRECTORIES>")
+      list(APPEND CYTHON_BINDINGS_LINK_FLAGS
+           "$<TARGET_PROPERTY:${TGT},LINK_FLAGS>")
       list(APPEND CYTHON_BINDINGS_LIBRARIES "$<TARGET_LINKER_FILE:${TGT}>")
       list(APPEND CYTHON_BINDINGS_TARGET_FILES "$<TARGET_LINKER_FILE:${TGT}>")
       if(${IS_STATIC})
-        list(APPEND CYTHON_BINDINGS_STATIC_LIBRARIES "$<TARGET_LINKER_FILE:${TGT}>")
+        list(APPEND CYTHON_BINDINGS_STATIC_LIBRARIES
+             "$<TARGET_LINKER_FILE:${TGT}>")
       endif()
     endif()
   endforeach()
-  configure_file("${CYTHON_SETUP_IN_PY_LOCATION}" "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/setup.in.py")
+  configure_file("${CYTHON_SETUP_IN_PY_LOCATION}"
+                 "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/setup.in.py")
   foreach(F ${CYTHON_BINDINGS_GENERATE_SOURCES})
-    configure_file(${F} "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/configured/${F}")
+    configure_file(${F}
+                   "${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE}/configured/${F}")
   endforeach()
   if(${PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3})
-    _ADD_CYTHON_BINDINGS_TARGETS("python2" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}" "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}" ${WITH_TESTS})
-    _ADD_CYTHON_BINDINGS_TARGETS("python3" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}" "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}" ${WITH_TESTS})
+    _add_cython_bindings_targets(
+      "python2" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}"
+      "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}"
+      ${WITH_TESTS})
+    _add_cython_bindings_targets(
+      "python3" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}"
+      "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}"
+      ${WITH_TESTS})
   elseif(${PYTHON_BINDING_FORCE_PYTHON3})
-    _ADD_CYTHON_BINDINGS_TARGETS("python3" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}" "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}" ${WITH_TESTS})
+    _add_cython_bindings_targets(
+      "python3" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}"
+      "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}"
+      ${WITH_TESTS})
   elseif(${PYTHON_BINDING_FORCE_PYTHON2})
-    _ADD_CYTHON_BINDINGS_TARGETS("python2" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}" "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}" ${WITH_TESTS})
+    _add_cython_bindings_targets(
+      "python2" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}"
+      "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}"
+      ${WITH_TESTS})
   else()
-    _ADD_CYTHON_BINDINGS_TARGETS("python" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}" "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}" ${WITH_TESTS})
+    _add_cython_bindings_targets(
+      "python" ${PACKAGE} "${CYTHON_BINDINGS_SOURCES}"
+      "${CYTHON_BINDINGS_GENERATE_SOURCES}" "${CYTHON_BINDINGS_TARGETS}"
+      ${WITH_TESTS})
   endif()
 endmacro()
 
-# In this macro PYTHON is the module we should search and PYTHON_B is the name for the bindings
+# In this macro PYTHON is the module we should search and PYTHON_B is the name
+# for the bindings
 macro(_MAKE_CYTHON_LIBRARY PACKAGE PYTHON PYTHON_B OUT)
   set(SETUP_LOCATION_VAR ${PACKAGE}_${PYTHON_B}_SETUP_LOCATION)
   set(TGT_NAME cython_${PYTHON_B}_${PACKAGE})
@@ -309,12 +396,19 @@ macro(_MAKE_CYTHON_LIBRARY PACKAGE PYTHON PYTHON_B OUT)
   if(NOT TARGET ${TGT_NAME})
     set(${PYTHON}_FIND_VERSION_COUNT 3)
     set(${PYTHON}_FIND_VERSION_EXACT TRUE)
-    execute_process(COMMAND ${PYTHON_B} -c "import sys; print(sys.version_info.major);" OUTPUT_VARIABLE ${PYTHON}_FIND_VERSION_MAJOR OUTPUT_STRIP_TRAILING_WHITESPACE)
-    execute_process(COMMAND ${PYTHON_B} -c "import sys; print(sys.version_info.minor);" OUTPUT_VARIABLE ${PYTHON}_FIND_VERSION_MINOR OUTPUT_STRIP_TRAILING_WHITESPACE)
+    execute_process(
+      COMMAND ${PYTHON_B} -c "import sys; print(sys.version_info.major);"
+      OUTPUT_VARIABLE ${PYTHON}_FIND_VERSION_MAJOR
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+    execute_process(
+      COMMAND ${PYTHON_B} -c "import sys; print(sys.version_info.minor);"
+      OUTPUT_VARIABLE ${PYTHON}_FIND_VERSION_MINOR
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
     find_package(${PYTHON} REQUIRED COMPONENTS Interpreter Development)
     add_library(${TGT_NAME} INTERFACE)
     target_link_libraries(${TGT_NAME} INTERFACE ${${PYTHON}_LIBRARIES})
-    target_include_directories(${TGT_NAME} INTERFACE "${${PYTHON}_INCLUDE_DIRS}")
+    target_include_directories(${TGT_NAME}
+                               INTERFACE "${${PYTHON}_INCLUDE_DIRS}")
     if(DEFINED ${SETUP_LOCATION_VAR})
       set(SETUP_LOCATION "${${SETUP_LOCATION_VAR}}")
       target_include_directories(${TGT_NAME} INTERFACE "${SETUP_LOCATION}")
@@ -324,18 +418,17 @@ macro(_MAKE_CYTHON_LIBRARY PACKAGE PYTHON PYTHON_B OUT)
 endmacro()
 
 macro(_APPEND_CYTHON_LIBRARY PACKAGE PYTHON PYTHON_B OUT)
-  _MAKE_CYTHON_LIBRARY(${PACKAGE} ${PYTHON} ${PYTHON_B} LIB)
+  _make_cython_library(${PACKAGE} ${PYTHON} ${PYTHON_B} LIB)
   list(APPEND ${OUT} ${LIB})
 endmacro()
 
-#.rst:
-# .. command:: GET_CYTHON_LIBRARIES(PACKAGE VAR)
+# .rst: .. command:: GET_CYTHON_LIBRARIES(PACKAGE VAR)
 #
-#   This macro search Python versions according to the specified bindings
-#   settings then returns appropriate targets in the provided VAR variable
+# This macro search Python versions according to the specified bindings settings
+# then returns appropriate targets in the provided VAR variable
 #
-#   It creates interface targets that include the generated bindings directory
-#   and link to the correct Python version
+# It creates interface targets that include the generated bindings directory and
+# link to the correct Python version
 #
 macro(GET_CYTHON_LIBRARIES PACKAGE VAR)
   # FindPython(2|3).cmake only exists from CMake 3.12
@@ -344,26 +437,32 @@ macro(GET_CYTHON_LIBRARIES PACKAGE VAR)
   endif()
   set(${VAR})
   if(${PYTHON_BINDING_BUILD_PYTHON2_AND_PYTHON3})
-    _APPEND_CYTHON_LIBRARY(${PACKAGE} Python2 python2 ${VAR})
-    _APPEND_CYTHON_LIBRARY(${PACKAGE} Python3 python3 ${VAR})
+    _append_cython_library(${PACKAGE} Python2 python2 ${VAR})
+    _append_cython_library(${PACKAGE} Python3 python3 ${VAR})
   elseif(${PYTHON_BINDING_FORCE_PYTHON2})
-    _APPEND_CYTHON_LIBRARY(${PACKAGE} Python2 python2 ${VAR})
+    _append_cython_library(${PACKAGE} Python2 python2 ${VAR})
   elseif(${PYTHON_BINDING_FORCE_PYTHON3})
-    _APPEND_CYTHON_LIBRARY(${PACKAGE} Python3 python3 ${VAR})
+    _append_cython_library(${PACKAGE} Python3 python3 ${VAR})
   else()
-    execute_process(COMMAND python -c "import sys; print(sys.version_info.major);" OUTPUT_VARIABLE PYTHON_MAJOR OUTPUT_STRIP_TRAILING_WHITESPACE)
+    execute_process(
+      COMMAND python -c "import sys; print(sys.version_info.major);"
+      OUTPUT_VARIABLE PYTHON_MAJOR
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
     if("${PYTHON_MAJOR}" STREQUAL "2" OR "${PYTHON_MAJOR}" STREQUAL "3")
-      _APPEND_CYTHON_LIBRARY(${PACKAGE} Python${PYTHON_MAJOR} python ${VAR})
+      _append_cython_library(${PACKAGE} Python${PYTHON_MAJOR} python ${VAR})
     else()
-      message(FATAL_ERROR "Could not determine Python major version from command line, got ${PYTHON_MAJOR}, expected 2 or 3")
+      message(
+        FATAL_ERROR
+          "Could not determine Python major version from command line, got ${PYTHON_MAJOR}, expected 2 or 3"
+      )
     endif()
   endif()
 endmacro()
 
-#.rst:
-# .. command:: GET_PYTHON_NAMES(VAR)
+# .rst: .. command:: GET_PYTHON_NAMES(VAR)
 #
-#   This macro returns the names of Python versions according to the specified bindings
+# This macro returns the names of Python versions according to the specified
+# bindings
 #
 macro(GET_PYTHON_NAMES VAR)
   set(${VAR})
diff --git a/cmake/cython/setup.in.py b/cmake/cython/setup.in.py
index c0d7080..d520b3d 100644
--- a/cmake/cython/setup.in.py
+++ b/cmake/cython/setup.in.py
@@ -19,88 +19,120 @@ import sys
 try:
     from numpy import get_include as numpy_get_include
 except ImportError:
+
     def numpy_get_include():
         return ""
 
-win32_build = os.name == 'nt'
-linux_build = sys.platform.startswith('linux')
+
+win32_build = os.name == "nt"
+linux_build = sys.platform.startswith("linux")
 
 sha512 = hashlib.sha512()
-src_files = filter(len, '@CYTHON_BINDINGS_SOURCES@;@CYTHON_BINDINGS_GENERATE_SOURCES@'.split(';'))
+src_files = filter(
+    len, "@CYTHON_BINDINGS_SOURCES@;@CYTHON_BINDINGS_GENERATE_SOURCES@".split(";")
+)
+
+
 def absolute(src):
     if os.path.isabs(src):
         return src
     else:
-        return '{}/{}'.format('@CMAKE_CURRENT_SOURCE_DIR@', src)
+        return "{}/{}".format("@CMAKE_CURRENT_SOURCE_DIR@", src)
+
+
 src_files = map(absolute, src_files)
 for f in src_files:
     chunk = 2**12
-    with open(f, 'r') as fd:
+    with open(f, "r") as fd:
         while True:
             data = fd.read(chunk)
             if data:
-                sha512.update(data.encode('ascii'))
+                sha512.update(data.encode("ascii"))
             else:
                 break
 version_hash = sha512.hexdigest()[:7]
 
+
 def get_lib_name(path):
     ret = os.path.basename(path)
-    dot_idx = ret.find('.')
+    dot_idx = ret.find(".")
     if dot_idx == -1:
         return ret
     return ret[0:dot_idx]
 
+
 class pkg_config(object):
     def __init__(self):
         compile_args = "@CYTHON_BINDINGS_COMPILE_DEFINITIONS@"
-        self.compile_args = [ "-D" + x for x in compile_args.split(';') if len(x) ]
+        self.compile_args = ["-D" + x for x in compile_args.split(";") if len(x)]
         self.compile_args = list(set(self.compile_args))
         include_dirs = "@CYTHON_BINDINGS_INCLUDE_DIRECTORIES@"
-        include_dirs += ';{}'.format(numpy_get_include())
-        self.include_dirs = [ x for x in include_dirs.split(';') if len(x) ]
-        self.include_dirs.append('@CMAKE_CURRENT_SOURCE_DIR@/include')
+        include_dirs += ";{}".format(numpy_get_include())
+        self.include_dirs = [x for x in include_dirs.split(";") if len(x)]
+        self.include_dirs.append("@CMAKE_CURRENT_SOURCE_DIR@/include")
         self.include_dirs = list(set(self.include_dirs))
         library_dirs = "@CYTHON_BINDINGS_LINK_FLAGS@"
-        self.library_dirs = [ x for x in library_dirs.split(';') if len(x) ]
-        self.libraries = [ re.sub("^lib", "", get_lib_name(l)) for l in "@CYTHON_BINDINGS_LIBRARIES@".split(";") if len(l) ]
+        self.library_dirs = [x for x in library_dirs.split(";") if len(x)]
+        self.libraries = [
+            re.sub("^lib", "", get_lib_name(lib))
+            for lib in "@CYTHON_BINDINGS_LIBRARIES@".split(";")
+            if len(lib)
+        ]
         self.libraries = list(set(self.libraries))
-        self.library_dirs += [os.path.dirname(l) for l in "@CYTHON_BINDINGS_TARGET_FILES@".split(';') if len(l) ]
+        self.library_dirs += [
+            os.path.dirname(lib)
+            for lib in "@CYTHON_BINDINGS_TARGET_FILES@".split(";")
+            if len(lib)
+        ]
         self.library_dirs = list(set(self.library_dirs))
         self.link_args = []
         if linux_build:
-            for l in self.libraries:
-                self.link_args += ['-Wl,--no-as-needed', '-l{}'.format(l)]
+            for lib in self.libraries:
+                self.link_args += ["-Wl,--no-as-needed", "-l{}".format(lib)]
             self.libraries = []
         if not win32_build:
-            self.extra_objects = [l for l in '@CYTHON_BINDINGS_STATIC_LIBRARIES@'.split(';') if len(l)]
+            self.extra_objects = [
+                lib
+                for lib in "@CYTHON_BINDINGS_STATIC_LIBRARIES@".split(";")
+                if len(lib)
+            ]
         else:
             self.extra_objects = []
 
+
 config = pkg_config()
 
+
 def cxx_standard(value):
     try:
         return int(value)
-    except:
+    except Exception:
         return 0
+
+
 def cxx_standard_cmp(lhs):
     if lhs == 98:
         return 1
     return lhs
-cxx_standard = max(map(cxx_standard, "0;@CYTHON_BINDINGS_CXX_STANDARD@".split(';')), key = cxx_standard_cmp)
+
+
+cxx_standard = max(
+    map(cxx_standard, "0;@CYTHON_BINDINGS_CXX_STANDARD@".split(";")),
+    key=cxx_standard_cmp,
+)
 if cxx_standard != 0:
     if not win32_build:
-        config.compile_args.append('-std=c++{}'.format(cxx_standard))
-        # In C++17 the register keyword is unused and reserved, GCC still accepts it with a warning but clang errors by default
+        config.compile_args.append("-std=c++{}".format(cxx_standard))
+        # In C++17 the register keyword is unused and reserved,
+        # GCC still accepts it with a warning but clang errors by default
         # It is used in Python 2.7 header file and so we need this flag
         if cxx_standard >= 17:
-            config.compile_args.append('-Wno-register')
+            config.compile_args.append("-Wno-register")
     else:
         if cxx_standard > 17:
-            config.compile_args.append('/std:c++latest')
+            config.compile_args.append("/std:c++latest")
         elif cxx_standard == 17:
-            config.compile_args.append('/std:c++17')
+            config.compile_args.append("/std:c++17")
 
 if win32_build:
     config.compile_args.append("-DWIN32")
@@ -108,23 +140,45 @@ if win32_build:
         config.compile_args += ["-Zi", "/Od"]
         config.link_args += ["-debug"]
 
+
 def GenExtension(name):
-    pyx_src = name.replace('.', '/')
-    pyx_src = pyx_src + '.pyx'
+    pyx_src = name.replace(".", "/")
+    pyx_src = pyx_src + ".pyx"
     ext_src = pyx_src
-    return Extension(name, [ext_src], extra_compile_args = config.compile_args, include_dirs = config.include_dirs, library_dirs = config.library_dirs, libraries = config.libraries, extra_link_args = config.link_args, extra_objects = config.extra_objects)
+    return Extension(
+        name,
+        [ext_src],
+        extra_compile_args=config.compile_args,
+        include_dirs=config.include_dirs,
+        library_dirs=config.library_dirs,
+        libraries=config.libraries,
+        extra_link_args=config.link_args,
+        extra_objects=config.extra_objects,
+    )
+
 
-extensions = [ GenExtension(x) for x in '@CYTHON_BINDINGS_MODULES@'.split(';') ]
+extensions = [GenExtension(x) for x in "@CYTHON_BINDINGS_MODULES@".split(";")]
 
 extensions = cythonize(extensions)
 
-packages = [ p.split('.')[0] for p in '@CYTHON_BINDINGS_MODULES@'.split(';') ]
-package_data = { p : list(map(lambda x: x.replace(p + '/', ''), filter(lambda x: x.startswith(p + '/'), '@CYTHON_BINDINGS_EXPORT_SOURCES@'.split(';')))) for p in packages }
+packages = [p.split(".")[0] for p in "@CYTHON_BINDINGS_MODULES@".split(";")]
+package_data = {
+    p: list(
+        map(
+            lambda x: x.replace(p + "/", ""),
+            filter(
+                lambda x: x.startswith(p + "/"),
+                "@CYTHON_BINDINGS_EXPORT_SOURCES@".split(";"),
+            ),
+        )
+    )
+    for p in packages
+}
 
 setup(
-  name = '@CYTHON_BINDINGS_PACKAGE_NAME@',
-  version='@CYTHON_BINDINGS_VERSION@-{}'.format(version_hash),
-  ext_modules = extensions,
-  packages = packages,
-  package_data = package_data
+    name="@CYTHON_BINDINGS_PACKAGE_NAME@",
+    version="@CYTHON_BINDINGS_VERSION@-{}".format(version_hash),
+    ext_modules=extensions,
+    packages=packages,
+    package_data=package_data,
 )
diff --git a/cmake/debian.cmake b/cmake/debian.cmake
index dbf82aa..6d3c89d 100644
--- a/cmake/debian.cmake
+++ b/cmake/debian.cmake
@@ -1,121 +1,117 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # _SETUP_DEBIAN
 # -------------------
 #
 # Prepare needed file for debian if the target is a shared library.
 #
-MACRO(_SETUP_DEBIAN)
-  IF (BUILDING_DEBIAN_PACKAGE)
-    MESSAGE(STATUS "setup debian. Trying to get the type of ${PROJECT_NAME}")
-    GET_TARGET_PROPERTY(${PROJECT_NAME}_IS_SHARED_LIBRARY ${PROJECT_NAME} TYPE)
-    MESSAGE(STATUS "${PROJECT_NAME}_IS_SHARED_LIBRARY:" ${${PROJECT_NAME}_IS_SHARED_LIBRARY})
+macro(_SETUP_DEBIAN)
+  if(BUILDING_DEBIAN_PACKAGE)
+    message(STATUS "setup debian. Trying to get the type of ${PROJECT_NAME}")
+    get_target_property(${PROJECT_NAME}_IS_SHARED_LIBRARY ${PROJECT_NAME} TYPE)
+    message(STATUS "${PROJECT_NAME}_IS_SHARED_LIBRARY:"
+                   ${${PROJECT_NAME}_IS_SHARED_LIBRARY})
 
-    IF(UNIX)
-      IF (IS_DIRECTORY ${PROJECT_SOURCE_DIR}/debian)
-	IF(${PROJECT_NAME}_IS_SHARED_LIBRARY STREQUAL "SHARED_LIBRARY")
-	  # Create the install file to be inside ld.so.conf.d
-          MESSAGE(STATUS "PROJECT_SOURCE_DIR:" ${PROJECT_SOURCE_DIR})
- 	  EXECUTE_PROCESS(
-	    COMMAND ${GIT} describe --abbrev=0 --match=v* HEAD
-	    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-	    RESULT_VARIABLE LGIT_DESCRIBE_RESULT
-	    OUTPUT_VARIABLE LGIT_DESCRIBE_OUTPUT
-	    ERROR_VARIABLE LGIT_DESCRIBE_ERROR
-	    OUTPUT_STRIP_TRAILING_WHITESPACE
-	    )
-	  MESSAGE(STATUS "LGIT_DESCRIBE_OUTPUT:" ${LGIT_DESCRIBE_OUTPUT})
-	  MESSAGE(STATUS "LGIT_DESCRIBE_ERROR:" ${LGIT_DESCRIBE_ERROR})
+    if(UNIX)
+      if(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/debian)
+        if(${PROJECT_NAME}_IS_SHARED_LIBRARY STREQUAL "SHARED_LIBRARY")
+          # Create the install file to be inside ld.so.conf.d
+          message(STATUS "PROJECT_SOURCE_DIR:" ${PROJECT_SOURCE_DIR})
+          execute_process(
+            COMMAND ${GIT} describe --abbrev=0 --match=v* HEAD
+            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+            RESULT_VARIABLE LGIT_DESCRIBE_RESULT
+            OUTPUT_VARIABLE LGIT_DESCRIBE_OUTPUT
+            ERROR_VARIABLE LGIT_DESCRIBE_ERROR
+            OUTPUT_STRIP_TRAILING_WHITESPACE)
+          message(STATUS "LGIT_DESCRIBE_OUTPUT:" ${LGIT_DESCRIBE_OUTPUT})
+          message(STATUS "LGIT_DESCRIBE_ERROR:" ${LGIT_DESCRIBE_ERROR})
 
           # From the v[0-9]+.[0-9]+.[0-9]+ version remove the v in prefix.
-          STRING(REGEX REPLACE "^v" "" LPROJECT_RELEASE_VERSION "${LGIT_DESCRIBE_OUTPUT}")   
+          string(REGEX REPLACE "^v" "" LPROJECT_RELEASE_VERSION
+                               "${LGIT_DESCRIBE_OUTPUT}")
 
           # Considers the file *.release.version
-          SET(file_release_version "${PROJECT_SOURCE_DIR}/debian/${PROJECT_NAME}.release.version")
+          set(file_release_version
+              "${PROJECT_SOURCE_DIR}/debian/${PROJECT_NAME}.release.version")
 
-          MESSAGE(STATUS "file_release_version: ${file_release_version}")
-          MESSAGE(STATUS "Everything sounds great: ${LPROJECT_RELEASE_VERSION}")
+          message(STATUS "file_release_version: ${file_release_version}")
+          message(STATUS "Everything sounds great: ${LPROJECT_RELEASE_VERSION}")
           # If this is not a git version.
-          IF(LPROJECT_RELEASE_VERSION STREQUAL "" )
+          if(LPROJECT_RELEASE_VERSION STREQUAL "")
             # If the file exists
-            MESSAGE(STATUS "Read the release version file")
-            IF(EXISTS ${file_release_version})
+            message(STATUS "Read the release version file")
+            if(EXISTS ${file_release_version})
               # Use it. This is the release version.
-              FILE(STRINGS ${file_release_version} LPROJECT_RELEASE_VERSION)
-            ENDIF(EXISTS ${file_release_version})
-          # if this is
-          ELSE(LPROJECT_RELEASE_VERSION STREQUAL "")
+              file(STRINGS ${file_release_version} LPROJECT_RELEASE_VERSION)
+            endif(EXISTS ${file_release_version})
+            # if this is
+          else(LPROJECT_RELEASE_VERSION STREQUAL "")
             # Then create the containing the release version.
-            MESSAGE(STATUS "Create the release version file")
-            FILE(WRITE ${file_release_version} "${LPROJECT_RELEASE_VERSION}")
+            message(STATUS "Create the release version file")
+            file(WRITE ${file_release_version} "${LPROJECT_RELEASE_VERSION}")
 
-          ENDIF(LPROJECT_RELEASE_VERSION STREQUAL "" )
+          endif(LPROJECT_RELEASE_VERSION STREQUAL "")
 
-          SET(install_file_name_src "debian/lib${PROJECT_NAME}${LPROJECT_RELEASE_VERSION}.install.cmake")
-	 
-	  MESSAGE(STATUS "install_file_name_src :" ${install_file_name_src})
-	  IF(EXISTS ${PROJECT_SOURCE_DIR}/${install_file_name_src})
-  	    SET(install_file_name_dest "debian/lib${PROJECT_NAME}${LPROJECT_RELEASE_VERSION}.install")
-	    EXECUTE_PROCESS(
-	        COMMAND cp ${install_file_name_src} ${install_file_name_dest}
-	        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-	        )
+          set(install_file_name_src
+              "debian/lib${PROJECT_NAME}${LPROJECT_RELEASE_VERSION}.install.cmake"
+          )
 
-	    MESSAGE(STATUS "install_file_name :" ${install_file_name_dest})
-            FILE(APPEND ${install_file_name_dest}
-	      "/etc/ld.so.conf.d/*\n"
-	    )
-	    # Create the file to be installed.
-	    SET(install_file_name "debian/lib${PROJECT_NAME}.conf")
-	      FILE(WRITE ${install_file_name}
-	      "${CMAKE_INSTALL_PREFIX}/lib"
-	    )
-	    MESSAGE(STATUS "install_file_name :" ${install_file_name})
-	    INSTALL(FILES ${install_file_name} DESTINATION /etc/ld.so.conf.d )
+          message(STATUS "install_file_name_src :" ${install_file_name_src})
+          if(EXISTS ${PROJECT_SOURCE_DIR}/${install_file_name_src})
+            set(install_file_name_dest
+                "debian/lib${PROJECT_NAME}${LPROJECT_RELEASE_VERSION}.install")
+            execute_process(
+              COMMAND cp ${install_file_name_src} ${install_file_name_dest}
+              WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
 
-	  ENDIF(EXISTS ${PROJECT_SOURCE_DIR}/${install_file_name_src})
-       ENDIF(${PROJECT_NAME}_IS_SHARED_LIBRARY STREQUAL "SHARED_LIBRARY")
-     ENDIF(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/debian)
-   ENDIF(UNIX)
- ENDIF(BUILDING_DEBIAN_PACKAGE)
-ENDMACRO(_SETUP_DEBIAN)
+            message(STATUS "install_file_name :" ${install_file_name_dest})
+            file(APPEND ${install_file_name_dest} "/etc/ld.so.conf.d/*\n")
+            # Create the file to be installed.
+            set(install_file_name "debian/lib${PROJECT_NAME}.conf")
+            file(WRITE ${install_file_name} "${CMAKE_INSTALL_PREFIX}/lib")
+            message(STATUS "install_file_name :" ${install_file_name})
+            install(FILES ${install_file_name} DESTINATION /etc/ld.so.conf.d)
+
+          endif(EXISTS ${PROJECT_SOURCE_DIR}/${install_file_name_src})
+        endif(${PROJECT_NAME}_IS_SHARED_LIBRARY STREQUAL "SHARED_LIBRARY")
+      endif(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/debian)
+    endif(UNIX)
+  endif(BUILDING_DEBIAN_PACKAGE)
+endmacro(_SETUP_DEBIAN)
 
 # _SETUP_PROJECT_DEB
 # -------------------
 #
-# Add a deb target to generate a Debian package using
-# git-buildpackage (Linux specific).
+# Add a deb target to generate a Debian package using git-buildpackage (Linux
+# specific).
 #
 
-MACRO(_SETUP_PROJECT_DEB)
-  IF(UNIX AND NOT APPLE)
-  ADD_CUSTOM_TARGET(deb-src
-    COMMAND
-    git-buildpackage
-    --git-debian-branch=debian
-    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-    COMMENT "Generating source Debian package..."
-    )
-  ADD_CUSTOM_TARGET(deb
-    COMMAND
-    git-buildpackage
-    --git-debian-branch=debian --git-builder="debuild -S -i.git -I.git"
-    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-    COMMENT "Generating Debian package..."
-    )
-  ENDIF(UNIX AND NOT APPLE)
-ENDMACRO(_SETUP_PROJECT_DEB)
-
+macro(_SETUP_PROJECT_DEB)
+  if(UNIX AND NOT APPLE)
+    add_custom_target(
+      deb-src
+      COMMAND git-buildpackage --git-debian-branch=debian
+      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+      COMMENT "Generating source Debian package...")
+    add_custom_target(
+      deb
+      COMMAND git-buildpackage --git-debian-branch=debian
+              --git-builder="debuild -S -i.git -I.git"
+      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+      COMMENT "Generating Debian package...")
+  endif(UNIX AND NOT APPLE)
+endmacro(_SETUP_PROJECT_DEB)
diff --git a/cmake/dist.cmake b/cmake/dist.cmake
index 5bd5e34..e12a13e 100644
--- a/cmake/dist.cmake
+++ b/cmake/dist.cmake
@@ -1,122 +1,132 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. command:: _SETUP_PROJECT_DIST
+# .rst: .. command:: _SETUP_PROJECT_DIST
 #
-#   .. _target-dist:
+# .. _target-dist:
 #
-#   Add a *dist* target to generate a tarball using ``git-archive``.
+# Add a *dist* target to generate a tarball using ``git-archive``.
 #
-#   Linux specific: use ``git-archive-all.sh`` to obtain a recursive
-#   ``git-archive`` on the project's submodule.
-#   Please note that ``git-archive-all.sh`` is not carefully written
-#   and create a temporary file in the source directory
-#   (which is then moved to the build directory).
-MACRO(_SETUP_PROJECT_DIST)
-  IF(UNIX)
-    FIND_PROGRAM(TAR tar)
-    FIND_PROGRAM(GPG gpg)
+# Linux specific: use ``git-archive-all.sh`` to obtain a recursive
+# ``git-archive`` on the project's submodule. Please note that
+# ``git-archive-all.sh`` is not carefully written and create a temporary file in
+# the source directory (which is then moved to the build directory).
+macro(_SETUP_PROJECT_DIST)
+  if(UNIX)
+    find_program(TAR tar)
+    find_program(GPG gpg)
 
-    IF(APPLE)
-      SET(GIT_ARCHIVE_ALL ${PROJECT_JRL_CMAKE_MODULE_DIR}/git-archive-all.py)
-    ELSE(APPLE)
-      SET(GIT_ARCHIVE_ALL ${PROJECT_JRL_CMAKE_MODULE_DIR}/git-archive-all.sh)
-    ENDIF(APPLE)
+    if(APPLE)
+      set(GIT_ARCHIVE_ALL ${PROJECT_JRL_CMAKE_MODULE_DIR}/git-archive-all.py)
+    else(APPLE)
+      set(GIT_ARCHIVE_ALL ${PROJECT_JRL_CMAKE_MODULE_DIR}/git-archive-all.sh)
+    endif(APPLE)
 
     # Use git-archive-all.sh to generate distributable source code
-    ADD_CUSTOM_TARGET(distdir
+    add_custom_target(
+      distdir
       COMMAND
-      rm -f /tmp/${PROJECT_NAME}.tar
-      && ${GIT_ARCHIVE_ALL}
-      --prefix ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/  ${PROJECT_NAME}.tar
-      && cd ${CMAKE_BINARY_DIR}/
-      && (test -d ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}
-    	&& find ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ -type d -print0
-         | xargs -0 chmod a+w  || true)
-      && rm -rf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/
-      && ${TAR} xf ${PROJECT_SOURCE_DIR}/${PROJECT_NAME}.tar
-      && echo "${PROJECT_VERSION}" >
-         ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/.version
-      && ${PROJECT_JRL_CMAKE_MODULE_DIR}/gitlog-to-changelog >
-      ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ChangeLog
-      && rm -f ${PROJECT_SOURCE_DIR}/${PROJECT_NAME}.tar
+        rm -f /tmp/${PROJECT_NAME}.tar && ${GIT_ARCHIVE_ALL} --prefix
+        ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ ${PROJECT_NAME}.tar
+        && cd ${CMAKE_BINARY_DIR}/ &&
+        (test
+         -d
+         ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}
+         &&
+         find
+         ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/
+         -type
+         d
+         -print0
+         |
+         xargs
+         -0
+         chmod
+         a+w
+         ||
+         true) && rm -rf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ &&
+        ${TAR} xf ${PROJECT_SOURCE_DIR}/${PROJECT_NAME}.tar && echo
+        "${PROJECT_VERSION}" >
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/.version
+        && ${PROJECT_JRL_CMAKE_MODULE_DIR}/gitlog-to-changelog >
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ChangeLog
+        && rm -f ${PROJECT_SOURCE_DIR}/${PROJECT_NAME}.tar
       WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-      COMMENT "Generating dist directory..."
-      )
+      COMMENT "Generating dist directory...")
 
     # Create a tar.gz tarball for the project, and generate the signature
-    ADD_CUSTOM_TARGET(dist_targz
+    add_custom_target(
+      dist_targz
       COMMAND
-      ${TAR} -czf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz
-                  ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/
-      && ${GPG} --detach-sign --armor -o
-      ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz.sig
-      ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz 
+        ${TAR} -czf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz
+        ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ && ${GPG}
+        --detach-sign --armor -o
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz.sig
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz
       WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-      COMMENT "Generating tar.gz tarball and its signature..."
-      )
+      COMMENT "Generating tar.gz tarball and its signature...")
 
     # Create a tar.bz2 tarball for the project, and generate the signature
-    ADD_CUSTOM_TARGET(dist_tarbz2
+    add_custom_target(
+      dist_tarbz2
       COMMAND
-      ${TAR} -cjf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.bz2
-                  ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/
-      && ${GPG} --detach-sign --armor -o
-      ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.bz2.sig
-      ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.bz2
+        ${TAR} -cjf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.bz2
+        ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ && ${GPG}
+        --detach-sign --armor -o
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.bz2.sig
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.bz2
       WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-      COMMENT "Generating tar.bz2 tarball and its signature..."
-      )
+      COMMENT "Generating tar.bz2 tarball and its signature...")
 
     # Create a tar.xz tarball for the project, and generate the signature
-    ADD_CUSTOM_TARGET(dist_tarxz
+    add_custom_target(
+      dist_tarxz
       COMMAND
-      ${TAR} -cJf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.xz
-                  ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/
-      && ${GPG} --detach-sign --armor -o
-      ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.xz.sig
-      ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.xz
+        ${TAR} -cJf ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.xz
+        ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/ && ${GPG}
+        --detach-sign --armor -o
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.xz.sig
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.xz
       WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-      COMMENT "Generating tar.xz tarball and its signature..."
-      )
+      COMMENT "Generating tar.xz tarball and its signature...")
 
     # Alias: dist = dist_targz (backward compatibility)
-    ADD_CUSTOM_TARGET(dist DEPENDS dist_targz)
+    add_custom_target(dist DEPENDS dist_targz)
 
     # TODO: call this during `make clean`
-    ADD_CUSTOM_TARGET(distclean
+    add_custom_target(
+      distclean
       COMMAND
-      rm -rf ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/
+        rm -rf
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}/
       WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-      COMMENT "Cleaning dist sources..."
-      )
+      COMMENT "Cleaning dist sources...")
 
-    ADD_CUSTOM_TARGET(distorig
+    add_custom_target(
+      distorig
       COMMAND
-      cmake -E copy ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz
-              ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.orig.tar.gz
+        cmake -E copy ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.tar.gz
+        ${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}.orig.tar.gz
       WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-      COMMENT "Generating orig tarball..."
-      )
+      COMMENT "Generating orig tarball...")
 
-    ADD_DEPENDENCIES(dist_targz distdir)
-    ADD_DEPENDENCIES(dist_tarbz2 distdir)
-    ADD_DEPENDENCIES(dist_tarxz distdir)
-    ADD_DEPENDENCIES(distorig dist)
-  ELSE()
-    #FIXME: what to do here?
-  ENDIF()
-ENDMACRO(_SETUP_PROJECT_DIST)
+    add_dependencies(dist_targz distdir)
+    add_dependencies(dist_tarbz2 distdir)
+    add_dependencies(dist_tarxz distdir)
+    add_dependencies(distorig dist)
+  else()
+    # FIXME: what to do here?
+  endif()
+endmacro(_SETUP_PROJECT_DIST)
diff --git a/cmake/distcheck.cmake b/cmake/distcheck.cmake
index cb03c41..c2e60cc 100644
--- a/cmake/distcheck.cmake
+++ b/cmake/distcheck.cmake
@@ -1,138 +1,140 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. command:: DISTCHECK_SETUP
+# .rst: .. command:: DISTCHECK_SETUP
 #
-#   .. _target-distcheck:
+# .. _target-distcheck:
 #
-#   Add a *distcheck* target to check the generated tarball.
+# Add a *distcheck* target to check the generated tarball.
 #
-#   This step calls ``make distdir`` to generate a copy of the project without
-#   the git history and with the ``.version`` file (as it will be when an user
-#   will retrieve a stable version).
-#   Then:
+# This step calls ``make distdir`` to generate a copy of the project without the
+# git history and with the ``.version`` file (as it will be when an user will
+# retrieve a stable version). Then:
 #
-#   - create ``_build`` and ``_inst`` to respectively create a build and an installation
-#     directory.
-#   - copy the ``CMakeCache.txt`` file.
-#   - run ``cmake`` with ``_inst`` as the installation prefix
-#   - run ``make``, ``make check``, ``make install`` and ``make uninstall``
-#   - remove ``_build`` and ``_inst``.
+# * create ``_build`` and ``_inst`` to respectively create a build and an
+#   installation directory.
+# * copy the ``CMakeCache.txt`` file.
+# * run ``cmake`` with ``_inst`` as the installation prefix
+# * run ``make``, ``make check``, ``make install`` and ``make uninstall``
+# * remove ``_build`` and ``_inst``.
 #
-#   During the compilation phase, all files in the source tree are modified
-#   to *not* be writeable to detect bad compilation steps which tries to modify
-#   the source tree. Permissions are reverted at the end of the check.
+# During the compilation phase, all files in the source tree are modified to
+# *not* be writeable to detect bad compilation steps which tries to modify the
+# source tree. Permissions are reverted at the end of the check.
 #
-MACRO(DISTCHECK_SETUP)
-  IF(UNIX)
-    FIND_PROGRAM(SED sed)
-    SET(SRCDIR ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION})
-    SET(BUILDDIR ${SRCDIR}/_build)
-    SET(INSTDIR ${SRCDIR}/_inst)
-    SET(TEST_RESULTS_DIR ${BUILDDIR}/test_results)
-    SET(DISTCHECK_MAKEFLAGS "" CACHE PATH "MAKEFLAGS used for distcheck's make")
+macro(DISTCHECK_SETUP)
+  if(UNIX)
+    find_program(SED sed)
+    set(SRCDIR
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION})
+    set(BUILDDIR ${SRCDIR}/_build)
+    set(INSTDIR ${SRCDIR}/_inst)
+    set(TEST_RESULTS_DIR ${BUILDDIR}/test_results)
+    set(DISTCHECK_MAKEFLAGS
+        ""
+        CACHE PATH "MAKEFLAGS used for distcheck's make")
 
     # The -i argument of sed command differs according on APPLE systems
-    IF(APPLE)
-      SET(SED_I_OPTION "-i'.old' ")
-    ELSE(APPLE)
-      SET(SED_I_OPTION "-i ")
-    ENDIF(APPLE)
+    if(APPLE)
+      set(SED_I_OPTION "-i'.old' ")
+    else(APPLE)
+      set(SED_I_OPTION "-i ")
+    endif(APPLE)
 
-    #Set LD_LIBRARY_PATH
-    IF(APPLE)
-      SET(LD_LIBRARY_PATH_VARIABLE_NAME "DYLD_LIBRARY_PATH")
-    ELSE(APPLE)
-      SET(LD_LIBRARY_PATH_VARIABLE_NAME "LD_LIBRARY_PATH")
-    ENDIF(APPLE)
+    # Set LD_LIBRARY_PATH
+    if(APPLE)
+      set(LD_LIBRARY_PATH_VARIABLE_NAME "DYLD_LIBRARY_PATH")
+    else(APPLE)
+      set(LD_LIBRARY_PATH_VARIABLE_NAME "LD_LIBRARY_PATH")
+    endif(APPLE)
 
-    STRING(REPLACE "${CMAKE_SOURCE_DIR}" "${SRCDIR}" NEW_CMAKE_BINARY_DIR "${CMAKE_BINARY_DIR}")
+    string(REPLACE "${CMAKE_SOURCE_DIR}" "${SRCDIR}" NEW_CMAKE_BINARY_DIR
+                   "${CMAKE_BINARY_DIR}")
 
-    ADD_CUSTOM_TARGET(distcheck
+    add_custom_target(
+      distcheck
       COMMAND
-         export LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}
-      && export ${LD_LIBRARY_PATH_VARIABLE_NAME}=$ENV{${LD_LIBRARY_PATH_VARIABLE_NAME}}
-      && export PYTHONPATH=$ENV{PYTHONPATH}
-      && find . -type d -print0 | xargs -0 chmod a-w
-      && chmod u+w . && rm -rf _build _inst && mkdir -p _build && mkdir -p _inst
-      && chmod u+rwx _build _inst && chmod a-w .
-      && cp ${CMAKE_BINARY_DIR}/CMakeCache.txt _build/
-      && ${SED} ${SED_I_OPTION} -e "'s|${CMAKE_SOURCE_DIR}|${SRCDIR}|g'"
-                                _build/CMakeCache.txt # Change previous source dir to the source one
-      && ${SED} ${SED_I_OPTION} -e "'s|${NEW_CMAKE_BINARY_DIR}|${BUILDDIR}|g'"
-                                _build/CMakeCache.txt # Change previous binary dir by the current _build one
-      && ${SED} ${SED_I_OPTION} -e "'s|CMAKE_CXX_COMPILER:FILEPATH=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS:STRING=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_DEBUG:STRING=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_MINSIZEREL:STRING=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_RELEASE:STRING=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=.\\+||g'"
-                                -e "'s|CMAKE_CXX_COMPILER-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_CXX_COMPILER_WORKS:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_DETERMINE_CXX_ABI_COMPILED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_C_COMPILER:FILEPATH=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS:STRING=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_DEBUG:STRING=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_MINSIZEREL:STRING=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_RELEASE:STRING=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=.\\+||g'"
-                                -e "'s|CMAKE_C_COMPILER-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=.\\+||g'"
-                                -e "'s|CMAKE_DETERMINE_C_ABI_COMPILED:INTERNAL=.\\+||g'"
-                                _build/CMakeCache.txt
-      && cd _build
-      && cmake -DCMAKE_INSTALL_PREFIX=${INSTDIR} -DCATKIN_TEST_RESULTS_DIR=${TEST_RESULTS_DIR} .. || cmake ..
-         || (echo "ERROR: the cmake configuration failed." && false)
-      && make ${DISTCHECK_MAKEFLAGS}
-         || (echo "ERROR: the compilation failed." && false)
-      && make test
-         || (echo "ERROR: the test suite failed." && false)
-      && make install
-         || (echo "ERROR: the install target failed." && false)
-      && make uninstall
-         || (echo "ERROR: the uninstall target failed." && false)
-      && test `find ${INSTDIR} -type f | wc -l` -eq 0
-         || (echo "ERROR: the uninstall target does not work." && false)
-      && make clean
-         || (echo "ERROR: the clean target failed." && false)
-      && cd ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}
-      && chmod u+w . _build _inst && rm -rf _build _inst
-      && find . -type d -print0 | xargs -0 chmod u+w
-      && echo "=============================================================="
-      && echo "${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}"
-              "is ready for distribution."
-      && echo "=============================================================="
-      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}
-      COMMENT "Checking generated tarball..."
-      )
-    ADD_DEPENDENCIES(distcheck distdir)
+        export LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH} && export
+        ${LD_LIBRARY_PATH_VARIABLE_NAME}=$ENV{${LD_LIBRARY_PATH_VARIABLE_NAME}}
+        && export PYTHONPATH=$ENV{PYTHONPATH} && find . -type d -print0 | xargs
+        -0 chmod a-w && chmod u+w . && rm -rf _build _inst && mkdir -p _build &&
+        mkdir -p _inst && chmod u+rwx _build _inst && chmod a-w . && cp
+        ${CMAKE_BINARY_DIR}/CMakeCache.txt _build/ && ${SED} ${SED_I_OPTION} -e
+        "'s|${CMAKE_SOURCE_DIR}|${SRCDIR}|g'" _build/CMakeCache.txt # Change
+                                                                    # previous
+                                                                    # source dir
+                                                                    # to the
+                                                                    # source one
+        && ${SED} ${SED_I_OPTION} -e "'s|${NEW_CMAKE_BINARY_DIR}|${BUILDDIR}|g'"
+        _build/CMakeCache.txt # Change previous binary dir by the current _build
+                              # one
+        && ${SED} ${SED_I_OPTION} -e "'s|CMAKE_CXX_COMPILER:FILEPATH=.\\+||g'"
+        -e "'s|CMAKE_CXX_FLAGS:STRING=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_DEBUG:STRING=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_MINSIZEREL:STRING=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_RELEASE:STRING=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=.\\+||g'" -e
+        "'s|CMAKE_CXX_COMPILER-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_CXX_COMPILER_WORKS:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_DETERMINE_CXX_ABI_COMPILED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_C_COMPILER:FILEPATH=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS:STRING=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_DEBUG:STRING=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_MINSIZEREL:STRING=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_RELEASE:STRING=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=.\\+||g'" -e
+        "'s|CMAKE_C_COMPILER-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=.\\+||g'" -e
+        "'s|CMAKE_DETERMINE_C_ABI_COMPILED:INTERNAL=.\\+||g'"
+        _build/CMakeCache.txt && cd _build && cmake
+        -DCMAKE_INSTALL_PREFIX=${INSTDIR}
+        -DCATKIN_TEST_RESULTS_DIR=${TEST_RESULTS_DIR} .. || cmake .. ||
+        (echo "ERROR: the cmake configuration failed." && false) && make
+        ${DISTCHECK_MAKEFLAGS} || (echo "ERROR: the compilation failed." &&
+                                   false) && make test ||
+        (echo "ERROR: the test suite failed." && false) && make install ||
+        (echo "ERROR: the install target failed." && false) && make uninstall ||
+        (echo "ERROR: the uninstall target failed." && false) && test `find
+        ${INSTDIR} -type f | wc -l` -eq 0 ||
+        (echo "ERROR: the uninstall target does not work." && false) && make
+        clean || (echo "ERROR: the clean target failed." && false) && cd
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}
+        && chmod u+w . _build _inst && rm -rf _build _inst && find . -type d
+        -print0 | xargs -0 chmod u+w && echo
+        "==============================================================" && echo
+        "${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}"
+        "is ready for distribution." && echo
+        "=============================================================="
+      WORKING_DIRECTORY
+        ${CMAKE_BINARY_DIR}/${PROJECT_NAME}${PROJECT_SUFFIX}-${PROJECT_VERSION}
+      COMMENT "Checking generated tarball...")
+    add_dependencies(distcheck distdir)
 
-    UNSET(NEW_CMAKE_BINARY_DIR)
-    UNSET(SRCDIR)
-    UNSET(BUILDIR)
-  ELSE()
-    #FIXME: what to do here?
-  ENDIF()
-ENDMACRO()
+    unset(NEW_CMAKE_BINARY_DIR)
+    unset(SRCDIR)
+    unset(BUILDIR)
+  else()
+    # FIXME: what to do here?
+  endif()
+endmacro()
diff --git a/cmake/doxygen.cmake b/cmake/doxygen.cmake
index 56dcb87..8edadee 100644
--- a/cmake/doxygen.cmake
+++ b/cmake/doxygen.cmake
@@ -1,393 +1,389 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
-#  By default, Doxygen_, if found, is used to generate a HTML documentation
-#  of the code. You can configure it as follows:
+# By default, Doxygen_, if found, is used to generate a HTML documentation of
+# the code. You can configure it as follows:
 #
-#  - Many Doxygen options can be configured from CMake itself. E.g. Doxygen option
-#    `PROJECT_NAME` can be set using CMake variable `DOXYGEN_PROJECT_NAME`.
+# * Many Doxygen options can be configured from CMake itself. E.g. Doxygen
+#   option `PROJECT_NAME` can be set using CMake variable
+#   `DOXYGEN_PROJECT_NAME`.
 #
-#  - If present, the file *doc/Doxyfile.extra.in* will be configured and append to
-#    the above mentionned configuration file.
+# * If present, the file *doc/Doxyfile.extra.in* will be configured and append
+#   to the above mentionned configuration file.
 #
-#  For a good documentation of the available options, see either `local documentation
-#  <file:///usr/share/doc/doxygen/html/config.html>`_ provided by package *doxygen-doc*
-#  or the `online version <http://www.doxygen.nl/manual/config.html>`_.
+# For a good documentation of the available options, see either `local
+# documentation <file:///usr/share/doc/doxygen/html/config.html>`_ provided by
+# package *doxygen-doc* or the `online version
+# <http://www.doxygen.nl/manual/config.html>`_.
 #
-#   .. variable:: INSTALL_DOCUMENTATION
+# .. variable:: INSTALL_DOCUMENTATION
 #
-#     whether the documentation should be installed.
-#     Turning this to OFF does not prevent the documentation generation.
+# whether the documentation should be installed. Turning this to OFF does not
+# prevent the documentation generation.
 #
-#  .. _Doxygen: http://www.doxygen.nl
+# .. _Doxygen: http://www.doxygen.nl
 
-#.rst:
-# .. ifmode:: internal
+# .rst: .. ifmode:: internal
 #
-#   .. command:: _SETUP_DOXYGEN_DEFAULT_OPTIONS
+# .. command:: _SETUP_DOXYGEN_DEFAULT_OPTIONS
 #
-#     Set default options for doxygen configuration when the user didn't specify
-#     those options already. To add doxygen configuration option, the easiest is
+# Set default options for doxygen configuration when the user didn't specify
+# those options already. To add doxygen configuration option, the easiest is
 #
-#     - `doxygen -s -g Doxyfile.tmp`
-#     - `awk -f doxyfile.awk doxygen`
+# * `doxygen -s -g Doxyfile.tmp`
+# * `awk -f doxyfile.awk doxygen`
 #
-#     :param configfile: the output file
-MACRO(_SETUP_DOXYGEN_CONFIG_FILE configfile)
+# :param configfile: the output file
+macro(_SETUP_DOXYGEN_CONFIG_FILE configfile)
   file(WRITE ${configfile} "# Generated by cmake/doxygen.cmake\n")
-  foreach(option
-       # This list was generated using
-       # doxygen -s -g Doxyfile.tmp
-       # awk -f doxyfile.awk doxygen
-
-       # Doxyfile 1.8.18
-
-       #---------------------------------------------------------------------------
-       # Project related configuration options
-       #---------------------------------------------------------------------------
-       DOXYFILE_ENCODING
-       PROJECT_NAME
-       PROJECT_NUMBER
-       PROJECT_BRIEF
-       PROJECT_LOGO
-       OUTPUT_DIRECTORY
-       CREATE_SUBDIRS
-       ALLOW_UNICODE_NAMES
-       OUTPUT_LANGUAGE
-       OUTPUT_TEXT_DIRECTION
-       BRIEF_MEMBER_DESC
-       REPEAT_BRIEF
-       ABBREVIATE_BRIEF
-       ALWAYS_DETAILED_SEC
-       INLINE_INHERITED_MEMB
-       FULL_PATH_NAMES
-       STRIP_FROM_PATH
-       STRIP_FROM_INC_PATH
-       SHORT_NAMES
-       JAVADOC_AUTOBRIEF
-       JAVADOC_BANNER
-       QT_AUTOBRIEF
-       MULTILINE_CPP_IS_BRIEF
-       INHERIT_DOCS
-       SEPARATE_MEMBER_PAGES
-       TAB_SIZE
-       ALIASES
-       TCL_SUBST
-       OPTIMIZE_OUTPUT_FOR_C
-       OPTIMIZE_OUTPUT_JAVA
-       OPTIMIZE_FOR_FORTRAN
-       OPTIMIZE_OUTPUT_VHDL
-       OPTIMIZE_OUTPUT_SLICE
-       EXTENSION_MAPPING
-       MARKDOWN_SUPPORT
-       TOC_INCLUDE_HEADINGS
-       AUTOLINK_SUPPORT
-       BUILTIN_STL_SUPPORT
-       CPP_CLI_SUPPORT
-       SIP_SUPPORT
-       IDL_PROPERTY_SUPPORT
-       DISTRIBUTE_GROUP_DOC
-       GROUP_NESTED_COMPOUNDS
-       SUBGROUPING
-       INLINE_GROUPED_CLASSES
-       INLINE_SIMPLE_STRUCTS
-       TYPEDEF_HIDES_STRUCT
-       LOOKUP_CACHE_SIZE
-       #---------------------------------------------------------------------------
-       # Build related configuration options
-       #---------------------------------------------------------------------------
-       EXTRACT_ALL
-       EXTRACT_PRIVATE
-       EXTRACT_PRIV_VIRTUAL
-       EXTRACT_PACKAGE
-       EXTRACT_STATIC
-       EXTRACT_LOCAL_CLASSES
-       EXTRACT_LOCAL_METHODS
-       EXTRACT_ANON_NSPACES
-       HIDE_UNDOC_MEMBERS
-       HIDE_UNDOC_CLASSES
-       HIDE_FRIEND_COMPOUNDS
-       HIDE_IN_BODY_DOCS
-       INTERNAL_DOCS
-       CASE_SENSE_NAMES
-       HIDE_SCOPE_NAMES
-       HIDE_COMPOUND_REFERENCE=
-       SHOW_INCLUDE_FILES
-       SHOW_GROUPED_MEMB_INC
-       FORCE_LOCAL_INCLUDES
-       INLINE_INFO
-       SORT_MEMBER_DOCS
-       SORT_BRIEF_DOCS
-       SORT_MEMBERS_CTORS_1ST
-       SORT_GROUP_NAMES
-       SORT_BY_SCOPE_NAME
-       STRICT_PROTO_MATCHING
-       GENERATE_TODOLIST
-       GENERATE_TESTLIST
-       GENERATE_BUGLIST
-       GENERATE_DEPRECATEDLIST=
-       ENABLED_SECTIONS
-       MAX_INITIALIZER_LINES
-       SHOW_USED_FILES
-       SHOW_FILES
-       SHOW_NAMESPACES
-       FILE_VERSION_FILTER
-       LAYOUT_FILE
-       CITE_BIB_FILES
-       #---------------------------------------------------------------------------
-       # Configuration options related to warning and progress messages
-       #---------------------------------------------------------------------------
-       QUIET
-       WARNINGS
-       WARN_IF_UNDOCUMENTED
-       WARN_IF_DOC_ERROR
-       WARN_NO_PARAMDOC
-       WARN_AS_ERROR
-       WARN_FORMAT
-       WARN_LOGFILE
-       #---------------------------------------------------------------------------
-       # Configuration options related to the input files
-       #---------------------------------------------------------------------------
-       INPUT
-       INPUT_ENCODING
-       FILE_PATTERNS
-       RECURSIVE
-       EXCLUDE
-       EXCLUDE_SYMLINKS
-       EXCLUDE_PATTERNS
-       EXCLUDE_SYMBOLS
-       EXAMPLE_PATH
-       EXAMPLE_PATTERNS
-       EXAMPLE_RECURSIVE
-       IMAGE_PATH
-       INPUT_FILTER
-       FILTER_PATTERNS
-       FILTER_SOURCE_FILES
-       FILTER_SOURCE_PATTERNS
-       USE_MDFILE_AS_MAINPAGE
-       #---------------------------------------------------------------------------
-       # Configuration options related to source browsing
-       #---------------------------------------------------------------------------
-       SOURCE_BROWSER
-       INLINE_SOURCES
-       STRIP_CODE_COMMENTS
-       REFERENCED_BY_RELATION
-       REFERENCES_RELATION
-       REFERENCES_LINK_SOURCE
-       SOURCE_TOOLTIPS
-       USE_HTAGS
-       VERBATIM_HEADERS
-       #---------------------------------------------------------------------------
-       # Configuration options related to the alphabetical class index
-       #---------------------------------------------------------------------------
-       ALPHABETICAL_INDEX
-       COLS_IN_ALPHA_INDEX
-       IGNORE_PREFIX
-       #---------------------------------------------------------------------------
-       # Configuration options related to the HTML output
-       #---------------------------------------------------------------------------
-       GENERATE_HTML
-       HTML_OUTPUT
-       HTML_FILE_EXTENSION
-       HTML_HEADER
-       HTML_FOOTER
-       HTML_STYLESHEET
-       HTML_EXTRA_STYLESHEET
-       HTML_EXTRA_FILES
-       HTML_COLORSTYLE_HUE
-       HTML_COLORSTYLE_SAT
-       HTML_COLORSTYLE_GAMMA
-       HTML_TIMESTAMP
-       HTML_DYNAMIC_MENUS
-       HTML_DYNAMIC_SECTIONS
-       HTML_INDEX_NUM_ENTRIES
-       GENERATE_DOCSET
-       DOCSET_FEEDNAME
-       DOCSET_BUNDLE_ID
-       DOCSET_PUBLISHER_ID
-       DOCSET_PUBLISHER_NAME
-       GENERATE_HTMLHELP
-       CHM_FILE
-       HHC_LOCATION
-       GENERATE_CHI
-       CHM_INDEX_ENCODING
-       BINARY_TOC
-       TOC_EXPAND
-       GENERATE_QHP
-       QCH_FILE
-       QHP_NAMESPACE
-       QHP_VIRTUAL_FOLDER
-       QHP_CUST_FILTER_NAME
-       QHP_CUST_FILTER_ATTRS
-       QHP_SECT_FILTER_ATTRS
-       QHG_LOCATION
-       GENERATE_ECLIPSEHELP
-       ECLIPSE_DOC_ID
-       DISABLE_INDEX
-       GENERATE_TREEVIEW
-       ENUM_VALUES_PER_LINE
-       TREEVIEW_WIDTH
-       EXT_LINKS_IN_WINDOW
-       HTML_FORMULA_FORMAT
-       FORMULA_FONTSIZE
-       FORMULA_TRANSPARENT
-       FORMULA_MACROFILE
-       USE_MATHJAX
-       MATHJAX_FORMAT
-       MATHJAX_RELPATH
-       MATHJAX_EXTENSIONS
-       MATHJAX_CODEFILE
-       SEARCHENGINE
-       SERVER_BASED_SEARCH
-       EXTERNAL_SEARCH
-       SEARCHENGINE_URL
-       SEARCHDATA_FILE
-       EXTERNAL_SEARCH_ID
-       EXTRA_SEARCH_MAPPINGS
-       #---------------------------------------------------------------------------
-       # Configuration options related to the LaTeX output
-       #---------------------------------------------------------------------------
-       GENERATE_LATEX
-       LATEX_OUTPUT
-       LATEX_CMD_NAME
-       MAKEINDEX_CMD_NAME
-       LATEX_MAKEINDEX_CMD
-       COMPACT_LATEX
-       PAPER_TYPE
-       EXTRA_PACKAGES
-       LATEX_HEADER
-       LATEX_FOOTER
-       LATEX_EXTRA_STYLESHEET
-       LATEX_EXTRA_FILES
-       PDF_HYPERLINKS
-       USE_PDFLATEX
-       LATEX_BATCHMODE
-       LATEX_HIDE_INDICES
-       LATEX_SOURCE_CODE
-       LATEX_BIB_STYLE
-       LATEX_TIMESTAMP
-       LATEX_EMOJI_DIRECTORY
-       #---------------------------------------------------------------------------
-       # Configuration options related to the RTF output
-       #---------------------------------------------------------------------------
-       GENERATE_RTF
-       RTF_OUTPUT
-       COMPACT_RTF
-       RTF_HYPERLINKS
-       RTF_STYLESHEET_FILE
-       RTF_EXTENSIONS_FILE
-       RTF_SOURCE_CODE
-       #---------------------------------------------------------------------------
-       # Configuration options related to the man page output
-       #---------------------------------------------------------------------------
-       GENERATE_MAN
-       MAN_OUTPUT
-       MAN_EXTENSION
-       MAN_SUBDIR
-       MAN_LINKS
-       #---------------------------------------------------------------------------
-       # Configuration options related to the XML output
-       #---------------------------------------------------------------------------
-       GENERATE_XML
-       XML_OUTPUT
-       XML_PROGRAMLISTING
-       XML_NS_MEMB_FILE_SCOPE
-       #---------------------------------------------------------------------------
-       # Configuration options related to the DOCBOOK output
-       #---------------------------------------------------------------------------
-       GENERATE_DOCBOOK
-       DOCBOOK_OUTPUT
-       DOCBOOK_PROGRAMLISTING
-       #---------------------------------------------------------------------------
-       # Configuration options for the AutoGen Definitions output
-       #---------------------------------------------------------------------------
-       GENERATE_AUTOGEN_DEF
-       #---------------------------------------------------------------------------
-       # Configuration options related to the Perl module output
-       #---------------------------------------------------------------------------
-       GENERATE_PERLMOD
-       PERLMOD_LATEX
-       PERLMOD_PRETTY
-       PERLMOD_MAKEVAR_PREFIX
-       #---------------------------------------------------------------------------
-       # Configuration options related to the preprocessor
-       #---------------------------------------------------------------------------
-       ENABLE_PREPROCESSING
-       MACRO_EXPANSION
-       EXPAND_ONLY_PREDEF
-       SEARCH_INCLUDES
-       INCLUDE_PATH
-       INCLUDE_FILE_PATTERNS
-       PREDEFINED
-       EXPAND_AS_DEFINED
-       SKIP_FUNCTION_MACROS
-       #---------------------------------------------------------------------------
-       # Configuration options related to external references
-       #---------------------------------------------------------------------------
-       TAGFILES
-       GENERATE_TAGFILE
-       ALLEXTERNALS
-       EXTERNAL_GROUPS
-       EXTERNAL_PAGES
-       #---------------------------------------------------------------------------
-       # Configuration options related to the dot tool
-       #---------------------------------------------------------------------------
-       CLASS_DIAGRAMS
-       DIA_PATH
-       HIDE_UNDOC_RELATIONS
-       HAVE_DOT
-       DOT_NUM_THREADS
-       DOT_FONTNAME
-       DOT_FONTSIZE
-       DOT_FONTPATH
-       CLASS_GRAPH
-       COLLABORATION_GRAPH
-       GROUP_GRAPHS
-       UML_LOOK
-       UML_LIMIT_NUM_FIELDS
-       TEMPLATE_RELATIONS
-       INCLUDE_GRAPH
-       INCLUDED_BY_GRAPH
-       CALL_GRAPH
-       CALLER_GRAPH
-       GRAPHICAL_HIERARCHY
-       DIRECTORY_GRAPH
-       DOT_IMAGE_FORMAT
-       INTERACTIVE_SVG
-       DOT_PATH
-       DOTFILE_DIRS
-       MSCFILE_DIRS
-       DIAFILE_DIRS
-       PLANTUML_JAR_PATH
-       PLANTUML_CFG_FILE
-       PLANTUML_INCLUDE_PATH
-       DOT_GRAPH_MAX_NODES
-       MAX_DOT_GRAPH_DEPTH
-       DOT_TRANSPARENT
-       DOT_MULTI_TARGETS
-       GENERATE_LEGEND
-       DOT_CLEANUP
-      )
-    IF(DEFINED DOXYGEN_${option})
+  foreach(
+    option
+    # This list was generated using doxygen -s -g Doxyfile.tmp awk -f
+    # doxyfile.awk doxygen Doxyfile 1.8.18
+    # ---------------------------------------------------------------------------
+    # Project related configuration options
+    # ---------------------------------------------------------------------------
+    DOXYFILE_ENCODING
+    PROJECT_NAME
+    PROJECT_NUMBER
+    PROJECT_BRIEF
+    PROJECT_LOGO
+    OUTPUT_DIRECTORY
+    CREATE_SUBDIRS
+    ALLOW_UNICODE_NAMES
+    OUTPUT_LANGUAGE
+    OUTPUT_TEXT_DIRECTION
+    BRIEF_MEMBER_DESC
+    REPEAT_BRIEF
+    ABBREVIATE_BRIEF
+    ALWAYS_DETAILED_SEC
+    INLINE_INHERITED_MEMB
+    FULL_PATH_NAMES
+    STRIP_FROM_PATH
+    STRIP_FROM_INC_PATH
+    SHORT_NAMES
+    JAVADOC_AUTOBRIEF
+    JAVADOC_BANNER
+    QT_AUTOBRIEF
+    MULTILINE_CPP_IS_BRIEF
+    INHERIT_DOCS
+    SEPARATE_MEMBER_PAGES
+    TAB_SIZE
+    ALIASES
+    TCL_SUBST
+    OPTIMIZE_OUTPUT_FOR_C
+    OPTIMIZE_OUTPUT_JAVA
+    OPTIMIZE_FOR_FORTRAN
+    OPTIMIZE_OUTPUT_VHDL
+    OPTIMIZE_OUTPUT_SLICE
+    EXTENSION_MAPPING
+    MARKDOWN_SUPPORT
+    TOC_INCLUDE_HEADINGS
+    AUTOLINK_SUPPORT
+    BUILTIN_STL_SUPPORT
+    CPP_CLI_SUPPORT
+    SIP_SUPPORT
+    IDL_PROPERTY_SUPPORT
+    DISTRIBUTE_GROUP_DOC
+    GROUP_NESTED_COMPOUNDS
+    SUBGROUPING
+    INLINE_GROUPED_CLASSES
+    INLINE_SIMPLE_STRUCTS
+    TYPEDEF_HIDES_STRUCT
+    LOOKUP_CACHE_SIZE
+    # ---------------------------------------------------------------------------
+    # Build related configuration options
+    # ---------------------------------------------------------------------------
+    EXTRACT_ALL
+    EXTRACT_PRIVATE
+    EXTRACT_PRIV_VIRTUAL
+    EXTRACT_PACKAGE
+    EXTRACT_STATIC
+    EXTRACT_LOCAL_CLASSES
+    EXTRACT_LOCAL_METHODS
+    EXTRACT_ANON_NSPACES
+    HIDE_UNDOC_MEMBERS
+    HIDE_UNDOC_CLASSES
+    HIDE_FRIEND_COMPOUNDS
+    HIDE_IN_BODY_DOCS
+    INTERNAL_DOCS
+    CASE_SENSE_NAMES
+    HIDE_SCOPE_NAMES
+    HIDE_COMPOUND_REFERENCE=
+    SHOW_INCLUDE_FILES
+    SHOW_GROUPED_MEMB_INC
+    FORCE_LOCAL_INCLUDES
+    INLINE_INFO
+    SORT_MEMBER_DOCS
+    SORT_BRIEF_DOCS
+    SORT_MEMBERS_CTORS_1ST
+    SORT_GROUP_NAMES
+    SORT_BY_SCOPE_NAME
+    STRICT_PROTO_MATCHING
+    GENERATE_TODOLIST
+    GENERATE_TESTLIST
+    GENERATE_BUGLIST
+    GENERATE_DEPRECATEDLIST=
+    ENABLED_SECTIONS
+    MAX_INITIALIZER_LINES
+    SHOW_USED_FILES
+    SHOW_FILES
+    SHOW_NAMESPACES
+    FILE_VERSION_FILTER
+    LAYOUT_FILE
+    CITE_BIB_FILES
+    # ---------------------------------------------------------------------------
+    # Configuration options related to warning and progress messages
+    # ---------------------------------------------------------------------------
+    QUIET
+    WARNINGS
+    WARN_IF_UNDOCUMENTED
+    WARN_IF_DOC_ERROR
+    WARN_NO_PARAMDOC
+    WARN_AS_ERROR
+    WARN_FORMAT
+    WARN_LOGFILE
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the input files
+    # ---------------------------------------------------------------------------
+    INPUT
+    INPUT_ENCODING
+    FILE_PATTERNS
+    RECURSIVE
+    EXCLUDE
+    EXCLUDE_SYMLINKS
+    EXCLUDE_PATTERNS
+    EXCLUDE_SYMBOLS
+    EXAMPLE_PATH
+    EXAMPLE_PATTERNS
+    EXAMPLE_RECURSIVE
+    IMAGE_PATH
+    INPUT_FILTER
+    FILTER_PATTERNS
+    FILTER_SOURCE_FILES
+    FILTER_SOURCE_PATTERNS
+    USE_MDFILE_AS_MAINPAGE
+    # ---------------------------------------------------------------------------
+    # Configuration options related to source browsing
+    # ---------------------------------------------------------------------------
+    SOURCE_BROWSER
+    INLINE_SOURCES
+    STRIP_CODE_COMMENTS
+    REFERENCED_BY_RELATION
+    REFERENCES_RELATION
+    REFERENCES_LINK_SOURCE
+    SOURCE_TOOLTIPS
+    USE_HTAGS
+    VERBATIM_HEADERS
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the alphabetical class index
+    # ---------------------------------------------------------------------------
+    ALPHABETICAL_INDEX
+    COLS_IN_ALPHA_INDEX
+    IGNORE_PREFIX
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the HTML output
+    # ---------------------------------------------------------------------------
+    GENERATE_HTML
+    HTML_OUTPUT
+    HTML_FILE_EXTENSION
+    HTML_HEADER
+    HTML_FOOTER
+    HTML_STYLESHEET
+    HTML_EXTRA_STYLESHEET
+    HTML_EXTRA_FILES
+    HTML_COLORSTYLE_HUE
+    HTML_COLORSTYLE_SAT
+    HTML_COLORSTYLE_GAMMA
+    HTML_TIMESTAMP
+    HTML_DYNAMIC_MENUS
+    HTML_DYNAMIC_SECTIONS
+    HTML_INDEX_NUM_ENTRIES
+    GENERATE_DOCSET
+    DOCSET_FEEDNAME
+    DOCSET_BUNDLE_ID
+    DOCSET_PUBLISHER_ID
+    DOCSET_PUBLISHER_NAME
+    GENERATE_HTMLHELP
+    CHM_FILE
+    HHC_LOCATION
+    GENERATE_CHI
+    CHM_INDEX_ENCODING
+    BINARY_TOC
+    TOC_EXPAND
+    GENERATE_QHP
+    QCH_FILE
+    QHP_NAMESPACE
+    QHP_VIRTUAL_FOLDER
+    QHP_CUST_FILTER_NAME
+    QHP_CUST_FILTER_ATTRS
+    QHP_SECT_FILTER_ATTRS
+    QHG_LOCATION
+    GENERATE_ECLIPSEHELP
+    ECLIPSE_DOC_ID
+    DISABLE_INDEX
+    GENERATE_TREEVIEW
+    ENUM_VALUES_PER_LINE
+    TREEVIEW_WIDTH
+    EXT_LINKS_IN_WINDOW
+    HTML_FORMULA_FORMAT
+    FORMULA_FONTSIZE
+    FORMULA_TRANSPARENT
+    FORMULA_MACROFILE
+    USE_MATHJAX
+    MATHJAX_FORMAT
+    MATHJAX_RELPATH
+    MATHJAX_EXTENSIONS
+    MATHJAX_CODEFILE
+    SEARCHENGINE
+    SERVER_BASED_SEARCH
+    EXTERNAL_SEARCH
+    SEARCHENGINE_URL
+    SEARCHDATA_FILE
+    EXTERNAL_SEARCH_ID
+    EXTRA_SEARCH_MAPPINGS
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the LaTeX output
+    # ---------------------------------------------------------------------------
+    GENERATE_LATEX
+    LATEX_OUTPUT
+    LATEX_CMD_NAME
+    MAKEINDEX_CMD_NAME
+    LATEX_MAKEINDEX_CMD
+    COMPACT_LATEX
+    PAPER_TYPE
+    EXTRA_PACKAGES
+    LATEX_HEADER
+    LATEX_FOOTER
+    LATEX_EXTRA_STYLESHEET
+    LATEX_EXTRA_FILES
+    PDF_HYPERLINKS
+    USE_PDFLATEX
+    LATEX_BATCHMODE
+    LATEX_HIDE_INDICES
+    LATEX_SOURCE_CODE
+    LATEX_BIB_STYLE
+    LATEX_TIMESTAMP
+    LATEX_EMOJI_DIRECTORY
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the RTF output
+    # ---------------------------------------------------------------------------
+    GENERATE_RTF
+    RTF_OUTPUT
+    COMPACT_RTF
+    RTF_HYPERLINKS
+    RTF_STYLESHEET_FILE
+    RTF_EXTENSIONS_FILE
+    RTF_SOURCE_CODE
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the man page output
+    # ---------------------------------------------------------------------------
+    GENERATE_MAN
+    MAN_OUTPUT
+    MAN_EXTENSION
+    MAN_SUBDIR
+    MAN_LINKS
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the XML output
+    # ---------------------------------------------------------------------------
+    GENERATE_XML
+    XML_OUTPUT
+    XML_PROGRAMLISTING
+    XML_NS_MEMB_FILE_SCOPE
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the DOCBOOK output
+    # ---------------------------------------------------------------------------
+    GENERATE_DOCBOOK
+    DOCBOOK_OUTPUT
+    DOCBOOK_PROGRAMLISTING
+    # ---------------------------------------------------------------------------
+    # Configuration options for the AutoGen Definitions output
+    # ---------------------------------------------------------------------------
+    GENERATE_AUTOGEN_DEF
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the Perl module output
+    # ---------------------------------------------------------------------------
+    GENERATE_PERLMOD
+    PERLMOD_LATEX
+    PERLMOD_PRETTY
+    PERLMOD_MAKEVAR_PREFIX
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the preprocessor
+    # ---------------------------------------------------------------------------
+    ENABLE_PREPROCESSING
+    MACRO_EXPANSION
+    EXPAND_ONLY_PREDEF
+    SEARCH_INCLUDES
+    INCLUDE_PATH
+    INCLUDE_FILE_PATTERNS
+    PREDEFINED
+    EXPAND_AS_DEFINED
+    SKIP_FUNCTION_MACROS
+    # ---------------------------------------------------------------------------
+    # Configuration options related to external references
+    # ---------------------------------------------------------------------------
+    TAGFILES
+    GENERATE_TAGFILE
+    ALLEXTERNALS
+    EXTERNAL_GROUPS
+    EXTERNAL_PAGES
+    # ---------------------------------------------------------------------------
+    # Configuration options related to the dot tool
+    # ---------------------------------------------------------------------------
+    CLASS_DIAGRAMS
+    DIA_PATH
+    HIDE_UNDOC_RELATIONS
+    HAVE_DOT
+    DOT_NUM_THREADS
+    DOT_FONTNAME
+    DOT_FONTSIZE
+    DOT_FONTPATH
+    CLASS_GRAPH
+    COLLABORATION_GRAPH
+    GROUP_GRAPHS
+    UML_LOOK
+    UML_LIMIT_NUM_FIELDS
+    TEMPLATE_RELATIONS
+    INCLUDE_GRAPH
+    INCLUDED_BY_GRAPH
+    CALL_GRAPH
+    CALLER_GRAPH
+    GRAPHICAL_HIERARCHY
+    DIRECTORY_GRAPH
+    DOT_IMAGE_FORMAT
+    INTERACTIVE_SVG
+    DOT_PATH
+    DOTFILE_DIRS
+    MSCFILE_DIRS
+    DIAFILE_DIRS
+    PLANTUML_JAR_PATH
+    PLANTUML_CFG_FILE
+    PLANTUML_INCLUDE_PATH
+    DOT_GRAPH_MAX_NODES
+    MAX_DOT_GRAPH_DEPTH
+    DOT_TRANSPARENT
+    DOT_MULTI_TARGETS
+    GENERATE_LEGEND
+    DOT_CLEANUP)
+    if(DEFINED DOXYGEN_${option})
       file(APPEND ${configfile} "${option} = ${DOXYGEN_${option}}\n")
-    ENDIF()
-  ENDFOREACH()
-ENDMACRO(_SETUP_DOXYGEN_CONFIG_FILE)
+    endif()
+  endforeach()
+endmacro(_SETUP_DOXYGEN_CONFIG_FILE)
 
 macro(_set_if_undefined variable)
   if(NOT DEFINED ${variable})
@@ -400,190 +396,196 @@ endmacro()
 #
 # Set default options for doxygen configuration when the user didn't specify
 # those options already.
-MACRO(_SETUP_DOXYGEN_DEFAULT_OPTIONS)
-  #---------------------------------------------------------------------------
+macro(_SETUP_DOXYGEN_DEFAULT_OPTIONS)
+  # ---------------------------------------------------------------------------
   # Project related configuration options
-  #---------------------------------------------------------------------------
-  _set_if_undefined(DOXYGEN_PROJECT_NAME         "${PROJECT_NAME}")
-  _set_if_undefined(DOXYGEN_PROJECT_NUMBER       "${PROJECT_VERSION}")
-  _set_if_undefined(DOXYGEN_PROJECT_BRIEF        "\"${PROJECT_DESCRIPTION}\"")
-  _set_if_undefined(DOXYGEN_STRIP_FROM_PATH      "${PROJECT_SOURCE_DIR}")
-  _set_if_undefined(DOXYGEN_STRIP_FROM_INC_PATH  "${PROJECT_SOURCE_DIR}/src ${PROJECT_SOURCE_DIR}/include")
-  _set_if_undefined(DOXYGEN_EXTRACT_ALL          "YES")
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
+  _set_if_undefined(DOXYGEN_PROJECT_NAME "${PROJECT_NAME}")
+  _set_if_undefined(DOXYGEN_PROJECT_NUMBER "${PROJECT_VERSION}")
+  _set_if_undefined(DOXYGEN_PROJECT_BRIEF "\"${PROJECT_DESCRIPTION}\"")
+  _set_if_undefined(DOXYGEN_STRIP_FROM_PATH "${PROJECT_SOURCE_DIR}")
+  _set_if_undefined(DOXYGEN_STRIP_FROM_INC_PATH
+                    "${PROJECT_SOURCE_DIR}/src ${PROJECT_SOURCE_DIR}/include")
+  _set_if_undefined(DOXYGEN_EXTRACT_ALL "YES")
+  # ---------------------------------------------------------------------------
   # Configuration options related to warning and progress messages
-  #---------------------------------------------------------------------------
-  _set_if_undefined(DOXYGEN_QUIET                YES)
-  _set_if_undefined(DOXYGEN_WARN_LOGFILE         doxygen.log)
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
+  _set_if_undefined(DOXYGEN_QUIET YES)
+  _set_if_undefined(DOXYGEN_WARN_LOGFILE doxygen.log)
+  # ---------------------------------------------------------------------------
   # Configuration options related to the input files
-  #---------------------------------------------------------------------------
-  _set_if_undefined(DOXYGEN_IMAGE_PATH           "${PROJECT_SOURCE_DIR}/doc")
-  _set_if_undefined(DOXYGEN_FILE_PATTERNS        "*.cc *.cpp *.h *.hh *.hpp *.hxx *.idl")
-  _set_if_undefined(DOXYGEN_RECURSIVE            YES)
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
+  _set_if_undefined(DOXYGEN_IMAGE_PATH "${PROJECT_SOURCE_DIR}/doc")
+  _set_if_undefined(DOXYGEN_FILE_PATTERNS
+                    "*.cc *.cpp *.h *.hh *.hpp *.hxx *.idl")
+  _set_if_undefined(DOXYGEN_RECURSIVE YES)
+  # ---------------------------------------------------------------------------
   # Configuration options related to source browsing
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to the alphabetical class index
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to the HTML output
-  #---------------------------------------------------------------------------
-  _set_if_undefined(DOXYGEN_HTML_OUTPUT          doxygen-html)
-  _set_if_undefined(DOXYGEN_GENERATE_TREEVIEW    YES)
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
+  _set_if_undefined(DOXYGEN_HTML_OUTPUT doxygen-html)
+  _set_if_undefined(DOXYGEN_GENERATE_TREEVIEW YES)
+  # ---------------------------------------------------------------------------
   # Configuration options related to the LaTeX output
-  #---------------------------------------------------------------------------
-  _set_if_undefined(DOXYGEN_GENERATE_LATEX       NO)
-  _set_if_undefined(DOXYGEN_LATEX_OUTPUT         doxygen-latex)
-  _set_if_undefined(DOXYGEN_EXTRA_PACKAGES       "amssymb,amsmath")
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
+  _set_if_undefined(DOXYGEN_GENERATE_LATEX NO)
+  _set_if_undefined(DOXYGEN_LATEX_OUTPUT doxygen-latex)
+  _set_if_undefined(DOXYGEN_EXTRA_PACKAGES "amssymb,amsmath")
+  # ---------------------------------------------------------------------------
   # Configuration options related to the RTF output
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to the man page output
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to the XML output
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to the DOCBOOK output
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options for the AutoGen Definitions output
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to the Perl module output
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to the preprocessor
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
   # Configuration options related to external references
-  #---------------------------------------------------------------------------
-  _set_if_undefined(DOXYGEN_GENERATE_TAGFILE     "${PROJECT_NAME}.doxytag")
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
+  _set_if_undefined(DOXYGEN_GENERATE_TAGFILE "${PROJECT_NAME}.doxytag")
+  # ---------------------------------------------------------------------------
   # Configuration options related to the dot tool
-  #---------------------------------------------------------------------------
+  # ---------------------------------------------------------------------------
 
-ENDMACRO(_SETUP_DOXYGEN_DEFAULT_OPTIONS)
+endmacro(_SETUP_DOXYGEN_DEFAULT_OPTIONS)
 
 # _SETUP_PROJECT_DOCUMENTATION
 # ----------------------------
 #
-# Look for Doxygen, add a custom rule to generate the documentation
-# and install the documentation properly.
+# Look for Doxygen, add a custom rule to generate the documentation and install
+# the documentation properly.
 #
 # Available user options (to be set before calling SETUP_PROJECT):
-#   DOXYGEN_DOT_IMAGE_FORMAT: format for dot images. Defaults to "svg".
-#   DOXYGEN_USE_MATHJAX: use MathJax to render LaTeX equations. Defaults to "NO".
-MACRO(_SETUP_PROJECT_DOCUMENTATION)
+# DOXYGEN_DOT_IMAGE_FORMAT: format for dot images. Defaults to "svg".
+# DOXYGEN_USE_MATHJAX: use MathJax to render LaTeX equations. Defaults to "NO".
+macro(_SETUP_PROJECT_DOCUMENTATION)
 
   # Search for Doxygen.
-  FIND_PACKAGE(Doxygen)
-
-  IF(NOT DOXYGEN_FOUND)
-    MESSAGE(WARNING "Failed to find Doxygen, documentation will not be generated.")
-  ELSE(NOT DOXYGEN_FOUND)
-    _SETUP_DOXYGEN_DEFAULT_OPTIONS()
-    # Generate variable to be substitued in Doxyfile.in
-    # for dot use.
-    IF(DOXYGEN_DOT_FOUND)
-      SET(DOXYGEN_HAVE_DOT YES)
-    ENDIF(DOXYGEN_DOT_FOUND)
+  find_package(Doxygen)
+
+  if(NOT DOXYGEN_FOUND)
+    message(
+      WARNING "Failed to find Doxygen, documentation will not be generated.")
+  else(NOT DOXYGEN_FOUND)
+    _setup_doxygen_default_options()
+    # Generate variable to be substitued in Doxyfile.in for dot use.
+    if(DOXYGEN_DOT_FOUND)
+      set(DOXYGEN_HAVE_DOT YES)
+    endif(DOXYGEN_DOT_FOUND)
 
     # Teach CMake how to generate the documentation.
-    IF(MSVC)
-      # FIXME: it is impossible to trigger documentation installation
-      # at install, so put the target in ALL instead.
-      ADD_CUSTOM_TARGET(doc ALL
+    if(MSVC)
+      # FIXME: it is impossible to trigger documentation installation at
+      # install, so put the target in ALL instead.
+      add_custom_target(
+        doc ALL
         COMMAND ${DOXYGEN_EXECUTABLE} Doxyfile
         WORKING_DIRECTORY doc
-        COMMENT "Generating Doxygen documentation"
-        )
-    ELSE(MSVC)
-      ADD_CUSTOM_TARGET(doc
+        COMMENT "Generating Doxygen documentation")
+    else(MSVC)
+      add_custom_target(
+        doc
         COMMAND ${DOXYGEN_EXECUTABLE} Doxyfile
         WORKING_DIRECTORY doc
-        COMMENT "Generating Doxygen documentation"
-        )
-
-      IF(INSTALL_DOCUMENTATION)
-        INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} doc)")
-      ENDIF(INSTALL_DOCUMENTATION)
-    ENDIF(MSVC)
-
-    IF (DOXYGEN_USE_TEMPLATE_CSS)
-      ADD_CUSTOM_TARGET(generate-template-css
-        COMMAND ${DOXYGEN_EXECUTABLE} -w html
-        ${CMAKE_CURRENT_BINARY_DIR}/doc/header.html
-        ${CMAKE_CURRENT_BINARY_DIR}/doc/footer.html
-        ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.css
-        BYPRODUCTS
-        ${CMAKE_CURRENT_BINARY_DIR}/doc/header.html
-        ${CMAKE_CURRENT_BINARY_DIR}/doc/footer.html
-        ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.css
-        )
-      ADD_DEPENDENCIES(doc generate-template-css)
-      _set_if_undefined(DOXYGEN_HTML_HEADER     "${CMAKE_CURRENT_BINARY_DIR}/doc/header.html")
-      _set_if_undefined(DOXYGEN_HTML_FOOTER     "${CMAKE_CURRENT_BINARY_DIR}/doc/footer.html")
-      _set_if_undefined(DOXYGEN_HTML_STYLESHEET "${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.css")
-    ELSE (DOXYGEN_USE_TEMPLATE_CSS)
-      _set_if_undefined(DOXYGEN_HTML_FOOTER     "${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/footer.html")
-      _set_if_undefined(DOXYGEN_HTML_STYLESHEET "${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/doxygen.css")
-    ENDIF (DOXYGEN_USE_TEMPLATE_CSS)
-
-    ADD_CUSTOM_COMMAND(
-      OUTPUT
-      ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag
-      ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen-html
+        COMMENT "Generating Doxygen documentation")
+
+      if(INSTALL_DOCUMENTATION)
+        install(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} doc)")
+      endif(INSTALL_DOCUMENTATION)
+    endif(MSVC)
+
+    if(DOXYGEN_USE_TEMPLATE_CSS)
+      add_custom_target(
+        generate-template-css
+        COMMAND
+          ${DOXYGEN_EXECUTABLE} -w html
+          ${CMAKE_CURRENT_BINARY_DIR}/doc/header.html
+          ${CMAKE_CURRENT_BINARY_DIR}/doc/footer.html
+          ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.css
+        BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/doc/header.html
+                   ${CMAKE_CURRENT_BINARY_DIR}/doc/footer.html
+                   ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.css)
+      add_dependencies(doc generate-template-css)
+      _set_if_undefined(DOXYGEN_HTML_HEADER
+                        "${CMAKE_CURRENT_BINARY_DIR}/doc/header.html")
+      _set_if_undefined(DOXYGEN_HTML_FOOTER
+                        "${CMAKE_CURRENT_BINARY_DIR}/doc/footer.html")
+      _set_if_undefined(DOXYGEN_HTML_STYLESHEET
+                        "${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.css")
+    else(DOXYGEN_USE_TEMPLATE_CSS)
+      _set_if_undefined(DOXYGEN_HTML_FOOTER
+                        "${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/footer.html")
+      _set_if_undefined(DOXYGEN_HTML_STYLESHEET
+                        "${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/doxygen.css")
+    endif(DOXYGEN_USE_TEMPLATE_CSS)
+
+    add_custom_command(
+      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag
+             ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen-html
       COMMAND ${DOXYGEN_EXECUTABLE} Doxyfile
       WORKING_DIRECTORY doc
-      COMMENT "Generating Doxygen documentation"
-      )
+      COMMENT "Generating Doxygen documentation")
 
     # Clean generated files.
-    SET_PROPERTY(
-      DIRECTORY APPEND PROPERTY
-      ADDITIONAL_MAKE_CLEAN_FILES
-      ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag
-      ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.log
-      ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen-html
-      )
+    set_property(
+      DIRECTORY
+      APPEND
+      PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
+               ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag
+               ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen.log
+               ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen-html)
 
     # Install MathJax minimal version.
-    IF("${DOXYGEN_USE_MATHJAX}" STREQUAL "YES")
-      FILE(COPY ${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/MathJax
+    if("${DOXYGEN_USE_MATHJAX}" STREQUAL "YES")
+      file(COPY ${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/MathJax
            DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen-html)
-    ENDIF()
+    endif()
 
     # Install generated files.
-    IF(INSTALL_DOCUMENTATION)
-      IF(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag)
-        INSTALL(
-          FILES ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag
-          DESTINATION ${CMAKE_INSTALL_DOCDIR}/doxygen-html)
-      ENDIF()
-      INSTALL(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen-html
-        DESTINATION ${CMAKE_INSTALL_DOCDIR})
-
-      IF(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
-        INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/pictures
-          DESTINATION ${CMAKE_INSTALL_DOCDIR}/doxygen-html)
-      ENDIF(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
-    ENDIF(INSTALL_DOCUMENTATION)
-
-    LIST(APPEND LOGGING_WATCHED_VARIABLES
+    if(INSTALL_DOCUMENTATION)
+      if(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag)
+        install(FILES ${CMAKE_CURRENT_BINARY_DIR}/doc/${PROJECT_NAME}.doxytag
+                DESTINATION ${CMAKE_INSTALL_DOCDIR}/doxygen-html)
+      endif()
+      install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/doxygen-html
+              DESTINATION ${CMAKE_INSTALL_DOCDIR})
+
+      if(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
+        install(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/pictures
+                DESTINATION ${CMAKE_INSTALL_DOCDIR}/doxygen-html)
+      endif(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
+    endif(INSTALL_DOCUMENTATION)
+
+    list(
+      APPEND
+      LOGGING_WATCHED_VARIABLES
       DOXYGEN_SKIP_DOT
       DOXYGEN_EXECUTABLE
       DOXYGEN_FOUND
@@ -592,10 +594,9 @@ MACRO(_SETUP_PROJECT_DOCUMENTATION)
       DOXYGEN_DOT_PATH
       DOXYGEN_DOT_IMAGE_FORMAT
       DOXYGEN_USE_MATHJAX
-      DOXYGEN_USE_TEMPLATE_CSS
-      )
-  ENDIF(NOT DOXYGEN_FOUND)
-ENDMACRO(_SETUP_PROJECT_DOCUMENTATION)
+      DOXYGEN_USE_TEMPLATE_CSS)
+  endif(NOT DOXYGEN_FOUND)
+endmacro(_SETUP_PROJECT_DOCUMENTATION)
 
 # _DOXYTAG_ENTRIES_FROM_CMAKE_DEPENDENCIES
 # ----------------------------------------
@@ -603,99 +604,115 @@ ENDMACRO(_SETUP_PROJECT_DOCUMENTATION)
 # Generate TAGFILES entries from this project dependencies and their
 # dependencies (recursively)
 #
-MACRO(_DOXYTAG_ENTRIES_FROM_CMAKE_DEPENDENCIES DEPENDENCIES VAR_OUT)
-  FOREACH(PREFIX ${DEPENDENCIES})
-    IF( DEFINED ${PREFIX}_DOXYGENDOCDIR
-        AND EXISTS ${${PREFIX}_DOXYGENDOCDIR}/${PREFIX}.doxytag)
-      SET(${VAR_OUT} "${${VAR_OUT}} \"${${PREFIX}_DOXYGENDOCDIR}/${PREFIX}.doxytag = ${${PREFIX}_DOXYGENDOCDIR}\"")
-    ENDIF()
-    IF( DEFINED ${PREFIX}_DEPENDENCIES )
-      _DOXYTAG_ENTRIES_FROM_CMAKE_DEPENDENCIES("${${PREFIX}_DEPENDENCIES}" ${VAR_OUT})
-    ENDIF()
-  ENDFOREACH()
-ENDMACRO()
+macro(_DOXYTAG_ENTRIES_FROM_CMAKE_DEPENDENCIES DEPENDENCIES VAR_OUT)
+  foreach(PREFIX ${DEPENDENCIES})
+    if(DEFINED ${PREFIX}_DOXYGENDOCDIR
+       AND EXISTS ${${PREFIX}_DOXYGENDOCDIR}/${PREFIX}.doxytag)
+      set(${VAR_OUT}
+          "${${VAR_OUT}} \"${${PREFIX}_DOXYGENDOCDIR}/${PREFIX}.doxytag = ${${PREFIX}_DOXYGENDOCDIR}\""
+      )
+    endif()
+    if(DEFINED ${PREFIX}_DEPENDENCIES)
+      _doxytag_entries_from_cmake_dependencies("${${PREFIX}_DEPENDENCIES}"
+                                               ${VAR_OUT})
+    endif()
+  endforeach()
+endmacro()
 
 # _SETUP_PROJECT_DOCUMENTATION_FINALIZE
 # -------------------------------------
 #
 # Post-processing for the documentation generation macro.
 #
-# Doxyfile.extra and Doxyfile files are generated at the end to allow
-# the replacement of user-defined variables.
+# Doxyfile.extra and Doxyfile files are generated at the end to allow the
+# replacement of user-defined variables.
 #
-MACRO(_SETUP_PROJECT_DOCUMENTATION_FINALIZE)
-  IF(DOXYGEN_FOUND)
-    IF(NOT "${DOXYGEN_USE_MATHJAX}" STREQUAL "YES")
+macro(_SETUP_PROJECT_DOCUMENTATION_FINALIZE)
+  if(DOXYGEN_FOUND)
+    if(NOT "${DOXYGEN_USE_MATHJAX}" STREQUAL "YES")
       # Make sure latex, dvips and gs are available
-      FIND_PROGRAM(LATEX latex DOC "LaTeX compiler")
-      FIND_PROGRAM(DVIPS dvips DOC "DVI to PostScript converter")
-      FIND_PROGRAM(GS gs DOC "GhostScript interpreter")
-
-      IF(NOT (LATEX AND GS AND DVIPS))
-        MESSAGE(STATUS "Failed to find latex/dvips/gs, will use MathJax backend.")
-        SET(DOXYGEN_USE_MATHJAX "YES")
-      ENDIF()
-    ENDIF()
-
-    IF("${DOXYGEN_USE_MATHJAX}" STREQUAL "YES")
-      MESSAGE(STATUS "Doxygen rendering: using MathJax backend")
-      SET(DOXYGEN_HEADER_NAME "header-mathjax.html")
-    ELSE()
-      MESSAGE(STATUS "Doxygen rendering: using LaTeX backend")
-      SET(DOXYGEN_HEADER_NAME "header.html")
-    ENDIF()
-    _set_if_undefined (DOXYGEN_HTML_HEADER "${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/${DOXYGEN_HEADER_NAME}")
-
-    IF(INSTALL_DOCUMENTATION)
-      # Find doxytag files
-      # To ignore this list of tag files, set variable DOXYGEN_TAGFILES
-      SET(PKG_REQUIRES ${_PKG_CONFIG_REQUIRES})
-      LIST(APPEND PKG_REQUIRES ${_PKG_CONFIG_COMPILE_TIME_REQUIRES})
-      FOREACH(PKG_CONFIG_STRING ${PKG_REQUIRES})
-        _PARSE_PKG_CONFIG_STRING(${PKG_CONFIG_STRING} LIBRARY_NAME PREFIX PKG_CONFIG_STRING_NOSPACE)
+      find_program(LATEX latex DOC "LaTeX compiler")
+      find_program(DVIPS dvips DOC "DVI to PostScript converter")
+      find_program(GS gs DOC "GhostScript interpreter")
+
+      if(NOT
+         (LATEX
+          AND GS
+          AND DVIPS))
+        message(
+          STATUS "Failed to find latex/dvips/gs, will use MathJax backend.")
+        set(DOXYGEN_USE_MATHJAX "YES")
+      endif()
+    endif()
+
+    if("${DOXYGEN_USE_MATHJAX}" STREQUAL "YES")
+      message(STATUS "Doxygen rendering: using MathJax backend")
+      set(DOXYGEN_HEADER_NAME "header-mathjax.html")
+    else()
+      message(STATUS "Doxygen rendering: using LaTeX backend")
+      set(DOXYGEN_HEADER_NAME "header.html")
+    endif()
+    _set_if_undefined(
+      DOXYGEN_HTML_HEADER
+      "${PROJECT_JRL_CMAKE_MODULE_DIR}/doxygen/${DOXYGEN_HEADER_NAME}")
+
+    if(INSTALL_DOCUMENTATION)
+      # Find doxytag files To ignore this list of tag files, set variable
+      # DOXYGEN_TAGFILES
+      set(PKG_REQUIRES ${_PKG_CONFIG_REQUIRES})
+      list(APPEND PKG_REQUIRES ${_PKG_CONFIG_COMPILE_TIME_REQUIRES})
+      foreach(PKG_CONFIG_STRING ${PKG_REQUIRES})
+        _parse_pkg_config_string(${PKG_CONFIG_STRING} LIBRARY_NAME PREFIX
+                                 PKG_CONFIG_STRING_NOSPACE)
         # If DOXYGENDOCDIR is specified, add a doc path.
-        IF( DEFINED ${PREFIX}_DOXYGENDOCDIR
-            AND EXISTS ${${PREFIX}_DOXYGENDOCDIR}/${LIBRARY_NAME}.doxytag)
-          FILE(RELATIVE_PATH DEP_DOCDIR ${_PKG_CONFIG_DOXYGENDOCDIR} ${${PREFIX}_DOXYGENDOCDIR})
-
-          SET(DOXYGEN_TAGFILES_FROM_DEPENDENCIES "${DOXYGEN_TAGFILES_FROM_DEPENDENCIES} \"${${PREFIX}_DOXYGENDOCDIR}/${LIBRARY_NAME}.doxytag\"=\"${DEP_DOCDIR}\"")
-        ENDIF()
-      ENDFOREACH()
-      _DOXYTAG_ENTRIES_FROM_CMAKE_DEPENDENCIES("${_PACKAGE_CONFIG_DEPENDENCIES_PROJECTS}" DOXYGEN_TAGFILES_FROM_DEPENDENCIES)
-    ENDIF()
+        if(DEFINED ${PREFIX}_DOXYGENDOCDIR
+           AND EXISTS ${${PREFIX}_DOXYGENDOCDIR}/${LIBRARY_NAME}.doxytag)
+          file(RELATIVE_PATH DEP_DOCDIR ${_PKG_CONFIG_DOXYGENDOCDIR}
+               ${${PREFIX}_DOXYGENDOCDIR})
+
+          set(DOXYGEN_TAGFILES_FROM_DEPENDENCIES
+              "${DOXYGEN_TAGFILES_FROM_DEPENDENCIES} \"${${PREFIX}_DOXYGENDOCDIR}/${LIBRARY_NAME}.doxytag\"=\"${DEP_DOCDIR}\""
+          )
+        endif()
+      endforeach()
+      _doxytag_entries_from_cmake_dependencies(
+        "${_PACKAGE_CONFIG_DEPENDENCIES_PROJECTS}"
+        DOXYGEN_TAGFILES_FROM_DEPENDENCIES)
+    endif()
     _set_if_undefined(DOXYGEN_TAGFILES "${DOXYGEN_TAGFILES_FROM_DEPENDENCIES}")
 
-    IF(EXISTS ${PROJECT_SOURCE_DIR}/include)
-      SET (DOXYGEN_INCLUDE_PATH "${DOXYGEN_INCLUDE_PATH} \"${PROJECT_SOURCE_DIR}/include\"")
-      SET (DOXYGEN_INPUT "${DOXYGEN_INPUT} \"${PROJECT_SOURCE_DIR}/include\"")
-    ENDIF()
-    IF(EXISTS ${PROJECT_SOURCE_DIR}/src)
-      SET (DOXYGEN_INPUT "${DOXYGEN_INPUT} \"${PROJECT_SOURCE_DIR}/src\"")
-    ENDIF()
-    IF(EXISTS ${PROJECT_SOURCE_DIR}/tests)
-      SET (DOXYGEN_EXAMPLE_PATH "${DOXYGEN_EXAMPLE_PATH} \"${PROJECT_SOURCE_DIR}/tests\"")
-    ENDIF()
-    SET (DOXYGEN_INCLUDE_PATH "${DOXYGEN_INCLUDE_PATH} \"${CMAKE_BINARY_DIR}/include\"")
+    if(EXISTS ${PROJECT_SOURCE_DIR}/include)
+      set(DOXYGEN_INCLUDE_PATH
+          "${DOXYGEN_INCLUDE_PATH} \"${PROJECT_SOURCE_DIR}/include\"")
+      set(DOXYGEN_INPUT "${DOXYGEN_INPUT} \"${PROJECT_SOURCE_DIR}/include\"")
+    endif()
+    if(EXISTS ${PROJECT_SOURCE_DIR}/src)
+      set(DOXYGEN_INPUT "${DOXYGEN_INPUT} \"${PROJECT_SOURCE_DIR}/src\"")
+    endif()
+    if(EXISTS ${PROJECT_SOURCE_DIR}/tests)
+      set(DOXYGEN_EXAMPLE_PATH
+          "${DOXYGEN_EXAMPLE_PATH} \"${PROJECT_SOURCE_DIR}/tests\"")
+    endif()
+    set(DOXYGEN_INCLUDE_PATH
+        "${DOXYGEN_INCLUDE_PATH} \"${CMAKE_BINARY_DIR}/include\"")
 
     # Generate Doxyfile and Doxyfile.extra.
-    IF(EXISTS ${PROJECT_SOURCE_DIR}/doc/Doxyfile.extra.in)
-      CONFIGURE_FILE(
-        ${PROJECT_SOURCE_DIR}/doc/Doxyfile.extra.in
-        ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile.extra
-        @ONLY
-        )
+    if(EXISTS ${PROJECT_SOURCE_DIR}/doc/Doxyfile.extra.in)
+      configure_file(${PROJECT_SOURCE_DIR}/doc/Doxyfile.extra.in
+                     ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile.extra @ONLY)
       # Generate Doxyfile.
-      _SETUP_DOXYGEN_CONFIG_FILE("${CMAKE_BINARY_DIR}/doc/Doxyfile")
-      FILE(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile.extra doxyfile_extra)
-      FOREACH(x ${doxyfile_extra})
-        FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile ${x} "\n")
-      ENDFOREACH(x in doxyfile_extra)
-    ELSE()
+      _setup_doxygen_config_file("${CMAKE_BINARY_DIR}/doc/Doxyfile")
+      file(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile.extra
+           doxyfile_extra)
+      foreach(x ${doxyfile_extra})
+        file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile ${x} "\n")
+      endforeach(x in doxyfile_extra)
+    else()
       # This is kept for bacward compatibility. It was the only thing left in
       # doxygen/Doxyfile.extra.in
       set(DOXYGEN_IMAGE_PATH "${PROJECT_SOURCE_DIR}/doc/pictures")
       # Generate Doxyfile.
-      _SETUP_DOXYGEN_CONFIG_FILE("${CMAKE_BINARY_DIR}/doc/Doxyfile")
-    ENDIF()
-  ENDIF(DOXYGEN_FOUND)
-ENDMACRO(_SETUP_PROJECT_DOCUMENTATION_FINALIZE)
+      _setup_doxygen_config_file("${CMAKE_BINARY_DIR}/doc/Doxyfile")
+    endif()
+  endif(DOXYGEN_FOUND)
+endmacro(_SETUP_PROJECT_DOCUMENTATION_FINALIZE)
diff --git a/cmake/doxygen/doxygen.css b/cmake/doxygen/doxygen.css
index ffeb49a..67c8a98 100644
--- a/cmake/doxygen/doxygen.css
+++ b/cmake/doxygen/doxygen.css
@@ -217,7 +217,7 @@ p.formulaDsp {
 }
 
 img.formulaDsp {
-	
+
 }
 
 img.formulaInl {
@@ -275,20 +275,20 @@ span.charliteral {
 	color: #008080
 }
 
-span.vhdldigit { 
-	color: #ff00ff 
+span.vhdldigit {
+	color: #ff00ff
 }
 
-span.vhdlchar { 
-	color: #000000 
+span.vhdlchar {
+	color: #000000
 }
 
-span.vhdlkeyword { 
-	color: #700070 
+span.vhdlkeyword {
+	color: #700070
 }
 
-span.vhdllogic { 
-	color: #ff0000 
+span.vhdllogic {
+	color: #ff0000
 }
 
 /* @end */
@@ -427,9 +427,9 @@ table.memberdecls {
 }
 
 .memdoc {
-        border-bottom: 1px solid #A8B8D9;      
-        border-left: 1px solid #A8B8D9;      
-        border-right: 1px solid #A8B8D9; 
+        border-bottom: 1px solid #A8B8D9;
+        border-left: 1px solid #A8B8D9;
+        border-right: 1px solid #A8B8D9;
         padding: 2px 5px;
         background-color: #FBFCFD;
         border-top-width: 0;
@@ -638,7 +638,7 @@ div.summary
 	padding-right: 5px;
 	width: 50%;
 	text-align: right;
-}       
+}
 
 div.summary a
 {
@@ -658,5 +658,3 @@ div.headertitle
 {
 	padding: 5px 5px 5px 10px;
 }
-
-
diff --git a/cmake/eigen.cmake b/cmake/eigen.cmake
index a4be171..94f33b5 100644
--- a/cmake/eigen.cmake
+++ b/cmake/eigen.cmake
@@ -1,54 +1,58 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. command:: SEARCH_FOR_EIGEN
+# .rst: .. command:: SEARCH_FOR_EIGEN
 #
-#   This macro gets eigen include path from pkg-config file, and adds it include directories.
-#   If there is no pkg-config for Eigen, we fall back to a manual search.
+# This macro gets eigen include path from pkg-config file, and adds it include
+# directories. If there is no pkg-config for Eigen, we fall back to a manual
+# search.
 #
-#   If no version requirement argument is passed to the macro, it looks for the
-#   variable Eigen_REQUIRED. If this variable is not defined before calling
-#   the method SEARCH_FOR_EIGEN, the minimum version requirement is 3.0.0 by default.
-MACRO(SEARCH_FOR_EIGEN)
+# If no version requirement argument is passed to the macro, it looks for the
+# variable Eigen_REQUIRED. If this variable is not defined before calling the
+# method SEARCH_FOR_EIGEN, the minimum version requirement is 3.0.0 by default.
+macro(SEARCH_FOR_EIGEN)
   # ref https://github.com/jrl-umi3218/jrl-cmakemodules/issues/319
-  MESSAGE(AUTHOR_WARNING "SEARCH_FOR_EIGEN is deprecated and will be removed in the future")
-  SET(_Eigen_FOUND 0)
-  IF(${ARGC} GREATER 0)
-    SET(Eigen_REQUIRED ${ARGV0})
-  ELSEIF(NOT Eigen_REQUIRED)
-    SET(Eigen_REQUIRED "eigen3 >= 3.0.0")
-  ENDIF()
+  message(
+    AUTHOR_WARNING
+      "SEARCH_FOR_EIGEN is deprecated and will be removed in the future")
+  set(_Eigen_FOUND 0)
+  if(${ARGC} GREATER 0)
+    set(Eigen_REQUIRED ${ARGV0})
+  elseif(NOT Eigen_REQUIRED)
+    set(Eigen_REQUIRED "eigen3 >= 3.0.0")
+  endif()
 
   # looking for .pc
-  PKG_CHECK_MODULES(_Eigen ${Eigen_REQUIRED})
+  pkg_check_modules(_Eigen ${Eigen_REQUIRED})
 
-  IF(${_Eigen_FOUND})
-    SET(${PROJECT_NAME}_CXX_FLAGS "${${PROJECT_NAME}_CXX_FLAGS} ${_Eigen_CFLAGS_OTHER}")
-    SET(${PROJECT_NAME}_LINK_FLAGS "${${PROJECT_NAME}_LINK_FLAGS} ${_Eigen_LDFLAGS_OTHER}")
+  if(${_Eigen_FOUND})
+    set(${PROJECT_NAME}_CXX_FLAGS
+        "${${PROJECT_NAME}_CXX_FLAGS} ${_Eigen_CFLAGS_OTHER}")
+    set(${PROJECT_NAME}_LINK_FLAGS
+        "${${PROJECT_NAME}_LINK_FLAGS} ${_Eigen_LDFLAGS_OTHER}")
 
-    INCLUDE_DIRECTORIES(SYSTEM ${_Eigen_INCLUDE_DIRS} )
-    _ADD_TO_LIST(_PKG_CONFIG_REQUIRES "${Eigen_REQUIRED}" ",")
-  ELSE()
+    include_directories(SYSTEM ${_Eigen_INCLUDE_DIRS})
+    _add_to_list(_PKG_CONFIG_REQUIRES "${Eigen_REQUIRED}" ",")
+  else()
     # fallback: search for the signature_of_eigen3_matrix_library file
-    FIND_PATH(Eigen_INCLUDE_DIR NAMES signature_of_eigen3_matrix_library
-      PATHS
-      ${CMAKE_INSTALL_PREFIX}/include
-      PATH_SUFFIXES eigen3 eigen
-    )
-    INCLUDE_DIRECTORIES(SYSTEM ${Eigen_INCLUDE_DIR})
-    PKG_CONFIG_APPEND_CFLAGS(-I"${Eigen_INCLUDE_DIR}")
-  ENDIF()
-ENDMACRO(SEARCH_FOR_EIGEN)
+    find_path(
+      Eigen_INCLUDE_DIR
+      NAMES signature_of_eigen3_matrix_library
+      PATHS ${CMAKE_INSTALL_PREFIX}/include
+      PATH_SUFFIXES eigen3 eigen)
+    include_directories(SYSTEM ${Eigen_INCLUDE_DIR})
+    pkg_config_append_cflags(-I"${Eigen_INCLUDE_DIR}")
+  endif()
+endmacro(SEARCH_FOR_EIGEN)
diff --git a/cmake/find-external/CDD/FindCDD.cmake b/cmake/find-external/CDD/FindCDD.cmake
index 705298a..157f1e2 100644
--- a/cmake/find-external/CDD/FindCDD.cmake
+++ b/cmake/find-external/CDD/FindCDD.cmake
@@ -1,43 +1,40 @@
 #
-#   Copyright 2019 CNRS
+# Copyright 2019 CNRS
 #
-#   Author: Guilhem Saurel
+# Author: Guilhem Saurel
 #
-#   This program is free software: you can redistribute it and/or modify
-#   it under the terms of the GNU Lesser General Public License as published by
-#   the Free Software Foundation, either version 3 of the License, or
-#   (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation, either version 3 of the License, or (at your option) any
+# later version.
 #
-#   This program is distributed in the hope that it will be useful,
-#   but WITHOUT ANY WARRANTY; without even the implied warranty of
-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#   GNU Lesser General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
 #
-#   You should have received a copy of the GNU Lesser General Public License
-#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU Lesser General Public License along
+# with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 
-# Try to find libcdd
-# in standard prefixes and in ${CDD_PREFIX}
-# Once done this will define
-#  CDD_FOUND - System has CDD
-#  CDD_INCLUDE_DIRS - The CDD include directories
-#  CDD_LIBRARIES - The libraries needed to use CDD
-#  CDD_DEFINITIONS - Compiler switches required for using CDD
+# Try to find libcdd in standard prefixes and in ${CDD_PREFIX} Once done this
+# will define CDD_FOUND - System has CDD CDD_INCLUDE_DIRS - The CDD include
+# directories CDD_LIBRARIES - The libraries needed to use CDD CDD_DEFINITIONS -
+# Compiler switches required for using CDD
 
-FIND_PATH(CDD_INCLUDE_DIR
+find_path(
+  CDD_INCLUDE_DIR
   NAMES cdd.h cddmp.h
   PATHS ${CDD_PREFIX}
-  PATH_SUFFIXES include/cdd include/cddlib
-  )
-FIND_LIBRARY(CDD_LIBRARY
+  PATH_SUFFIXES include/cdd include/cddlib)
+find_library(
+  CDD_LIBRARY
   NAMES libcdd.so
-  PATHS ${CDD_PREFIX}
-  )
+  PATHS ${CDD_PREFIX})
 
-SET(CDD_LIBRARIES ${CDD_LIBRARY})
-SET(CDD_INCLUDE_DIRS ${CDD_INCLUDE_DIR})
+set(CDD_LIBRARIES ${CDD_LIBRARY})
+set(CDD_INCLUDE_DIRS ${CDD_INCLUDE_DIR})
 
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(CDD DEFAULT_MSG CDD_LIBRARY CDD_INCLUDE_DIR)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(CDD DEFAULT_MSG CDD_LIBRARY CDD_INCLUDE_DIR)
 mark_as_advanced(CDD_INCLUDE_DIR CDD_LIBRARY)
diff --git a/cmake/find-external/CLP/FindCLP.cmake b/cmake/find-external/CLP/FindCLP.cmake
index 45d3312..6c37a6f 100644
--- a/cmake/find-external/CLP/FindCLP.cmake
+++ b/cmake/find-external/CLP/FindCLP.cmake
@@ -1,42 +1,39 @@
 #
-#   Copyright 2019 CNRS
+# Copyright 2019 CNRS
 #
-#   Author: Guilhem Saurel
+# Author: Guilhem Saurel
 #
-#   This program is free software: you can redistribute it and/or modify
-#   it under the terms of the GNU Lesser General Public License as published by
-#   the Free Software Foundation, either version 3 of the License, or
-#   (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation, either version 3 of the License, or (at your option) any
+# later version.
 #
-#   This program is distributed in the hope that it will be useful,
-#   but WITHOUT ANY WARRANTY; without even the implied warranty of
-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#   GNU Lesser General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
 #
-#   You should have received a copy of the GNU Lesser General Public License
-#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU Lesser General Public License along
+# with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 
-# Try to find CLP
-# in standard prefixes and in ${CLP_PREFIX}
-# Once done this will define
-#  CLP_FOUND - System has CLP
-#  CLP_INCLUDE_DIRS - The CLP include directories
-#  CLP_LIBRARIES - The libraries needed to use CLP
-#  CLP_DEFINITIONS - Compiler switches required for using CLP
+# Try to find CLP in standard prefixes and in ${CLP_PREFIX} Once done this will
+# define CLP_FOUND - System has CLP CLP_INCLUDE_DIRS - The CLP include
+# directories CLP_LIBRARIES - The libraries needed to use CLP CLP_DEFINITIONS -
+# Compiler switches required for using CLP
 
-FIND_PATH(CLP_INCLUDE_DIR
+find_path(
+  CLP_INCLUDE_DIR
   NAMES coin/ClpSimplex.hpp
-  PATHS ${CLP_PREFIX}
-  )
-FIND_LIBRARY(CLP_LIBRARY
+  PATHS ${CLP_PREFIX})
+find_library(
+  CLP_LIBRARY
   NAMES libclp.so libClp.so
-  PATHS ${CLP_PREFIX}
-  )
+  PATHS ${CLP_PREFIX})
 
-SET(CLP_LIBRARIES ${CLP_LIBRARY})
-SET(CLP_INCLUDE_DIRS ${CLP_INCLUDE_DIR})
+set(CLP_LIBRARIES ${CLP_LIBRARY})
+set(CLP_INCLUDE_DIRS ${CLP_INCLUDE_DIR})
 
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(CLP DEFAULT_MSG CLP_LIBRARY CLP_INCLUDE_DIR)
-MARK_AS_ADVANCED(CLP_INCLUDE_DIR CLP_LIBRARY)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(CLP DEFAULT_MSG CLP_LIBRARY CLP_INCLUDE_DIR)
+mark_as_advanced(CLP_INCLUDE_DIR CLP_LIBRARY)
diff --git a/cmake/find-external/CppAD/Findcppad.cmake b/cmake/find-external/CppAD/Findcppad.cmake
index 429f8e1..ed0eb66 100644
--- a/cmake/find-external/CppAD/Findcppad.cmake
+++ b/cmake/find-external/CppAD/Findcppad.cmake
@@ -1,36 +1,38 @@
 #
-#   Copyright 2020 CNRS INRIA
+# Copyright 2020 CNRS INRIA
 #
-#   Author: Guilhem Saurel, Rohan Budhiraja
+# Author: Guilhem Saurel, Rohan Budhiraja
 #
 
-# Try to find cppad
-# in standard prefixes and in ${cppad_PREFIX}
-# Once done this will define
-#  cppad_FOUND - System has cppad
-#  cppad_INCLUDE_DIR - The cppad include directories
-#  cppad_LIBRARY - The libraries needed to use cppad
-#  cppad_DEFINITIONS - Compiler switches required for using cppad
-#  cppad_VERSION - Version of cppad found
+# Try to find cppad in standard prefixes and in ${cppad_PREFIX} Once done this
+# will define cppad_FOUND - System has cppad cppad_INCLUDE_DIR - The cppad
+# include directories cppad_LIBRARY - The libraries needed to use cppad
+# cppad_DEFINITIONS - Compiler switches required for using cppad cppad_VERSION -
+# Version of cppad found
 
-FIND_PATH(cppad_INCLUDE_DIR
+find_path(
+  cppad_INCLUDE_DIR
   NAMES cppad/configure.hpp
   PATHS ${cppad_PREFIX}
-  PATH_SUFFIXES include
-  )
-FIND_LIBRARY(cppad_LIBRARY
+  PATH_SUFFIXES include)
+find_library(
+  cppad_LIBRARY
   NAMES cppad_lib
   PATHS ${cppad_PREFIX}
-  PATH_SUFFIXES lib
-  )
+  PATH_SUFFIXES lib)
 
-IF(cppad_INCLUDE_DIR AND EXISTS "${cppad_INCLUDE_DIR}/cppad/configure.hpp")
+if(cppad_INCLUDE_DIR AND EXISTS "${cppad_INCLUDE_DIR}/cppad/configure.hpp")
   file(STRINGS "${cppad_INCLUDE_DIR}/cppad/configure.hpp" cppad_version_str
-    REGEX "^# *define[\t ]+CPPAD_PACKAGE_STRING[\t ]+\"cppad-.*\"")
-  string(REGEX REPLACE "^# *define[\t ]+CPPAD_PACKAGE_STRING[\t ]+\"cppad-([^\"]*)\".*" "\\1"
-    cppad_VERSION "${cppad_version_str}")
-ENDIF()
+       REGEX "^# *define[\t ]+CPPAD_PACKAGE_STRING[\t ]+\"cppad-.*\"")
+  string(
+    REGEX
+    REPLACE "^# *define[\t ]+CPPAD_PACKAGE_STRING[\t ]+\"cppad-([^\"]*)\".*"
+            "\\1" cppad_VERSION "${cppad_version_str}")
+endif()
 
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(cppad REQUIRED_VARS cppad_LIBRARY cppad_INCLUDE_DIR VERSION_VAR cppad_VERSION)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(
+  cppad
+  REQUIRED_VARS cppad_LIBRARY cppad_INCLUDE_DIR
+  VERSION_VAR cppad_VERSION)
 mark_as_advanced(cppad_INCLUDE_DIR cppad_LIBRARY)
diff --git a/cmake/find-external/CppAD/Findcppadcg.cmake b/cmake/find-external/CppAD/Findcppadcg.cmake
index 9a0f0cc..d82421d 100644
--- a/cmake/find-external/CppAD/Findcppadcg.cmake
+++ b/cmake/find-external/CppAD/Findcppadcg.cmake
@@ -1,29 +1,32 @@
 #
-#   Copyright 2020 CNRS INRIA
+# Copyright 2020 CNRS INRIA
 #
-#   Author: Guilhem Saurel
+# Author: Guilhem Saurel
 #
 
-# Try to find cppadcg
-# in standard prefixes and in ${cppadcg_PREFIX}
-# Once done this will define
-#  cppadcg_FOUND - System has cppadcg
-#  cppadcg_INCLUDE_DIR - The cppadcg include directories
-#  cppadcg_VERSION - Version of cppadcg found
+# Try to find cppadcg in standard prefixes and in ${cppadcg_PREFIX} Once done
+# this will define cppadcg_FOUND - System has cppadcg cppadcg_INCLUDE_DIR - The
+# cppadcg include directories cppadcg_VERSION - Version of cppadcg found
 
-FIND_PATH(cppadcg_INCLUDE_DIR
+find_path(
+  cppadcg_INCLUDE_DIR
   NAMES cppad/cg.hpp
   PATHS ${cppadcg_PREFIX}
-  PATH_SUFFIXES include
-  )
+  PATH_SUFFIXES include)
 
-IF(cppadcg_INCLUDE_DIR AND EXISTS "${cppadcg_INCLUDE_DIR}/cppad/cg/configure.hpp")
-  file(STRINGS "${cppadcg_INCLUDE_DIR}/cppad/cg/configure.hpp" cppadcg_version_str
-    REGEX "^#define[\t ]+CPPAD_CG_VERSION[\t ]+\"cppadcg-.*\"")
-  string(REGEX REPLACE "^#define[\t ]+CPPAD_CG_VERSION[\t ]+\"cppadcg-([^\"]*)\".*" "\\1"
-    cppadcg_VERSION "${cppadcg_version_str}")
-ENDIF()
+if(cppadcg_INCLUDE_DIR AND EXISTS
+                           "${cppadcg_INCLUDE_DIR}/cppad/cg/configure.hpp")
+  file(STRINGS "${cppadcg_INCLUDE_DIR}/cppad/cg/configure.hpp"
+       cppadcg_version_str
+       REGEX "^#define[\t ]+CPPAD_CG_VERSION[\t ]+\"cppadcg-.*\"")
+  string(REGEX
+         REPLACE "^#define[\t ]+CPPAD_CG_VERSION[\t ]+\"cppadcg-([^\"]*)\".*"
+                 "\\1" cppadcg_VERSION "${cppadcg_version_str}")
+endif()
 
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(cppadcg REQUIRED_VARS cppadcg_INCLUDE_DIR VERSION_VAR cppadcg_VERSION)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(
+  cppadcg
+  REQUIRED_VARS cppadcg_INCLUDE_DIR
+  VERSION_VAR cppadcg_VERSION)
 mark_as_advanced(cppadcg_INCLUDE_DIR)
diff --git a/cmake/find-external/OpenMP/FindOpenMP.cmake b/cmake/find-external/OpenMP/FindOpenMP.cmake
index 872b241..506742a 100644
--- a/cmake/find-external/OpenMP/FindOpenMP.cmake
+++ b/cmake/find-external/OpenMP/FindOpenMP.cmake
@@ -1,28 +1,23 @@
-find_library(OpenMP_CXX_LIBRARY
-    NAMES omp
-)
+find_library(OpenMP_CXX_LIBRARY NAMES omp)
 
-find_path(OpenMP_CXX_INCLUDE_DIR
-    omp.h
-)
+find_path(OpenMP_CXX_INCLUDE_DIR omp.h)
 
 mark_as_advanced(OpenMP_CXX_LIBRARY OpenMP_CXX_INCLUDE_DIR)
 
 include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(OpenMP DEFAULT_MSG 
-    OpenMP_CXX_LIBRARY OpenMP_CXX_INCLUDE_DIR)
+find_package_handle_standard_args(OpenMP DEFAULT_MSG OpenMP_CXX_LIBRARY
+                                  OpenMP_CXX_INCLUDE_DIR)
 
 if(OpenMP_FOUND)
-    set(OpenMP_CXX_LIBRARIES ${OpenMP_CXX_LIBRARY})
-    set(OpenMP_CXX_INCLUDE_DIRS ${OpenMP_CXX_INCLUDE_DIR})
-    set(OpenMP_CXX_COMPILE_OPTIONS -Xpreprocessor -fopenmp)
-    set(OpenMP_CXX_FLAGS ${OpenMP_CXX_COMPILE_OPTIONS})
+  set(OpenMP_CXX_LIBRARIES ${OpenMP_CXX_LIBRARY})
+  set(OpenMP_CXX_INCLUDE_DIRS ${OpenMP_CXX_INCLUDE_DIR})
+  set(OpenMP_CXX_COMPILE_OPTIONS -Xpreprocessor -fopenmp)
+  set(OpenMP_CXX_FLAGS ${OpenMP_CXX_COMPILE_OPTIONS})
 
-    add_library(OpenMP::OpenMP_CXX SHARED IMPORTED)
-    set_target_properties(OpenMP::OpenMP_CXX PROPERTIES
-        IMPORTED_LOCATION ${OpenMP_CXX_LIBRARIES}
-        INTERFACE_INCLUDE_DIRECTORIES "${OpenMP_CXX_INCLUDE_DIRS}"
-        INTERFACE_COMPILE_OPTIONS "${OpenMP_CXX_COMPILE_OPTIONS}"
-    )
+  add_library(OpenMP::OpenMP_CXX SHARED IMPORTED)
+  set_target_properties(
+    OpenMP::OpenMP_CXX
+    PROPERTIES IMPORTED_LOCATION ${OpenMP_CXX_LIBRARIES}
+               INTERFACE_INCLUDE_DIRECTORIES "${OpenMP_CXX_INCLUDE_DIRS}"
+               INTERFACE_COMPILE_OPTIONS "${OpenMP_CXX_COMPILE_OPTIONS}")
 endif()
-
diff --git a/cmake/find-external/OpenRTM/FindOpenRTM.cmake b/cmake/find-external/OpenRTM/FindOpenRTM.cmake
index 425ae21..d898b0f 100644
--- a/cmake/find-external/OpenRTM/FindOpenRTM.cmake
+++ b/cmake/find-external/OpenRTM/FindOpenRTM.cmake
@@ -1,171 +1,189 @@
-
-# @author Shin'ichiro Nakaoka
-
-set(OPENRTM_FOUND FALSE)
-set(OPENRTM_VERSION042 "0.4.2")
-set(OPENRTM_VERSION100 "1.0.0")
-set(OPENRTM_PKG_CONFIG_FOUND FALSE)
-#Additional threshold OpenRTM versions switching processing 
-set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION100})
-
-if(UNIX)
-  if(OPENRTM_DIR)
-    string(REGEX REPLACE "/$" "" OPENRTM_DIR ${OPENRTM_DIR})
-    set(OPENRTM_CONFIG_EXECUTABLE ${OPENRTM_DIR}/bin/rtm-config)
-    if(NOT EXISTS ${OPENRTM_CONFIG_EXECUTABLE})
-      set(OPENRTM_CONFIG_EXECUTABLE)
-      message(FATAL_ERROR "rtm-config was not found in ${OPENRTM_DIR}/bin. Please set OPENRTM_DIR correctly.")
-    endif()
-  else()
-    find_program(OPENRTM_CONFIG_EXECUTABLE rtm-config DOC "The location of the rtm-config script")
-    mark_as_advanced(OPENRTM_CONFIG_EXECUTABLE)  
-  endif()
-
-  if(OPENRTM_CONFIG_EXECUTABLE)
-    set(OPENRTM_FOUND TRUE)
-
-    execute_process(
-      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --version
-      OUTPUT_VARIABLE OPENRTM_VERSION
-      RESULT_VARIABLE RESULT
-      OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-    if(NOT RESULT EQUAL 0)
-      set(OPENRTM_FOUND FALSE)
-    endif()
-
-    execute_process(
-      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --prefix
-      OUTPUT_VARIABLE OPENRTM_DIR
-      RESULT_VARIABLE RESULT
-      OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-    if(RESULT EQUAL 0)
-      if(OPENRTM_DIR)
-        list(APPEND OPENRTM_INCLUDE_DIRS "${OPENRTM_DIR}/include")
-        list(APPEND OPENRTM_INCLUDE_DIRS "${OPENRTM_DIR}/include/rtm/idl")
-      endif()
-    else()
-      set(OPENRTM_FOUND FALSE)
-    endif()
-
-    execute_process(
-      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --cflags
-      OUTPUT_VARIABLE OPENRTM_CXX_FLAGS
-      RESULT_VARIABLE RESULT)
-
-    if(RESULT EQUAL 0)
-      string(REGEX MATCHALL "-D.*[^ ;]+" OPENRTM_DEFINITIONS ${OPENRTM_CXX_FLAGS})
-    else()
-      set(OPENRTM_FOUND FALSE)
-    endif()
-
-    execute_process(
-      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --libs
-      OUTPUT_VARIABLE OPENRTM_LIBRARIES
-      RESULT_VARIABLE RESULT
-      OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-    if(RESULT EQUAL 0)
-      string(REGEX MATCHALL "-L[^ ;]+" OPENRTM_LIBRARY_DIRS ${OPENRTM_LIBRARIES})
-      string(REGEX REPLACE "-L" ";" OPENRTM_LIBRARY_DIRS ${OPENRTM_LIBRARY_DIRS})
-      string(REGEX REPLACE "-L[^ ;]+" "" OPENRTM_LIBRARIES ${OPENRTM_LIBRARIES})
-      separate_arguments(OPENRTM_LIBRARIES)
-    else()
-      set(OPENRTM_FOUND FALSE)
-    endif()
-
-  endif(OPENRTM_CONFIG_EXECUTABLE)
-  set(OPENRTM_PKG_CONFIG_FILE "/usr/lib/pkgconfig/openrtm-aist.pc")
-  if(EXISTS ${OPENRTM_PKG_CONFIG_FILE})
-    set(OPENRTM_PKG_CONFIG_FOUND TRUE)
-  endif()
-endif(UNIX)
-
-if(WIN32)
-  set(OPENRTM_DEFINITIONS -DUSE_stub_in_nt_dll )
-  if( NOT OPENRTM_DIR )
-    if(NOT $ENV{RTM_ROOT} STREQUAL "")
-      set(OPENRTM_DIR $ENV{RTM_ROOT})
-    endif()
-  endif()
-  if(OPENRTM_DIR )
-    if( ${OPENRTM_DIR} MATCHES ".*\\\\0\\.4\\\\$" )
-      set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION042})
-    elseif(${OPENRTM_DIR} MATCHES ".*\\/0\\.4$")
-      set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION042})
-    else()
-      set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION100})
-    endif()
-    set(OPENRTM_VERSION ${OPENRTM_DEFAULT_VERSION} CACHE STRING "Set version of OpenRTM-aist. Default version is ${OPENRTM_DEFAULT_VERSION}")
-    set(OPENRTM_INCLUDE_DIRS ${OPENRTM_DIR} )
-    set(OPENRTM_LIBRARY_DIRS ${OPENRTM_DIR}/bin )
-    list(APPEND OPENRTM_INCLUDE_DIRS "${OPENRTM_DIR}/rtm/idl")
-    if(OPENRTM_VERSION STREQUAL ${OPENRTM_VERSION042})
-      set(OPENRTM_LIBRARIES_RELEASE RTC042 ACE )
-    else()
-      # 1.0.0-RC
-      #set(OPENRTM_LIBRARIES_RELEASE RTC100 coil)
-
-      # 1.0.0-Release
-      set(OPENRTM_LIBRARIES_RELEASE RTC100 coil)
-      set(OPENRTM_NODEBUG_LIBRARIES ws2_32 mswsock)
-    endif()
-    foreach(library ${OPENRTM_LIBRARIES_RELEASE})
-      list(APPEND OPENRTM_LIBRARIES optimized ${library} debug ${library}d )
-    endforeach()
-    foreach(library ${OPENRTM_NODEBUG_LIBRARIES})
-      list(APPEND OPENRTM_LIBRARIES optimized ${library} debug ${library} )
-    endforeach()
-  endif()
-
-  if("${OPENRTM_VERSION}" STREQUAL ${OPENRTM_VERSION042})
-    if(NOT ACE_ROOT)
-      if(NOT $ENV{ACE_ROOT} STREQUAL "")
-        set(ACE_ROOT $ENV{ACE_ROOT})
-      endif()
-      set(ACE_ROOT ${ACE_ROOT} CACHE PATH "The top directory of ACE")
-    endif()
-    if(ACE_ROOT)
-      include_directories(${ACE_ROOT})
-      link_directories(${ACE_ROOT}/lib)
-    endif()
-    if(OPENRTM_DIR AND ACE_ROOT)
-      set(OPENRTM_FOUND TRUE)
-    endif()
-  else()
-    if(OPENRTM_DIR)
-       set(OPENRTM_FOUND TRUE)
-    endif()
-  endif()
-endif(WIN32)
-
-if(NOT OPENRTM_FOUND)
-  set(OPENRTM_DIR NOT_FOUND)
-endif()
-
-set(OPENRTM_DIR ${OPENRTM_DIR} CACHE PATH "The top directory of OpenRTM-aist")
-
-if(OPENRTM_FOUND)
-  if( ${OPENRTM_VERSION} MATCHES "^0\\." )
-      message(FATAL_ERROR "Not support OpenRTM-aist Ver.${OPENRTM_VERSION}, please install OpenRTM-aist Ver.1.0.0 or later and specify it's location.")
-  endif()
-
-  if(NOT OpenRTM_FIND_QUIETLY)
-    message(STATUS "Found OpenRTM-aist ${OPENRTM_VERSION} in ${OPENRTM_DIR}")
-  endif()
-  if(OPENRTM_PKG_CONFIG_FOUND)
-    message(STATUS "OpenRTM is supported pkg-config.")
-  else()
-    message(STATUS "OpenRTM is not supported pkg-config.")
-    if(WIN32)
-      list(APPEND OPENRTM_LIBRARIES ${OMNIORB_LIBRARIES})
-    endif(WIN32)
-  endif()
-else()
-  if(NOT OpenRTM_FIND_QUIETLY)
-    if(OpenRTM_FIND_REQUIRED)
-      message(FATAL_ERROR "OpenRTM-aist required, please specify it's location.")
-    endif()
-  endif()
-endif()
+# @author Shin'ichiro Nakaoka
+
+set(OPENRTM_FOUND FALSE)
+set(OPENRTM_VERSION042 "0.4.2")
+set(OPENRTM_VERSION100 "1.0.0")
+set(OPENRTM_PKG_CONFIG_FOUND FALSE)
+# Additional threshold OpenRTM versions switching processing
+set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION100})
+
+if(UNIX)
+  if(OPENRTM_DIR)
+    string(REGEX REPLACE "/$" "" OPENRTM_DIR ${OPENRTM_DIR})
+    set(OPENRTM_CONFIG_EXECUTABLE ${OPENRTM_DIR}/bin/rtm-config)
+    if(NOT EXISTS ${OPENRTM_CONFIG_EXECUTABLE})
+      set(OPENRTM_CONFIG_EXECUTABLE)
+      message(
+        FATAL_ERROR
+          "rtm-config was not found in ${OPENRTM_DIR}/bin. Please set OPENRTM_DIR correctly."
+      )
+    endif()
+  else()
+    find_program(OPENRTM_CONFIG_EXECUTABLE rtm-config
+                 DOC "The location of the rtm-config script")
+    mark_as_advanced(OPENRTM_CONFIG_EXECUTABLE)
+  endif()
+
+  if(OPENRTM_CONFIG_EXECUTABLE)
+    set(OPENRTM_FOUND TRUE)
+
+    execute_process(
+      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --version
+      OUTPUT_VARIABLE OPENRTM_VERSION
+      RESULT_VARIABLE RESULT
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+    if(NOT RESULT EQUAL 0)
+      set(OPENRTM_FOUND FALSE)
+    endif()
+
+    execute_process(
+      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --prefix
+      OUTPUT_VARIABLE OPENRTM_DIR
+      RESULT_VARIABLE RESULT
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+    if(RESULT EQUAL 0)
+      if(OPENRTM_DIR)
+        list(APPEND OPENRTM_INCLUDE_DIRS "${OPENRTM_DIR}/include")
+        list(APPEND OPENRTM_INCLUDE_DIRS "${OPENRTM_DIR}/include/rtm/idl")
+      endif()
+    else()
+      set(OPENRTM_FOUND FALSE)
+    endif()
+
+    execute_process(
+      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --cflags
+      OUTPUT_VARIABLE OPENRTM_CXX_FLAGS
+      RESULT_VARIABLE RESULT)
+
+    if(RESULT EQUAL 0)
+      string(REGEX MATCHALL "-D.*[^ ;]+" OPENRTM_DEFINITIONS
+                   ${OPENRTM_CXX_FLAGS})
+    else()
+      set(OPENRTM_FOUND FALSE)
+    endif()
+
+    execute_process(
+      COMMAND ${OPENRTM_CONFIG_EXECUTABLE} --libs
+      OUTPUT_VARIABLE OPENRTM_LIBRARIES
+      RESULT_VARIABLE RESULT
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+    if(RESULT EQUAL 0)
+      string(REGEX MATCHALL "-L[^ ;]+" OPENRTM_LIBRARY_DIRS
+                   ${OPENRTM_LIBRARIES})
+      string(REGEX REPLACE "-L" ";" OPENRTM_LIBRARY_DIRS
+                           ${OPENRTM_LIBRARY_DIRS})
+      string(REGEX REPLACE "-L[^ ;]+" "" OPENRTM_LIBRARIES ${OPENRTM_LIBRARIES})
+      separate_arguments(OPENRTM_LIBRARIES)
+    else()
+      set(OPENRTM_FOUND FALSE)
+    endif()
+
+  endif(OPENRTM_CONFIG_EXECUTABLE)
+  set(OPENRTM_PKG_CONFIG_FILE "/usr/lib/pkgconfig/openrtm-aist.pc")
+  if(EXISTS ${OPENRTM_PKG_CONFIG_FILE})
+    set(OPENRTM_PKG_CONFIG_FOUND TRUE)
+  endif()
+endif(UNIX)
+
+if(WIN32)
+  set(OPENRTM_DEFINITIONS -DUSE_stub_in_nt_dll)
+  if(NOT OPENRTM_DIR)
+    if(NOT $ENV{RTM_ROOT} STREQUAL "")
+      set(OPENRTM_DIR $ENV{RTM_ROOT})
+    endif()
+  endif()
+  if(OPENRTM_DIR)
+    if(${OPENRTM_DIR} MATCHES ".*\\\\0\\.4\\\\$")
+      set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION042})
+    elseif(${OPENRTM_DIR} MATCHES ".*\\/0\\.4$")
+      set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION042})
+    else()
+      set(OPENRTM_DEFAULT_VERSION ${OPENRTM_VERSION100})
+    endif()
+    set(OPENRTM_VERSION
+        ${OPENRTM_DEFAULT_VERSION}
+        CACHE
+          STRING
+          "Set version of OpenRTM-aist. Default version is ${OPENRTM_DEFAULT_VERSION}"
+    )
+    set(OPENRTM_INCLUDE_DIRS ${OPENRTM_DIR})
+    set(OPENRTM_LIBRARY_DIRS ${OPENRTM_DIR}/bin)
+    list(APPEND OPENRTM_INCLUDE_DIRS "${OPENRTM_DIR}/rtm/idl")
+    if(OPENRTM_VERSION STREQUAL ${OPENRTM_VERSION042})
+      set(OPENRTM_LIBRARIES_RELEASE RTC042 ACE)
+    else()
+      # 1.0.0-RC set(OPENRTM_LIBRARIES_RELEASE RTC100 coil)
+
+      # 1.0.0-Release
+      set(OPENRTM_LIBRARIES_RELEASE RTC100 coil)
+      set(OPENRTM_NODEBUG_LIBRARIES ws2_32 mswsock)
+    endif()
+    foreach(library ${OPENRTM_LIBRARIES_RELEASE})
+      list(APPEND OPENRTM_LIBRARIES optimized ${library} debug ${library}d)
+    endforeach()
+    foreach(library ${OPENRTM_NODEBUG_LIBRARIES})
+      list(APPEND OPENRTM_LIBRARIES optimized ${library} debug ${library})
+    endforeach()
+  endif()
+
+  if("${OPENRTM_VERSION}" STREQUAL ${OPENRTM_VERSION042})
+    if(NOT ACE_ROOT)
+      if(NOT $ENV{ACE_ROOT} STREQUAL "")
+        set(ACE_ROOT $ENV{ACE_ROOT})
+      endif()
+      set(ACE_ROOT
+          ${ACE_ROOT}
+          CACHE PATH "The top directory of ACE")
+    endif()
+    if(ACE_ROOT)
+      include_directories(${ACE_ROOT})
+      link_directories(${ACE_ROOT}/lib)
+    endif()
+    if(OPENRTM_DIR AND ACE_ROOT)
+      set(OPENRTM_FOUND TRUE)
+    endif()
+  else()
+    if(OPENRTM_DIR)
+      set(OPENRTM_FOUND TRUE)
+    endif()
+  endif()
+endif(WIN32)
+
+if(NOT OPENRTM_FOUND)
+  set(OPENRTM_DIR NOT_FOUND)
+endif()
+
+set(OPENRTM_DIR
+    ${OPENRTM_DIR}
+    CACHE PATH "The top directory of OpenRTM-aist")
+
+if(OPENRTM_FOUND)
+  if(${OPENRTM_VERSION} MATCHES "^0\\.")
+    message(
+      FATAL_ERROR
+        "Not support OpenRTM-aist Ver.${OPENRTM_VERSION}, please install OpenRTM-aist Ver.1.0.0 or later and specify it's location."
+    )
+  endif()
+
+  if(NOT OpenRTM_FIND_QUIETLY)
+    message(STATUS "Found OpenRTM-aist ${OPENRTM_VERSION} in ${OPENRTM_DIR}")
+  endif()
+  if(OPENRTM_PKG_CONFIG_FOUND)
+    message(STATUS "OpenRTM is supported pkg-config.")
+  else()
+    message(STATUS "OpenRTM is not supported pkg-config.")
+    if(WIN32)
+      list(APPEND OPENRTM_LIBRARIES ${OMNIORB_LIBRARIES})
+    endif(WIN32)
+  endif()
+else()
+  if(NOT OpenRTM_FIND_QUIETLY)
+    if(OpenRTM_FIND_REQUIRED)
+      message(
+        FATAL_ERROR "OpenRTM-aist required, please specify it's location.")
+    endif()
+  endif()
+endif()
diff --git a/cmake/find-external/TinyXML/FindTinyXML.cmake b/cmake/find-external/TinyXML/FindTinyXML.cmake
index 25bec4e..fff008d 100644
--- a/cmake/find-external/TinyXML/FindTinyXML.cmake
+++ b/cmake/find-external/TinyXML/FindTinyXML.cmake
@@ -1,43 +1,41 @@
 #
-#   Copyright 2019 CNRS
+# Copyright 2019 CNRS
 #
-#   Author: Guilhem Saurel
+# Author: Guilhem Saurel
 #
-#   This program is free software: you can redistribute it and/or modify
-#   it under the terms of the GNU Lesser General Public License as published by
-#   the Free Software Foundation, either version 3 of the License, or
-#   (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation, either version 3 of the License, or (at your option) any
+# later version.
 #
-#   This program is distributed in the hope that it will be useful,
-#   but WITHOUT ANY WARRANTY; without even the implied warranty of
-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#   GNU Lesser General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
 #
-#   You should have received a copy of the GNU Lesser General Public License
-#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU Lesser General Public License along
+# with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 
-# Try to find TinyXML
-# in standard prefixes and in ${TinyXML_PREFIX}
-# Once done this will define
-#  TinyXML_FOUND - System has TinyXML
-#  TinyXML_INCLUDE_DIRS - The TinyXML include directories
-#  TinyXML_LIBRARIES - The libraries needed to use TinyXML
-#  TinyXML_DEFINITIONS - Compiler switches required for using TinyXML
+# Try to find TinyXML in standard prefixes and in ${TinyXML_PREFIX} Once done
+# this will define TinyXML_FOUND - System has TinyXML TinyXML_INCLUDE_DIRS - The
+# TinyXML include directories TinyXML_LIBRARIES - The libraries needed to use
+# TinyXML TinyXML_DEFINITIONS - Compiler switches required for using TinyXML
 
-FIND_PATH(TinyXML_INCLUDE_DIR
+find_path(
+  TinyXML_INCLUDE_DIR
   NAMES tinyxml.h
   PATHS ${TinyXML_PREFIX}
-  PATH_SUFFIXES include/tinyxml
-  )
-FIND_LIBRARY(TinyXML_LIBRARY
+  PATH_SUFFIXES include/tinyxml)
+find_library(
+  TinyXML_LIBRARY
   NAMES tinyxml
-  PATHS ${TinyXML_PREFIX}
-  )
+  PATHS ${TinyXML_PREFIX})
 
-SET(TinyXML_LIBRARIES ${TinyXML_LIBRARY})
-SET(TinyXML_INCLUDE_DIRS ${TinyXML_INCLUDE_DIR})
+set(TinyXML_LIBRARIES ${TinyXML_LIBRARY})
+set(TinyXML_INCLUDE_DIRS ${TinyXML_INCLUDE_DIR})
 
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(TinyXML DEFAULT_MSG TinyXML_LIBRARY TinyXML_INCLUDE_DIR)
-MARK_AS_ADVANCED(TinyXML_INCLUDE_DIR TinyXML_LIBRARY)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(TinyXML DEFAULT_MSG TinyXML_LIBRARY
+                                  TinyXML_INCLUDE_DIR)
+mark_as_advanced(TinyXML_INCLUDE_DIR TinyXML_LIBRARY)
diff --git a/cmake/find-external/glpk/Findglpk.cmake b/cmake/find-external/glpk/Findglpk.cmake
index 705aff3..d37202e 100644
--- a/cmake/find-external/glpk/Findglpk.cmake
+++ b/cmake/find-external/glpk/Findglpk.cmake
@@ -1,43 +1,41 @@
 #
-#   Copyright 2019 CNRS
+# Copyright 2019 CNRS
 #
-#   Author: Guilhem Saurel
+# Author: Guilhem Saurel
 #
-#   This program is free software: you can redistribute it and/or modify
-#   it under the terms of the GNU Lesser General Public License as published by
-#   the Free Software Foundation, either version 3 of the License, or
-#   (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation, either version 3 of the License, or (at your option) any
+# later version.
 #
-#   This program is distributed in the hope that it will be useful,
-#   but WITHOUT ANY WARRANTY; without even the implied warranty of
-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#   GNU Lesser General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
 #
-#   You should have received a copy of the GNU Lesser General Public License
-#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU Lesser General Public License along
+# with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 
-# Try to find glpk
-# in standard prefixes and in ${glpk_PREFIX}
-# Once done this will define
-#  glpk_FOUND - System has glpk
-#  glpk_INCLUDE_DIRS - The glpk include directories
-#  glpk_LIBRARIES - The libraries needed to use glpk
-#  glpk_DEFINITIONS - Compiler switches required for using glpk
+# Try to find glpk in standard prefixes and in ${glpk_PREFIX} Once done this
+# will define glpk_FOUND - System has glpk glpk_INCLUDE_DIRS - The glpk include
+# directories glpk_LIBRARIES - The libraries needed to use glpk glpk_DEFINITIONS
+# - Compiler switches required for using glpk
 
-FIND_PATH(glpk_INCLUDE_DIR
+find_path(
+  glpk_INCLUDE_DIR
   NAMES glpk.h
-  PATHS ${glpk_PREFIX}
-  )
-FIND_LIBRARY(glpk_LIBRARY
+  PATHS ${glpk_PREFIX})
+find_library(
+  glpk_LIBRARY
   NAMES libglpk.so
   PATHS ${glpk_PREFIX}
-  PATH_SUFFIXES include/glpk
-  )
+  PATH_SUFFIXES include/glpk)
 
-SET(glpk_LIBRARIES ${glpk_LIBRARY})
-SET(glpk_INCLUDE_DIRS ${glpk_INCLUDE_DIR})
+set(glpk_LIBRARIES ${glpk_LIBRARY})
+set(glpk_INCLUDE_DIRS ${glpk_INCLUDE_DIR})
 
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(glpk DEFAULT_MSG glpk_LIBRARY glpk_INCLUDE_DIR)
-MARK_AS_ADVANCED(glpk_INCLUDE_DIR glpk_LIBRARY)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(glpk DEFAULT_MSG glpk_LIBRARY
+                                  glpk_INCLUDE_DIR)
+mark_as_advanced(glpk_INCLUDE_DIR glpk_LIBRARY)
diff --git a/cmake/find-external/qpOASES/FindqpOASES.cmake b/cmake/find-external/qpOASES/FindqpOASES.cmake
index 9c473cd..4cca51b 100644
--- a/cmake/find-external/qpOASES/FindqpOASES.cmake
+++ b/cmake/find-external/qpOASES/FindqpOASES.cmake
@@ -1,42 +1,40 @@
 #
-#   Copyright 2019 CNRS
+# Copyright 2019 CNRS
 #
-#   Author: Guilhem Saurel
+# Author: Guilhem Saurel
 #
-#   This program is free software: you can redistribute it and/or modify
-#   it under the terms of the GNU Lesser General Public License as published by
-#   the Free Software Foundation, either version 3 of the License, or
-#   (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation, either version 3 of the License, or (at your option) any
+# later version.
 #
-#   This program is distributed in the hope that it will be useful,
-#   but WITHOUT ANY WARRANTY; without even the implied warranty of
-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#   GNU Lesser General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
 #
-#   You should have received a copy of the GNU Lesser General Public License
-#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU Lesser General Public License along
+# with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 
-# Try to find qpOASES
-# in standard prefixes and in ${qpOASES_PREFIX}
-# Once done this will define
-#  qpOASES_FOUND - System has qpOASES
-#  qpOASES_INCLUDE_DIRS - The qpOASES include directories
-#  qpOASES_LIBRARIES - The libraries needed to use qpOASES
-#  qpOASES_DEFINITIONS - Compiler switches required for using qpOASES
+# Try to find qpOASES in standard prefixes and in ${qpOASES_PREFIX} Once done
+# this will define qpOASES_FOUND - System has qpOASES qpOASES_INCLUDE_DIRS - The
+# qpOASES include directories qpOASES_LIBRARIES - The libraries needed to use
+# qpOASES qpOASES_DEFINITIONS - Compiler switches required for using qpOASES
 
-FIND_PATH(qpOASES_INCLUDE_DIR
+find_path(
+  qpOASES_INCLUDE_DIR
   NAMES qpOASES.hpp
-  PATHS ${qpOASES_PREFIX} ${qpOASES_PREFIX}/include
-  )
-FIND_LIBRARY(qpOASES_LIBRARY
+  PATHS ${qpOASES_PREFIX} ${qpOASES_PREFIX}/include)
+find_library(
+  qpOASES_LIBRARY
   NAMES libqpOASES.so
-  PATHS ${qpOASES_PREFIX} ${qpOASES_PREFIX}/lib
-  )
+  PATHS ${qpOASES_PREFIX} ${qpOASES_PREFIX}/lib)
 
-SET(qpOASES_LIBRARIES ${qpOASES_LIBRARY})
-SET(qpOASES_INCLUDE_DIRS ${qpOASES_INCLUDE_DIR})
+set(qpOASES_LIBRARIES ${qpOASES_LIBRARY})
+set(qpOASES_INCLUDE_DIRS ${qpOASES_INCLUDE_DIR})
 
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(qpOASES DEFAULT_MSG qpOASES_LIBRARY qpOASES_INCLUDE_DIR)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(qpOASES DEFAULT_MSG qpOASES_LIBRARY
+                                  qpOASES_INCLUDE_DIR)
 mark_as_advanced(qpOASES_INCLUDE_DIR qpOASES_LIBRARY)
diff --git a/cmake/geometric-tools.cmake b/cmake/geometric-tools.cmake
index 942f700..c2623be 100644
--- a/cmake/geometric-tools.cmake
+++ b/cmake/geometric-tools.cmake
@@ -1,68 +1,71 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # SEARCH_FOR_GEOMETRIC_TOOLS
 # -----------------
 #
-# The geometric-tools (aka WildMagic5) does not provide a pkg-config
-# file. This macro defines a CMake variable that must be filled to
-# point to the geometric-tools install prefix.
+# The geometric-tools (aka WildMagic5) does not provide a pkg-config file. This
+# macro defines a CMake variable that must be filled to point to the
+# geometric-tools install prefix.
 #
-MACRO(SEARCH_FOR_GEOMETRIC_TOOLS)
-  MESSAGE(STATUS "geometric-tools is required.")
-  SET(GEOMETRIC_TOOLS_INSTALL_PREFIX "" CACHE PATH "geometric-tools installation prefix")
-  SET(LIB_GEOMETRIC_TOOLS_CORE LIB_GEOMETRIC_TOOLS_CORE-NOTFOUND)
-  SET(LIB_GEOMETRIC_TOOLS_MATH LIB_GEOMETRIC_TOOLS_MATH-NOTFOUND)
-  MESSAGE(STATUS "checking for module geometric-tools")
-  FIND_LIBRARY(LIB_GEOMETRIC_TOOLS_CORE
-    libWm5Core.so
-    PATH
-    ${GEOMETRIC_TOOLS_INSTALL_PREFIX}/lib)
-  IF (NOT LIB_GEOMETRIC_TOOLS_CORE)
-    MESSAGE(FATAL_ERROR
-      "Failed to find geometric-tools Core library, check that geometric-tools is installed and set the GEOMETRIC_TOOLS_INSTALL_PREFIX CMake variable.")
-  ENDIF()
-  FIND_LIBRARY(LIB_GEOMETRIC_TOOLS_MATH
-    libWm5Mathematics.so
-    PATH
-    ${GEOMETRIC_TOOLS_INSTALL_PREFIX}/lib)
-  IF (NOT LIB_GEOMETRIC_TOOLS_MATH)
-    MESSAGE(FATAL_ERROR
-      "Failed to find geometric-tools Mathematics library, check that geometric-tools is installed and set the GEOMETRIC_TOOLS_INSTALL_PREFIX CMake variable.")
-  ENDIF()
-  SET(GEOMETRIC_TOOLS_H GEOMETRIC_TOOLS-NOTFOUND)
-  FIND_PATH (GEOMETRIC_TOOLS_H
-    Wm5DistSegment3Segment3.h
-    "${GEOMETRIC_TOOLS_INSTALL_PREFIX}/include/geometric-tools")
-  IF (NOT GEOMETRIC_TOOLS_H)
-    MESSAGE(FATAL_ERROR
-      "Failed to find geometric-tools/Wm5DistSegment3Segment3.h, check that geometric-tools is installed.")
-  ENDIF()
+macro(SEARCH_FOR_GEOMETRIC_TOOLS)
+  message(STATUS "geometric-tools is required.")
+  set(GEOMETRIC_TOOLS_INSTALL_PREFIX
+      ""
+      CACHE PATH "geometric-tools installation prefix")
+  set(LIB_GEOMETRIC_TOOLS_CORE LIB_GEOMETRIC_TOOLS_CORE-NOTFOUND)
+  set(LIB_GEOMETRIC_TOOLS_MATH LIB_GEOMETRIC_TOOLS_MATH-NOTFOUND)
+  message(STATUS "checking for module geometric-tools")
+  find_library(LIB_GEOMETRIC_TOOLS_CORE libWm5Core.so PATH
+               ${GEOMETRIC_TOOLS_INSTALL_PREFIX}/lib)
+  if(NOT LIB_GEOMETRIC_TOOLS_CORE)
+    message(
+      FATAL_ERROR
+        "Failed to find geometric-tools Core library, check that geometric-tools is installed and set the GEOMETRIC_TOOLS_INSTALL_PREFIX CMake variable."
+    )
+  endif()
+  find_library(LIB_GEOMETRIC_TOOLS_MATH libWm5Mathematics.so PATH
+               ${GEOMETRIC_TOOLS_INSTALL_PREFIX}/lib)
+  if(NOT LIB_GEOMETRIC_TOOLS_MATH)
+    message(
+      FATAL_ERROR
+        "Failed to find geometric-tools Mathematics library, check that geometric-tools is installed and set the GEOMETRIC_TOOLS_INSTALL_PREFIX CMake variable."
+    )
+  endif()
+  set(GEOMETRIC_TOOLS_H GEOMETRIC_TOOLS-NOTFOUND)
+  find_path(GEOMETRIC_TOOLS_H Wm5DistSegment3Segment3.h
+            "${GEOMETRIC_TOOLS_INSTALL_PREFIX}/include/geometric-tools")
+  if(NOT GEOMETRIC_TOOLS_H)
+    message(
+      FATAL_ERROR
+        "Failed to find geometric-tools/Wm5DistSegment3Segment3.h, check that geometric-tools is installed."
+    )
+  endif()
 
-  MESSAGE(STATUS "  found geometric-tools")
+  message(STATUS "  found geometric-tools")
 
-  SET(GEOMETRIC_TOOLS_INCLUDEDIR "${GEOMETRIC_TOOLS_INSTALL_PREFIX}/include")
-  SET(GEOMETRIC_TOOLS_LIBRARYDIR "${GEOMETRIC_TOOLS_INSTALL_PREFIX}/lib")
-  SET(GEOMETRIC_TOOLS_LIBRARIES
-    ${LIB_GEOMETRIC_TOOLS_MATH} ${LIB_GEOMETRIC_TOOLS_CORE})
+  set(GEOMETRIC_TOOLS_INCLUDEDIR "${GEOMETRIC_TOOLS_INSTALL_PREFIX}/include")
+  set(GEOMETRIC_TOOLS_LIBRARYDIR "${GEOMETRIC_TOOLS_INSTALL_PREFIX}/lib")
+  set(GEOMETRIC_TOOLS_LIBRARIES ${LIB_GEOMETRIC_TOOLS_MATH}
+                                ${LIB_GEOMETRIC_TOOLS_CORE})
 
-  INCLUDE_DIRECTORIES(SYSTEM ${GEOMETRIC_TOOLS_INCLUDEDIR})
-  LINK_DIRECTORIES(${GEOMETRIC_TOOLS_LIBRARYDIR})
+  include_directories(SYSTEM ${GEOMETRIC_TOOLS_INCLUDEDIR})
+  link_directories(${GEOMETRIC_TOOLS_LIBRARYDIR})
 
-  PKG_CONFIG_APPEND_CFLAGS("-isystem ${GEOMETRIC_TOOLS_INCLUDEDIR}")
-  PKG_CONFIG_APPEND_LIBRARY_DIR("${GEOMETRIC_TOOLS_LIBRARYDIR}")
+  pkg_config_append_cflags("-isystem ${GEOMETRIC_TOOLS_INCLUDEDIR}")
+  pkg_config_append_library_dir("${GEOMETRIC_TOOLS_LIBRARYDIR}")
 
-  MESSAGE(STATUS "Module geometric-tools has been detected with success.")
-ENDMACRO(SEARCH_FOR_GEOMETRIC_TOOLS)
+  message(STATUS "Module geometric-tools has been detected with success.")
+endmacro(SEARCH_FOR_GEOMETRIC_TOOLS)
diff --git a/cmake/git-archive-all.py b/cmake/git-archive-all.py
index 7fc62d8..4360ace 100755
--- a/cmake/git-archive-all.py
+++ b/cmake/git-archive-all.py
@@ -50,31 +50,43 @@ class GitArchiver(object):
     >>> archiver = GitArchiver(main_repo_abspath='my/repo/path')
     >>> archiver.create('output.zip')
     """
-    LOG = logging.getLogger('GitArchiver')
 
-    def __init__(self, prefix='', exclude=True, force_sub=False, extra=None, main_repo_abspath=None):
+    LOG = logging.getLogger("GitArchiver")
+
+    def __init__(
+        self,
+        prefix="",
+        exclude=True,
+        force_sub=False,
+        extra=None,
+        main_repo_abspath=None,
+    ):
         """
         @param prefix: Prefix used to prepend all paths in the resulting archive.
             Extra file paths are only prefixed if they are not relative.
-            E.g. if prefix is 'foo' and extra is ['bar', '/baz'] the resulting archive will look like this:
+            E.g. if prefix is 'foo' and extra is ['bar', '/baz'] the resulting archive
+            will look like this:
             /
               baz
               foo/
                 bar
         @type prefix: str
 
-        @param exclude: Determines whether archiver should follow rules specified in .gitattributes files.
+        @param exclude: Determines whether archiver should follow rules specified in
+        .gitattributes files.
         @type exclude: bool
 
-        @param force_sub: Determines whether submodules are initialized and updated before archiving.
+        @param force_sub: Determines whether submodules are initialized and updated
+        before archiving.
         @type force_sub: bool
 
         @param extra: List of extra paths to include in the resulting archive.
         @type extra: list
 
-        @param main_repo_abspath: Absolute path to the main repository (or one of subdirectories).
-            If given path is path to a subdirectory (but not a submodule directory!) it will be replaced
-            with abspath to top-level directory of the repository.
+        @param main_repo_abspath: Absolute path to the main repository (or one of
+            subdirectories).
+            If given path is path to a subdirectory (but not a submodule directory!) it
+            will be replaced with abspath to top-level directory of the repository.
             If None, current cwd is used.
         @type main_repo_abspath: str
         """
@@ -82,14 +94,20 @@ class GitArchiver(object):
             extra = []
 
         if main_repo_abspath is None:
-            main_repo_abspath = path.abspath('')
+            main_repo_abspath = path.abspath("")
         elif not path.isabs(main_repo_abspath):
             raise ValueError("main_repo_abspath must be an absolute path")
 
         try:
-            main_repo_abspath = path.abspath(self.run_git_shell('git rev-parse --show-toplevel', main_repo_abspath).rstrip())
+            main_repo_abspath = path.abspath(
+                self.run_git_shell(
+                    "git rev-parse --show-toplevel", main_repo_abspath
+                ).rstrip()
+            )
         except CalledProcessError:
-            raise ValueError("{0} is not part of a git repository".format(main_repo_abspath))
+            raise ValueError(
+                "{0} is not part of a git repository".format(main_repo_abspath)
+            )
 
         self.prefix = prefix
         self.exclude = exclude
@@ -101,27 +119,33 @@ class GitArchiver(object):
         """
         Create the archive at output_file_path.
 
-        Type of the archive is determined either by extension of output_file_path or by output_format.
+        Type of the archive is determined either by extension of output_file_path or by
+        output_format.
         Supported formats are: gz, zip, bz2, xz, tar, tgz, txz
 
         @param output_path: Output file path.
         @type output_path: str
 
-        @param dry_run: Determines whether create should do nothing but print what it would archive.
+        @param dry_run: Determines whether create should do nothing but print what it
+            would archive.
         @type dry_run: bool
 
-        @param output_format: Determines format of the output archive. If None, format is determined from extension
-            of output_file_path.
+        @param output_format: Determines format of the output archive. If None, format
+            is determined from extension of output_file_path.
         @type output_format: str
         """
         if output_format is None:
             file_name, file_ext = path.splitext(output_path)
-            output_format = file_ext[len(extsep):].lower()
-            self.LOG.debug("Output format is not explicitly set, determined format is {0}.".format(output_format))
+            output_format = file_ext[len(extsep) :].lower()
+            self.LOG.debug(
+                "Output format is not explicitly set, determined format is {0}.".format(
+                    output_format
+                )
+            )
 
         if not dry_run:
-            if output_format == 'zip':
-                archive = ZipFile(path.abspath(output_path), 'w')
+            if output_format == "zip":
+                archive = ZipFile(path.abspath(output_path), "w")
 
                 def add_file(file_path, arcname):
                     if not path.islink(file_path):
@@ -131,26 +155,29 @@ class GitArchiver(object):
                         i.create_system = 3
                         i.external_attr = 0xA1ED0000
                         archive.writestr(i, readlink(file_path))
-            elif output_format in ['tar', 'bz2', 'gz', 'xz', 'tgz', 'txz']:
-                if output_format == 'tar':
-                    t_mode = 'w'
-                elif output_format == 'tgz':
-                    t_mode = 'w:gz'
-                elif output_format == 'txz':
-                    t_mode = 'w:xz'
+
+            elif output_format in ["tar", "bz2", "gz", "xz", "tgz", "txz"]:
+                if output_format == "tar":
+                    t_mode = "w"
+                elif output_format == "tgz":
+                    t_mode = "w:gz"
+                elif output_format == "txz":
+                    t_mode = "w:xz"
                 else:
-                    t_mode = 'w:{0}'.format(output_format)
+                    t_mode = "w:{0}".format(output_format)
 
                 archive = tarfile.open(path.abspath(output_path), t_mode)
 
                 def add_file(file_path, arcname):
                     archive.add(file_path, arcname)
+
             else:
                 raise RuntimeError("unknown format: {0}".format(output_format))
 
             def archiver(file_path, arcname):
                 self.LOG.debug("Compressing {0} => {1}...".format(file_path, arcname))
                 add_file(file_path, arcname)
+
         else:
             archive = None
 
@@ -164,15 +191,18 @@ class GitArchiver(object):
 
     def get_exclude_patterns(self, repo_abspath, repo_file_paths):
         """
-        Returns exclude patterns for a given repo. It looks for .gitattributes files in repo_file_paths.
+        Returns exclude patterns for a given repo. It looks for .gitattributes files in
+        repo_file_paths.
 
-        Resulting dictionary will contain exclude patterns per path (relative to the repo_abspath).
+        Resulting dictionary will contain exclude patterns per path (relative to the
+        repo_abspath).
         E.g. {('.', 'Catalyst', 'Editions', 'Base'): ['Foo*', '*Bar']}
 
         @param repo_abspath: Absolute path to the git repository.
         @type repo_abspath: str
 
-        @param repo_file_paths: List of paths relative to the repo_abspath that are under git control.
+        @param repo_file_paths: List of paths relative to the repo_abspath that are
+            under git control.
         @type repo_file_paths:  list
 
         @return: Dictionary representing exclude patterns.
@@ -186,7 +216,7 @@ class GitArchiver(object):
         def read_attributes(attributes_abspath):
             patterns = []
             if path.isfile(attributes_abspath):
-                attributes = open(attributes_abspath, 'r').readlines()
+                attributes = open(attributes_abspath, "r").readlines()
                 patterns = []
                 for line in attributes:
                     tokens = line.strip().split()
@@ -198,15 +228,23 @@ class GitArchiver(object):
 
         # There may be no gitattributes.
         try:
-            global_attributes_abspath = self.run_git_shell("git config --get core.attributesfile", repo_abspath).rstrip()
+            global_attributes_abspath = self.run_git_shell(
+                "git config --get core.attributesfile", repo_abspath
+            ).rstrip()
             exclude_patterns[()] = read_attributes(global_attributes_abspath)
-        except:
+        except Exception:
             # And it's valid to not have them.
             pass
 
-        for attributes_abspath in [path.join(repo_abspath, f) for f in repo_file_paths if f.endswith(".gitattributes")]:
+        for attributes_abspath in [
+            path.join(repo_abspath, f)
+            for f in repo_file_paths
+            if f.endswith(".gitattributes")
+        ]:
             # Each .gitattributes affects only files within its directory.
-            key = tuple(self.get_path_components(repo_abspath, path.dirname(attributes_abspath)))
+            key = tuple(
+                self.get_path_components(repo_abspath, path.dirname(attributes_abspath))
+            )
             exclude_patterns[key] = read_attributes(attributes_abspath)
 
         local_attributes_abspath = path.join(repo_abspath, ".git", "info", "attributes")
@@ -229,7 +267,8 @@ class GitArchiver(object):
         @param repo_file_path: Path to a file within repo_abspath.
         @type repo_file_path: str
 
-        @param exclude_patterns: Exclude patterns with format specified for get_exclude_patterns.
+        @param exclude_patterns: Exclude patterns with format specified for
+            get_exclude_patterns.
         @type exclude_patterns: dict
 
         @return: True if file should be excluded. Otherwise False.
@@ -241,18 +280,24 @@ class GitArchiver(object):
         from fnmatch import fnmatch
 
         file_name = path.basename(repo_file_path)
-        components = self.get_path_components(repo_abspath, path.join(repo_abspath, path.dirname(repo_file_path)))
+        components = self.get_path_components(
+            repo_abspath, path.join(repo_abspath, path.dirname(repo_file_path))
+        )
 
         is_excluded = False
-        # We should check all patterns specified in intermediate directories to the given file.
-        # At the end we should also check for the global patterns (key '()' or empty tuple).
+        # We should check all patterns specified in intermediate directories to the
+        # given file.
+        # At the end we should also check for the global patterns (key '()' or empty
+        # tuple).
         while not is_excluded:
             key = tuple(components)
             if key in exclude_patterns:
                 patterns = exclude_patterns[key]
                 for p in patterns:
                     if fnmatch(file_name, p) or fnmatch(repo_file_path, p):
-                        self.LOG.debug("Exclude pattern matched {0}: {1}".format(p, repo_file_path))
+                        self.LOG.debug(
+                            "Exclude pattern matched {0}: {1}".format(p, repo_file_path)
+                        )
                         is_excluded = True
 
             if not len(components):
@@ -274,9 +319,12 @@ class GitArchiver(object):
             archiver(path.abspath(file_path), path.join(self.prefix, file_path))
 
         for file_path in self.walk_git_files():
-            archiver(path.join(self.main_repo_abspath, file_path), path.join(self.prefix, file_path))
+            archiver(
+                path.join(self.main_repo_abspath, file_path),
+                path.join(self.prefix, file_path),
+            )
 
-    def walk_git_files(self, repo_path=''):
+    def walk_git_files(self, repo_path=""):
         """
         An iterator method that yields a file path relative to main_repo_abspath
         for each file that should be included in the archive.
@@ -285,24 +333,31 @@ class GitArchiver(object):
 
         Recurs into submodules as well.
 
-        @param repo_path: Path to the git submodule repository relative to main_repo_abspath.
+        @param repo_path: Path to the git submodule repository relative to
+            main_repo_abspath.
         @type repo_path: str
 
-        @return: Iterator to traverse files under git control relative to main_repo_abspath.
+        @return: Iterator to traverse files under git control relative to
+            main_repo_abspath.
         @rtype: Iterable
         """
         repo_abspath = path.join(self.main_repo_abspath, repo_path)
         repo_file_paths = self.run_git_shell(
-            "git ls-files --cached --full-name --no-empty-directory",
-            repo_abspath
+            "git ls-files --cached --full-name --no-empty-directory", repo_abspath
         ).splitlines()
         exclude_patterns = self.get_exclude_patterns(repo_abspath, repo_file_paths)
 
         for repo_file_path in repo_file_paths:
             # Git puts path in quotes if file path has unicode characters.
-            repo_file_path = repo_file_path.strip('"')  # file path relative to current repo
-            repo_file_abspath = path.join(repo_abspath, repo_file_path)  # absolute file path
-            main_repo_file_path = path.join(repo_path, repo_file_path)  # file path relative to the main repo
+            repo_file_path = repo_file_path.strip(
+                '"'
+            )  # file path relative to current repo
+            repo_file_abspath = path.join(
+                repo_abspath, repo_file_path
+            )  # absolute file path
+            main_repo_file_path = path.join(
+                repo_path, repo_file_path
+            )  # file path relative to the main repo
 
             # Only list symlinks and files.
             if not path.islink(repo_file_abspath) and path.isdir(repo_file_abspath):
@@ -323,19 +378,25 @@ class GitArchiver(object):
             with open(repo_gitmodules_abspath) as f:
                 lines = f.readlines()
 
-            for l in lines:
-                m = re.match("^\s*path\s*=\s*(.*)\s*$", l)
+            for line in lines:
+                m = re.match(r"^\s*path\s*=\s*(.*)\s*$", line)
 
                 if m:
                     submodule_path = m.group(1)
                     submodule_abspath = path.join(repo_path, submodule_path)
 
-                    if self.is_file_excluded(repo_abspath, submodule_path, exclude_patterns):
+                    if self.is_file_excluded(
+                        repo_abspath, submodule_path, exclude_patterns
+                    ):
                         continue
 
                     for submodule_file_path in self.walk_git_files(submodule_abspath):
-                        rel_file_path = submodule_file_path.replace(repo_path, "", 1).strip("/")
-                        if self.is_file_excluded(repo_abspath, rel_file_path, exclude_patterns):
+                        rel_file_path = submodule_file_path.replace(
+                            repo_path, "", 1
+                        ).strip("/")
+                        if self.is_file_excluded(
+                            repo_abspath, rel_file_path, exclude_patterns
+                        ):
                             continue
 
                         yield submodule_file_path
@@ -346,7 +407,8 @@ class GitArchiver(object):
     def get_path_components(repo_abspath, abspath):
         """
         Split given abspath into components relative to repo_abspath.
-        These components are primarily used as unique keys of files and folders within a repository.
+        These components are primarily used as unique keys of files and folders within a
+        repository.
 
         E.g. if repo_abspath is '/Documents/Hobby/ParaView/' and abspath is
         '/Documents/Hobby/ParaView/Catalyst/Editions/Base/', function will return:
@@ -354,10 +416,12 @@ class GitArchiver(object):
 
         First element is always os.curdir (concrete symbol depends on OS).
 
-        @param repo_abspath: Absolute path to the git repository. Normalized via os.path.normpath.
+        @param repo_abspath: Absolute path to the git repository. Normalized via
+            os.path.normpath.
         @type repo_abspath: str
 
-        @param abspath: Absolute path to a file within repo_abspath. Normalized via os.path.normpath.
+        @param abspath: Absolute path to a file within repo_abspath. Normalized via
+            os.path.normpath.
         @type abspath: str
 
         @return: List of path components.
@@ -374,8 +438,8 @@ class GitArchiver(object):
 
         if not path.commonprefix([repo_abspath, abspath]):
             raise ValueError(
-                "abspath (\"{0}\") MUST have common prefix with repo_abspath (\"{1}\")"
-                .format(abspath, repo_abspath)
+                'abspath ("%s") MUST have common prefix with repo_abspath ("%s")'
+                % (abspath, repo_abspath)
             )
 
         components = []
@@ -403,15 +467,20 @@ class GitArchiver(object):
         @rtype: str
         @return: Output of the command.
 
-        @raise CalledProcessError:  Raises exception if return code of the command is non-zero.
+        @raise CalledProcessError:  Raises exception if return code of the command is
+            non-zero.
         """
         p = Popen(cmd, shell=True, stdout=PIPE, cwd=cwd)
         output, _ = p.communicate()
-        output = output.decode('unicode_escape').encode('raw_unicode_escape').decode('utf-8')
+        output = (
+            output.decode("unicode_escape").encode("raw_unicode_escape").decode("utf-8")
+        )
 
         if p.returncode:
             if sys.version_info > (2, 6):
-                raise CalledProcessError(returncode=p.returncode, cmd=cmd, output=output)
+                raise CalledProcessError(
+                    returncode=p.returncode, cmd=cmd, output=output
+                )
             else:
                 raise CalledProcessError(returncode=p.returncode, cmd=cmd)
 
@@ -423,44 +492,58 @@ def main():
 
     parser = OptionParser(
         usage="usage: %prog [-v] [--prefix PREFIX] [--no-exclude] [--force-submodules]"
-              " [--extra EXTRA1 [EXTRA2]] [--dry-run] OUTPUT_FILE",
-        version="%prog {0}".format(__version__)
+        " [--extra EXTRA1 [EXTRA2]] [--dry-run] OUTPUT_FILE",
+        version="%prog {0}".format(__version__),
     )
 
-    parser.add_option('--prefix',
-                      type='string',
-                      dest='prefix',
-                      default=None,
-                      help="""prepend PREFIX to each filename in the archive.
-                          OUTPUT_FILE name is used by default to avoid tarbomb.
-                          You can set it to '' in order to explicitly request tarbomb""")
-
-    parser.add_option('-v', '--verbose',
-                      action='store_true',
-                      dest='verbose',
-                      help='enable verbose mode')
-
-    parser.add_option('--no-exclude',
-                      action='store_false',
-                      dest='exclude',
-                      default=True,
-                      help="don't read .gitattributes files for patterns containing export-ignore attrib")
-
-    parser.add_option('--force-submodules',
-                      action='store_true',
-                      dest='force_sub',
-                      help='force a git submodule init && git submodule update at each level before iterating submodules')
-
-    parser.add_option('--extra',
-                      action='append',
-                      dest='extra',
-                      default=[],
-                      help="any additional files to include in the archive")
-
-    parser.add_option('--dry-run',
-                      action='store_true',
-                      dest='dry_run',
-                      help="don't actually archive anything, just show what would be done")
+    parser.add_option(
+        "--prefix",
+        type="string",
+        dest="prefix",
+        default=None,
+        help="""prepend PREFIX to each filename in the archive.
+                OUTPUT_FILE name is used by default to avoid tarbomb.
+                You can set it to '' in order to explicitly request tarbomb""",
+    )
+
+    parser.add_option(
+        "-v",
+        "--verbose",
+        action="store_true",
+        dest="verbose",
+        help="enable verbose mode",
+    )
+
+    parser.add_option(
+        "--no-exclude",
+        action="store_false",
+        dest="exclude",
+        default=True,
+        help="don't read .gitattributes for patterns containing export-ignore attrib",
+    )
+
+    parser.add_option(
+        "--force-submodules",
+        action="store_true",
+        dest="force_sub",
+        help="force a git submodule init && git submodule update"
+        "at each level before iterating submodules",
+    )
+
+    parser.add_option(
+        "--extra",
+        action="append",
+        dest="extra",
+        default=[],
+        help="any additional files to include in the archive",
+    )
+
+    parser.add_option(
+        "--dry-run",
+        action="store_true",
+        dest="dry_run",
+        help="don't actually archive anything, just show what would be done",
+    )
 
     options, args = parser.parse_args()
 
@@ -474,27 +557,41 @@ def main():
 
     # avoid tarbomb
     if options.prefix is not None:
-        options.prefix = path.join(options.prefix, '')
+        options.prefix = path.join(options.prefix, "")
     else:
         import re
 
         output_name = path.basename(output_file_path)
-        output_name = re.sub(
-            '(\.zip|\.tar|\.tgz|\.txz|\.gz|\.bz2|\.xz|\.tar\.gz|\.tar\.bz2|\.tar\.xz)$',
-            '',
-            output_name
-        ) or "Archive"
-        options.prefix = path.join(output_name, '')
+        extensions = [
+            "zip",
+            "tar",
+            "tgz",
+            "txz",
+            "gz",
+            "bz2",
+            "xz",
+            r"tar\.gz",
+            r"tar\.bz2",
+            r"tar\.xz",
+        ]
+        output_name = (
+            re.sub(
+                "(" + "|".join(r"\." + e for e in extensions) + ")$",
+                "",
+                output_name,
+            )
+            or "Archive"
+        )
+        options.prefix = path.join(output_name, "")
 
     try:
         handler = logging.StreamHandler(sys.stdout)
-        handler.setFormatter(logging.Formatter('%(message)s'))
+        handler.setFormatter(logging.Formatter("%(message)s"))
         GitArchiver.LOG.addHandler(handler)
         GitArchiver.LOG.setLevel(logging.DEBUG if options.verbose else logging.INFO)
-        archiver = GitArchiver(options.prefix,
-                               options.exclude,
-                               options.force_sub,
-                               options.extra)
+        archiver = GitArchiver(
+            options.prefix, options.exclude, options.force_sub, options.extra
+        )
         archiver.create(output_file_path, options.dry_run)
     except Exception as e:
         parser.exit(2, "{0}\n".format(e))
@@ -502,6 +599,5 @@ def main():
     sys.exit(0)
 
 
-if __name__ == '__main__':
+if __name__ == "__main__":
     main()
-
diff --git a/cmake/gitlog-to-changelog b/cmake/gitlog-to-changelog
index 78afff4..ac0360f 100755
--- a/cmake/gitlog-to-changelog
+++ b/cmake/gitlog-to-changelog
@@ -1,3 +1,4 @@
+#!/usr/bin/env perl
 eval '(exit $?0)' && eval 'exec perl -wS "$0" ${1+"$@"}'
   & eval 'exec perl -wS "$0" $argv:q'
     if 0;
diff --git a/cmake/gtest.cmake b/cmake/gtest.cmake
index 177aea7..68de398 100644
--- a/cmake/gtest.cmake
+++ b/cmake/gtest.cmake
@@ -1,29 +1,32 @@
 # Copyright (C) 2018 INRIA
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-set(CURRENT_FILE_PATH ${CMAKE_CURRENT_LIST_DIR} CACHE INTERNAL "")
+set(CURRENT_FILE_PATH
+    ${CMAKE_CURRENT_LIST_DIR}
+    CACHE INTERNAL "")
 
-#.rst:
-# .. command:: ADD_GTEST_SUITE([GIT_TAG])
+# .rst: .. command:: ADD_GTEST_SUITE([GIT_TAG])
 #
-#    GIT_TAG: the git tag of gtest. This optional argument allows to use a precise version of gtest (not necessarily the last master branch).
+# GIT_TAG: the git tag of gtest. This optional argument allows to use a precise
+# version of gtest (not necessarily the last master branch).
 #
-#    Download and configure gtest.
-#    This macro follows the https://github.com/google/googletest/tree/master/googletest#incorporating-into-an-existing-cmake-project instructions. 
+# Download and configure gtest. This macro follows the
+# https://github.com/google/googletest/tree/master/googletest#incorporating-into-an-existing-cmake-project
+# instructions.
 #
-MACRO(ADD_GTEST_SUITE)
+macro(ADD_GTEST_SUITE)
   # Handle optional argument
   set(GTEST_GIT_TAG "master")
   set(extra_macro_args ${ARGN})
@@ -32,31 +35,34 @@ MACRO(ADD_GTEST_SUITE)
     list(GET extra_macro_args 0 GTEST_GIT_TAG)
   endif()
   # Download and unpack googletest at configure time
-  configure_file(${CURRENT_FILE_PATH}/gtest/CMakeLists.txt.in gtest/CMakeLists.txt)
-  execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
+  configure_file(${CURRENT_FILE_PATH}/gtest/CMakeLists.txt.in
+                 gtest/CMakeLists.txt)
+  execute_process(
+    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
     RESULT_VARIABLE result
-    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/gtest )
+    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/gtest)
   if(result)
     message(FATAL_ERROR "CMake step for googletest failed: ${result}")
   endif()
-  execute_process(COMMAND ${CMAKE_COMMAND} --build .
+  execute_process(
+    COMMAND ${CMAKE_COMMAND} --build .
     RESULT_VARIABLE result
-    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/gtest )
+    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/gtest)
   if(result)
     message(FATAL_ERROR "Build step for googletest failed: ${result}")
   endif()
 
-  # Prevent overriding the parent project's compiler/linker
-  # settings on Windows
-  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
+  # Prevent overriding the parent project's compiler/linker settings on Windows
+  set(gtest_force_shared_crt
+      ON
+      CACHE BOOL "" FORCE)
 
-  # Add googletest directly to our build. This defines
-  # the gtest and gtest_main targets.
+  # Add googletest directly to our build. This defines the gtest and gtest_main
+  # targets.
   add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/gtest/src
-                   ${CMAKE_CURRENT_BINARY_DIR}/gtest/build
-                   EXCLUDE_FROM_ALL)
+                   ${CMAKE_CURRENT_BINARY_DIR}/gtest/build EXCLUDE_FROM_ALL)
 
   # Force the include directories to be silent with respect to warnings.
   include_directories(SYSTEM "${gtest_SOURCE_DIR}/include")
 
-ENDMACRO(ADD_GTEST_SUITE)
+endmacro(ADD_GTEST_SUITE)
diff --git a/cmake/header.cmake b/cmake/header.cmake
index 0872708..9aeda9b 100644
--- a/cmake/header.cmake
+++ b/cmake/header.cmake
@@ -1,224 +1,203 @@
 # Copyright (C) 2008-2019 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
-#   .. variable:: ${PROJECT_NAME}_HEADERS
+# .. variable:: ${PROJECT_NAME}_HEADERS
 #
-#     List of C++ header filenames. They will be installed automatically
-#     using :command:`HEADER_INSTALL`
+# List of C++ header filenames. They will be installed automatically using
+# :command:`HEADER_INSTALL`
 #
 
-#.rst:
-# .. ifmode:: internal
+# .rst: .. ifmode:: internal
 #
-#   .. command:: _SETUP_PROJECT_HEADER
+# .. command:: _SETUP_PROJECT_HEADER
 #
-#     This setup CMake to handle headers properly.
+# This setup CMake to handle headers properly.
 #
-#     1. The `include` directory in the build and source trees is added
-#        to the include search path (see INCLUDE_DIRECTORIES).
-#        As always, the build directory has the priority over the source
-#        directory in case of conflict.
+# 1. The `include` directory in the build and source trees is added to the
+#   include search path (see INCLUDE_DIRECTORIES). As always, the build
+#   directory has the priority over the source directory in case of conflict.
 #
-#        However you *should not* have conflicting names
-#        for files which are both in the build and source trees.
-#        Conflicting names are filenames which differ only by a prefix:
+# However you *should not* have conflicting names for files which are both in
+# the build and source trees. Conflicting names are filenames which differ only
+# by a prefix:
 #
-#        include/a.h vs _build/include/a.h
-#        src/a.h     vs src/foo/a.h
+# include/a.h vs _build/include/a.h src/a.h     vs src/foo/a.h
 #
-#        ...this files makes a project very fragile as the -I ordering
-#        will have a lot of importance and may break easily when using
-#        tools which may reorder the pre-processor flags such as pkg-config.
+# ...this files makes a project very fragile as the -I ordering will have a lot
+# of importance and may break easily when using tools which may reorder the
+# pre-processor flags such as pkg-config.
 #
+# 1. The headers are installed in the prefix in a way which preserves the
+#   directory structure.
 #
-#     2. The headers are installed in the prefix
-#        in a way which preserves the directory structure.
+# The directory name for header follows the rule: each non alpha-numeric
+# character is replaced by a slash (`/`). In practice, it means that hpp-util
+# will put its header in: ${CMAKE_INSTALL_PREFIX}/include/hpp/util
 #
-#        The directory name for header follows the rule:
-#        each non alpha-numeric character is replaced by a slash (`/`).
-#        In practice, it means that hpp-util will put its header in:
-#        ${CMAKE_INSTALL_PREFIX}/include/hpp/util
+# This rule has been decided to homogenize headers location, however some
+# packages do not follow this rule (dg-middleware for instance).
 #
-#        This rule has been decided to homogenize headers location, however
-#        some packages do not follow this rule (dg-middleware for instance).
+# In that case, CUSTOM_HEADER_DIR can be set to override this policy.
 #
-#        In that case, CUSTOM_HEADER_DIR can be set to override this policy.
+# Reminder: breaking the JRL/LAAS policies shoud be done after discussing the
+# issue. You should at least open a ticket or send an e-mail to notify this
+# behavior.
 #
-#        Reminder: breaking the JRL/LAAS policies shoud be done after
-#                  discussing the issue. You should at least open a ticket
-#                  or send an e-mail to notify this behavior.
-#
-MACRO(_SETUP_PROJECT_HEADER)
+macro(_SETUP_PROJECT_HEADER)
   # Install project headers.
-  IF(DEFINED CUSTOM_HEADER_DIR)
-    SET(HEADER_DIR "${CUSTOM_HEADER_DIR}")
-  ELSE(DEFINED CUSTOM_HEADER_DIR)
-    STRING(REGEX REPLACE "[^a-zA-Z0-9]" "/" HEADER_DIR "${PROJECT_NAME}")
-  ENDIF(DEFINED CUSTOM_HEADER_DIR)
+  if(DEFINED CUSTOM_HEADER_DIR)
+    set(HEADER_DIR "${CUSTOM_HEADER_DIR}")
+  else(DEFINED CUSTOM_HEADER_DIR)
+    string(REGEX REPLACE "[^a-zA-Z0-9]" "/" HEADER_DIR "${PROJECT_NAME}")
+  endif(DEFINED CUSTOM_HEADER_DIR)
 
-  IF(NOT DEFINED PROJECT_CUSTOM_HEADER_EXTENSION)
-    SET(PROJECT_CUSTOM_HEADER_EXTENSION "hh")
-  ENDIF(NOT DEFINED PROJECT_CUSTOM_HEADER_EXTENSION)
+  if(NOT DEFINED PROJECT_CUSTOM_HEADER_EXTENSION)
+    set(PROJECT_CUSTOM_HEADER_EXTENSION "hh")
+  endif(NOT DEFINED PROJECT_CUSTOM_HEADER_EXTENSION)
 
-  STRING(TOLOWER "${HEADER_DIR}" "HEADER_DIR")
+  string(TOLOWER "${HEADER_DIR}" "HEADER_DIR")
 
   # Generate config.hh header.
-  STRING(REGEX REPLACE "[^a-zA-Z0-9]" "_"
-    PACKAGE_CPPNAME "${PROJECT_NAME}")
-  STRING(TOLOWER "${PACKAGE_CPPNAME}" "PACKAGE_CPPNAME_LOWER")
-  STRING(TOUPPER "${PACKAGE_CPPNAME}" "PACKAGE_CPPNAME")
+  string(REGEX REPLACE "[^a-zA-Z0-9]" "_" PACKAGE_CPPNAME "${PROJECT_NAME}")
+  string(TOLOWER "${PACKAGE_CPPNAME}" "PACKAGE_CPPNAME_LOWER")
+  string(TOUPPER "${PACKAGE_CPPNAME}" "PACKAGE_CPPNAME")
 
-  GENERATE_CONFIGURATION_HEADER(
+  generate_configuration_header(
     ${HEADER_DIR} config.${PROJECT_CUSTOM_HEADER_EXTENSION} ${PACKAGE_CPPNAME}
     ${PACKAGE_CPPNAME_LOWER}_EXPORTS)
 
   # Generate deprecated.hh header.
-  CONFIGURE_FILE(
+  configure_file(
     ${PROJECT_JRL_CMAKE_MODULE_DIR}/deprecated.hh.cmake
     ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/deprecated.${PROJECT_CUSTOM_HEADER_EXTENSION}
-    @ONLY
-    )
+    @ONLY)
 
-  IF(INSTALL_GENERATED_HEADERS)
-    INSTALL(FILES
-      ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/deprecated.${PROJECT_CUSTOM_HEADER_EXTENSION}
+  if(INSTALL_GENERATED_HEADERS)
+    install(
+      FILES
+        ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/deprecated.${PROJECT_CUSTOM_HEADER_EXTENSION}
       DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${HEADER_DIR}
-      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE
-      )
-  ENDIF(INSTALL_GENERATED_HEADERS)
+      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
+  endif(INSTALL_GENERATED_HEADERS)
 
   # Generate warning.hh header.
-  CONFIGURE_FILE(
+  configure_file(
     ${PROJECT_JRL_CMAKE_MODULE_DIR}/warning.hh.cmake
     ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/warning.${PROJECT_CUSTOM_HEADER_EXTENSION}
-    @ONLY
-    )
+    @ONLY)
 
-  IF(INSTALL_GENERATED_HEADERS)
-    INSTALL(FILES
-      ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/warning.${PROJECT_CUSTOM_HEADER_EXTENSION}
+  if(INSTALL_GENERATED_HEADERS)
+    install(
+      FILES
+        ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/warning.${PROJECT_CUSTOM_HEADER_EXTENSION}
       DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${HEADER_DIR}
-      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE
-      )
-  ENDIF(INSTALL_GENERATED_HEADERS)
-
+      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
+  endif(INSTALL_GENERATED_HEADERS)
 
-  # Generate config.h header.
-  # This header, unlike the previous one is *not* installed and is generated
-  # in the top-level directory of the build tree.
+  # Generate config.h header. This header, unlike the previous one is *not*
+  # installed and is generated in the top-level directory of the build tree.
   # Therefore it must not be included by any distributed header.
-  CONFIGURE_FILE(
-    ${PROJECT_JRL_CMAKE_MODULE_DIR}/config.h.cmake
-    ${CMAKE_CURRENT_BINARY_DIR}/config.h
-    )
-
-  # Default include directories:
-  # - top-level build directory (for generated non-distributed headers).
-  # - include directory in the build tree (for generated, distributed headers).
-  # - include directory in the source tree (non-generated, distributed headers).
-  INCLUDE_DIRECTORIES(
-    ${CMAKE_CURRENT_BINARY_DIR}
-    ${CMAKE_CURRENT_BINARY_DIR}/include
-    ${PROJECT_SOURCE_DIR}/include
-    )
-ENDMACRO(_SETUP_PROJECT_HEADER)
+  configure_file(${PROJECT_JRL_CMAKE_MODULE_DIR}/config.h.cmake
+                 ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+
+  # Default include directories: - top-level build directory (for generated
+  # non-distributed headers). - include directory in the build tree (for
+  # generated, distributed headers). - include directory in the source tree
+  # (non-generated, distributed headers).
+  include_directories(
+    ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/include
+    ${PROJECT_SOURCE_DIR}/include)
+endmacro(_SETUP_PROJECT_HEADER)
 
 # GENERATE_CONFIGURATION_HEADER
 # -----------------------------
 #
-# This macro generates a configuration header. Macro parameters may be
-# used to customize it.
-#
-# HEADER_DIR    : where to generate the header
-# FILENAME      : how should the file named
-# LIBRARY_NAME  : CPP symbol prefix, should match the compiled library name
-# EXPORT_SYMBOl : what symbol controls the switch between symbol import/export
-FUNCTION(GENERATE_CONFIGURATION_HEADER
-    HEADER_DIR FILENAME LIBRARY_NAME EXPORT_SYMBOL)
-
-  IF(${PROJECT_VERSION_MAJOR} MATCHES UNKNOWN)
-    SET(PROJECT_VERSION_MAJOR_CONFIG ${LIBRARY_NAME}_VERSION_UNKNOWN_TAG)
-  ELSE()
-    SET(PROJECT_VERSION_MAJOR_CONFIG ${PROJECT_VERSION_MAJOR})
-  ENDIF()
-
-  IF(${PROJECT_VERSION_MINOR} MATCHES UNKNOWN)
-    SET(PROJECT_VERSION_MINOR_CONFIG ${LIBRARY_NAME}_VERSION_UNKNOWN_TAG)
-  ELSE()
-    SET(PROJECT_VERSION_MINOR_CONFIG ${PROJECT_VERSION_MINOR})
-  ENDIF()
-
-  IF(${PROJECT_VERSION_PATCH} MATCHES UNKNOWN)
-    SET(PROJECT_VERSION_PATCH_CONFIG ${LIBRARY_NAME}_VERSION_UNKNOWN_TAG)
-  ELSE()
-    SET(PROJECT_VERSION_PATCH_CONFIG ${PROJECT_VERSION_PATCH})
-  ENDIF()
+# This macro generates a configuration header. Macro parameters may be used to
+# customize it.
+#
+# HEADER_DIR    : where to generate the header FILENAME      : how should the
+# file named LIBRARY_NAME  : CPP symbol prefix, should match the compiled
+# library name EXPORT_SYMBOl : what symbol controls the switch between symbol
+# import/export
+function(GENERATE_CONFIGURATION_HEADER HEADER_DIR FILENAME LIBRARY_NAME
+         EXPORT_SYMBOL)
+
+  if(${PROJECT_VERSION_MAJOR} MATCHES UNKNOWN)
+    set(PROJECT_VERSION_MAJOR_CONFIG ${LIBRARY_NAME}_VERSION_UNKNOWN_TAG)
+  else()
+    set(PROJECT_VERSION_MAJOR_CONFIG ${PROJECT_VERSION_MAJOR})
+  endif()
+
+  if(${PROJECT_VERSION_MINOR} MATCHES UNKNOWN)
+    set(PROJECT_VERSION_MINOR_CONFIG ${LIBRARY_NAME}_VERSION_UNKNOWN_TAG)
+  else()
+    set(PROJECT_VERSION_MINOR_CONFIG ${PROJECT_VERSION_MINOR})
+  endif()
+
+  if(${PROJECT_VERSION_PATCH} MATCHES UNKNOWN)
+    set(PROJECT_VERSION_PATCH_CONFIG ${LIBRARY_NAME}_VERSION_UNKNOWN_TAG)
+  else()
+    set(PROJECT_VERSION_PATCH_CONFIG ${PROJECT_VERSION_PATCH})
+  endif()
 
   # Generate the header.
-  CONFIGURE_FILE(
+  configure_file(
     ${PROJECT_JRL_CMAKE_MODULE_DIR}/config.hh.cmake
-    ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/${FILENAME}
-    @ONLY
-    )
+    ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/${FILENAME} @ONLY)
 
   # Install it if requested.
-  IF(INSTALL_GENERATED_HEADERS)
-    INSTALL(FILES
-      ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/${FILENAME}
+  if(INSTALL_GENERATED_HEADERS)
+    install(
+      FILES ${CMAKE_CURRENT_BINARY_DIR}/include/${HEADER_DIR}/${FILENAME}
       DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${HEADER_DIR}
-      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE
-      )
-  ENDIF(INSTALL_GENERATED_HEADERS)
-ENDFUNCTION(GENERATE_CONFIGURATION_HEADER)
-
+      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
+  endif(INSTALL_GENERATED_HEADERS)
+endfunction(GENERATE_CONFIGURATION_HEADER)
 
 # _SETUP_PROJECT_HEADER_FINALIZE
 # ------------------------------
 #
-# Post-processing of the header management step.
-# Install public headers if required.
+# Post-processing of the header management step. Install public headers if
+# required.
 #
-MACRO(_SETUP_PROJECT_HEADER_FINALIZE)
+macro(_SETUP_PROJECT_HEADER_FINALIZE)
   # If the header list is set, install it.
-  IF(DEFINED ${PROJECT_NAME}_HEADERS)
-    FOREACH(FILE ${${PROJECT_NAME}_HEADERS})
-      HEADER_INSTALL (${FILE})
-    ENDFOREACH(FILE)
-  ENDIF(DEFINED ${PROJECT_NAME}_HEADERS)
-ENDMACRO(_SETUP_PROJECT_HEADER_FINALIZE)
-
-
-#.rst:
-# .. ifmode:: internal
-#
-#   .. command:: HEADER_INSTALL (FILES)
-#
-#     Install a list of headers.
-#
-MACRO(HEADER_INSTALL FILES)
-  FOREACH(FILE ${FILES})
-    GET_FILENAME_COMPONENT(DIR "${FILE}" PATH)
-    STRING(REGEX REPLACE "${CMAKE_BINARY_DIR}" "" DIR "${DIR}")
-    STRING(REGEX REPLACE "${PROJECT_SOURCE_DIR}" "" DIR "${DIR}")
-    STRING(REGEX REPLACE "include(/|$)" "" DIR "${DIR}")
-    INSTALL(FILES ${FILE}
+  if(DEFINED ${PROJECT_NAME}_HEADERS)
+    foreach(FILE ${${PROJECT_NAME}_HEADERS})
+      header_install(${FILE})
+    endforeach(FILE)
+  endif(DEFINED ${PROJECT_NAME}_HEADERS)
+endmacro(_SETUP_PROJECT_HEADER_FINALIZE)
+
+# .rst: .. ifmode:: internal
+#
+# .. command:: HEADER_INSTALL (FILES)
+#
+# Install a list of headers.
+#
+macro(HEADER_INSTALL FILES)
+  foreach(FILE ${FILES})
+    get_filename_component(DIR "${FILE}" PATH)
+    string(REGEX REPLACE "${CMAKE_BINARY_DIR}" "" DIR "${DIR}")
+    string(REGEX REPLACE "${PROJECT_SOURCE_DIR}" "" DIR "${DIR}")
+    string(REGEX REPLACE "include(/|$)" "" DIR "${DIR}")
+    install(
+      FILES ${FILE}
       DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${DIR}"
-      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE
-      )
-  ENDFOREACH()
-ENDMACRO()
+      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
+  endforeach()
+endmacro()
diff --git a/cmake/hpp.cmake b/cmake/hpp.cmake
index b43b350..f038185 100644
--- a/cmake/hpp.cmake
+++ b/cmake/hpp.cmake
@@ -1,15 +1,14 @@
-# Copyright (C) 2018 LAAS-CNRS
-# Authors: Joseph Mirabel
+# Copyright (C) 2018 LAAS-CNRS Authors: Joseph Mirabel
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are met:
-# 
+#
 # 1. Redistributions of source code must retain the above copyright notice, this
-#    list of conditions and the following disclaimer.
+#   list of conditions and the following disclaimer.
 #
-# 2. Redistributions in binary form must reproduce the above copyright notice,
-#    this list of conditions and the following disclaimer in the documentation
-#    and/or other materials provided with the distribution.
+# 1. Redistributions in binary form must reproduce the above copyright notice,
+#   this list of conditions and the following disclaimer in the documentation
+#   and/or other materials provided with the distribution.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
@@ -54,24 +53,28 @@ The varible :cmake:variable:`PROJECT_URL` is set to
 
 #]=============================================================================]
 
-IF (NOT DEFINED PROJECT_ORG)
-  SET(PROJECT_ORG "humanoid-path-planner")
-ENDIF (NOT DEFINED PROJECT_ORG)
+if(NOT DEFINED PROJECT_ORG)
+  set(PROJECT_ORG "humanoid-path-planner")
+endif(NOT DEFINED PROJECT_ORG)
 
-IF (NOT DEFINED PROJECT_URL)
-  SET(PROJECT_URL "https://github.com/${PROJECT_ORG}/${PROJECT_NAME}")
-ENDIF (NOT DEFINED PROJECT_URL)
+if(NOT DEFINED PROJECT_URL)
+  set(PROJECT_URL "https://github.com/${PROJECT_ORG}/${PROJECT_NAME}")
+endif(NOT DEFINED PROJECT_URL)
 
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/base.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/hpp/doc.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/base.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/hpp/doc.cmake)
 
 # Activate hpp-util logging if requested
-SET (HPP_DEBUG FALSE CACHE BOOL "trigger hpp-util debug output")
-IF (HPP_DEBUG)
-  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHPP_DEBUG")
-ENDIF()
+set(HPP_DEBUG
+    FALSE
+    CACHE BOOL "trigger hpp-util debug output")
+if(HPP_DEBUG)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHPP_DEBUG")
+endif()
 # Activate hpp-util logging if requested
-SET (HPP_BENCHMARK FALSE CACHE BOOL "trigger hpp-util benchmark output")
-IF (HPP_BENCHMARK)
-  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHPP_ENABLE_BENCHMARK")
-ENDIF()
+set(HPP_BENCHMARK
+    FALSE
+    CACHE BOOL "trigger hpp-util benchmark output")
+if(HPP_BENCHMARK)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHPP_ENABLE_BENCHMARK")
+endif()
diff --git a/cmake/hpp/doc.cmake b/cmake/hpp/doc.cmake
index 894a6af..631d7f1 100644
--- a/cmake/hpp/doc.cmake
+++ b/cmake/hpp/doc.cmake
@@ -1,15 +1,14 @@
-# Copyright (C) 2018 LAAS-CNRS
-# Authors: Joseph Mirabel
+# Copyright (C) 2018 LAAS-CNRS Authors: Joseph Mirabel
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are met:
-# 
+#
 # 1. Redistributions of source code must retain the above copyright notice, this
-#    list of conditions and the following disclaimer.
+#   list of conditions and the following disclaimer.
 #
-# 2. Redistributions in binary form must reproduce the above copyright notice,
-#    this list of conditions and the following disclaimer in the documentation
-#    and/or other materials provided with the distribution.
+# 1. Redistributions in binary form must reproduce the above copyright notice,
+#   this list of conditions and the following disclaimer in the documentation
+#   and/or other materials provided with the distribution.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
@@ -22,9 +21,9 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-IF(NOT DEFINED DOXYGEN_LAYOUT_FILE)
-  SET(DOXYGEN_LAYOUT_FILE "${CMAKE_CURRENT_LIST_DIR}/doc/layout.xml")
-ENDIF()
-IF(NOT DEFINED DOXYGEN_USE_TEMPLATE_CSS)
-  SET(DOXYGEN_USE_TEMPLATE_CSS TRUE)
-ENDIF()
+if(NOT DEFINED DOXYGEN_LAYOUT_FILE)
+  set(DOXYGEN_LAYOUT_FILE "${CMAKE_CURRENT_LIST_DIR}/doc/layout.xml")
+endif()
+if(NOT DEFINED DOXYGEN_USE_TEMPLATE_CSS)
+  set(DOXYGEN_USE_TEMPLATE_CSS TRUE)
+endif()
diff --git a/cmake/hpp/doc/layout.xml b/cmake/hpp/doc/layout.xml
index 3fdaa73..32ace6e 100644
--- a/cmake/hpp/doc/layout.xml
+++ b/cmake/hpp/doc/layout.xml
@@ -12,7 +12,7 @@
     </tab>
     <tab type="classes" visible="yes" title="">
       <tab type="classlist" visible="yes" title="" intro=""/>
-      <tab type="classindex" visible="$ALPHABETICAL_INDEX" title=""/> 
+      <tab type="classindex" visible="$ALPHABETICAL_INDEX" title=""/>
       <tab type="hierarchy" visible="yes" title="" intro=""/>
       <tab type="classmembers" visible="yes" title="" intro=""/>
     </tab>
@@ -20,7 +20,7 @@
       <tab type="filelist" visible="yes" title="" intro=""/>
       <tab type="globals" visible="yes" title="" intro=""/>
     </tab>
-    <tab type="examples" visible="yes" title="" intro=""/>  
+    <tab type="examples" visible="yes" title="" intro=""/>
   </navindex>
 
   <!-- Layout definition for a class page -->
diff --git a/cmake/hpp/idl/omniidl_be_python_with_docstring.py b/cmake/hpp/idl/omniidl_be_python_with_docstring.py
index a02b3ab..558f7bc 100644
--- a/cmake/hpp/idl/omniidl_be_python_with_docstring.py
+++ b/cmake/hpp/idl/omniidl_be_python_with_docstring.py
@@ -24,22 +24,26 @@
 # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 # POSSIBILITY OF SUCH DAMAGE.
 
-from omniidl_be.python import *
+from omniidl_be.python import comment, output_inline
 from omniidl_be.python import run as run_parent
 from omniidl import idlvisitor, idlast, idltype
 
+
 def _rreplace(s, old, new, occurrence):
     li = s.rsplit(old, occurrence)
     return new.join(li)
 
-class CommentToConstVisitor (idlvisitor.AstVisitor):
+
+class CommentToConstVisitor(idlvisitor.AstVisitor):
     def __init__(self):
         import re
-        self.commentStart  = re.compile (r"^//+ ?")
 
-    def _commentToConst (self, node, comments):
+        self.commentStart = re.compile(r"^//+ ?")
+
+    def _commentToConst(self, node, comments):
         import re
-        texts =  []
+
+        texts = []
         line = node.line()
         # TODO here, we only use the comments before.
         comment = node
@@ -49,50 +53,57 @@ class CommentToConstVisitor (idlvisitor.AstVisitor):
             line = c.line()
             comment = c
             text = c.text()
-            texts.append (re.sub(self.commentStart, "", text))
-        if len(texts)==0:
+            texts.append(re.sub(self.commentStart, "", text))
+        if len(texts) == 0:
             if isinstance(node, idlast.Attribute):
                 for i in node.identifiers():
-                    print (i + " documentation may be ill-formed.")
+                    print(i + " documentation may be ill-formed.")
             else:
-                print (node.identifier() + " documentation may be ill-formed.")
+                print(node.identifier() + " documentation may be ill-formed.")
         texts.reverse()
         # Extract the prototype of the function
         try:
             if isinstance(node, idlast.Operation):
                 with open(node.file()) as fp:
-                    for _ in range(node.line()-1): fp.readline()
+                    for _ in range(node.line() - 1):
+                        fp.readline()
                     line = fp.readline()
-                    texts.append("\nPrototype:\t"+ line)
+                    texts.append("\nPrototype:\t" + line)
                     while line != "":
-                        if ';' in line:
+                        if ";" in line:
                             break
                         line = fp.readline()
-                        texts.append("           \t"+ line)
-        except:
+                        texts.append("           \t" + line)
+        except Exception:
             pass
-        if len(texts)==0: return None
-        text = ''.join (texts)
+        if len(texts) == 0:
+            return None
+        text = "".join(texts)
         id = node.identifier() + "__doc__"
-        return idlast.Const (
-                comment.file(),
-                comment.line(),
-                node.mainFile(),
-                node.pragmas(),
-                [], # comments
-                id, #identifier
-                node.scopedName()[:-1] + [ id, ], #scopedName
-                _rreplace (node.repoId(), node.identifier(), id, 1), # repoId
-                idltype.String (0), # constType, 0 means unbounded
-                idltype.tk_string, # constKind
-                text # value
-                )
-    def _addDoc (self, parent, node):
-        #Commented in order to add the prototype to the documentation.
-        #if len(node.comments()) > 0:
+        return idlast.Const(
+            comment.file(),
+            comment.line(),
+            node.mainFile(),
+            node.pragmas(),
+            [],  # comments
+            id,  # identifier
+            node.scopedName()[:-1]
+            + [
+                id,
+            ],  # scopedName
+            _rreplace(node.repoId(), node.identifier(), id, 1),  # repoId
+            idltype.String(0),  # constType, 0 means unbounded
+            idltype.tk_string,  # constKind
+            text,  # value
+        )
+
+    def _addDoc(self, parent, node):
+        # Commented in order to add the prototype to the documentation.
+        # if len(node.comments()) > 0:
         if True:
-            const = self._commentToConst (node, node.comments())
-            if const is None: return
+            const = self._commentToConst(node, node.comments())
+            if const is None:
+                return
             if isinstance(parent, idlast.Module):
                 parent._Module__definitions.append(const)
             elif isinstance(parent, idlast.Interface):
@@ -101,31 +112,33 @@ class CommentToConstVisitor (idlvisitor.AstVisitor):
             elif isinstance(parent, idlast.AST):
                 parent._AST__declarations.append(const)
             else:
-                print ("Doc ignored: " + comment.text())
-
+                print("Doc ignored: " + comment.text())
 
     def visitAST(self, node):
         for n in node.declarations():
-            if not output_inline and not n.mainFile(): continue
+            if not output_inline and not n.mainFile():
+                continue
 
             if isinstance(n, idlast.Module) or isinstance(n, idlast.Interface):
-                self._addDoc (node, n)
+                self._addDoc(node, n)
                 n.accept(self)
 
     def visitModule(self, node):
         for n in node.definitions():
-            if not output_inline and not n.mainFile(): continue
+            if not output_inline and not n.mainFile():
+                continue
 
             if isinstance(n, idlast.Module) or isinstance(n, idlast.Interface):
-                self._addDoc (node, n)
+                self._addDoc(node, n)
                 n.accept(self)
 
     def visitInterface(self, node):
         for c in node.callables():
-            self._addDoc (node, c)
+            self._addDoc(node, c)
+
 
 def run(tree, args):
-    ccv = CommentToConstVisitor ()
+    ccv = CommentToConstVisitor()
     tree.accept(ccv)
 
-    run_parent (tree, args)
+    run_parent(tree, args)
diff --git a/cmake/ide.cmake b/cmake/ide.cmake
index 29964ab..76e757e 100644
--- a/cmake/ide.cmake
+++ b/cmake/ide.cmake
@@ -1,99 +1,104 @@
 # Copyright (C) 2017-2019 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
+function(LARGEST_COMMON_PREFIX a b prefix)
+  string(LENGTH ${a} len_a)
+  string(LENGTH ${b} len_b)
 
-FUNCTION(LARGEST_COMMON_PREFIX a b prefix)
-  STRING(LENGTH ${a} len_a)
-  STRING(LENGTH ${b} len_b)
+  if(${len_a} LESS ${len_b})
+    set(len ${len_a})
+  else()
+    set(len ${len_b})
+  endif()
 
-  IF(${len_a} LESS ${len_b})
-      SET(len ${len_a})
-  ELSE()
-      SET(len ${len_b} )
-  ENDIF()
+  set(${prefix}
+      ""
+      PARENT_SCOPE)
+  foreach(size RANGE 1 ${len})
+    string(SUBSTRING ${a} 0 ${size} sub_a)
+    string(SUBSTRING ${b} 0 ${size} sub_b)
 
-  SET(${prefix} "" PARENT_SCOPE)
-  FOREACH(size RANGE 1 ${len})
-      STRING(SUBSTRING ${a} 0 ${size} sub_a)
-      STRING(SUBSTRING ${b} 0 ${size} sub_b)
+    if(${sub_a} STREQUAL ${sub_b})
+      set(${prefix}
+          ${sub_a}
+          PARENT_SCOPE)
+    else()
+      break()
+    endif()
+  endforeach()
+endfunction()
 
-      IF(${sub_a} STREQUAL ${sub_b} )
-          SET(${prefix} ${sub_a} PARENT_SCOPE)
-      ELSE()
-          BREAK()
-      ENDIF()
-  ENDFOREACH()
-ENDFUNCTION()
-
-FUNCTION(ADD_GROUP GROUP_NAME FILENAMES)
-  SET(REDUCED_FILENAMES)
-  FOREACH(filename ${${FILENAMES}})
-    GET_FILENAME_COMPONENT(filenamePath ${filename} PATH)
-    GET_FILENAME_COMPONENT(filenameName ${filename} NAME)
-    STRING(REGEX REPLACE "${PROJECT_BINARY_DIR}" "" filenamePath "${filenamePath}/")
-    STRING(REGEX REPLACE "${PROJECT_SOURCE_DIR}" "" filenamePath "${filenamePath}/")
-    STRING(REGEX REPLACE "//" "/" filenamePath ${filenamePath})
-    LIST(APPEND REDUCED_FILENAMES ${filenamePath})
-  ENDFOREACH()
+function(ADD_GROUP GROUP_NAME FILENAMES)
+  set(REDUCED_FILENAMES)
+  foreach(filename ${${FILENAMES}})
+    get_filename_component(filenamePath ${filename} PATH)
+    get_filename_component(filenameName ${filename} NAME)
+    string(REGEX REPLACE "${PROJECT_BINARY_DIR}" "" filenamePath
+                         "${filenamePath}/")
+    string(REGEX REPLACE "${PROJECT_SOURCE_DIR}" "" filenamePath
+                         "${filenamePath}/")
+    string(REGEX REPLACE "//" "/" filenamePath ${filenamePath})
+    list(APPEND REDUCED_FILENAMES ${filenamePath})
+  endforeach()
 
   # Find the largest common prefix
-  LIST(LENGTH REDUCED_FILENAMES num_files)
-  MATH(EXPR max_id "${num_files}-1")
-  IF(${num_files} GREATER 2)
-    LIST(GET REDUCED_FILENAMES 0 str_a)
-    FOREACH(id RANGE 1 ${max_id})
-      LIST(GET REDUCED_FILENAMES ${id} str_b)
-      LARGEST_COMMON_PREFIX(${str_a} ${str_b} prefix)
-      SET(str_a ${prefix})
-      IF("${str_a}" STREQUAL "")
-        BREAK()
-      ENDIF()
-    ENDFOREACH()
-  ELSE()
-    SET(prefix "")
-  ENDIF()
+  list(LENGTH REDUCED_FILENAMES num_files)
+  math(EXPR max_id "${num_files}-1")
+  if(${num_files} GREATER 2)
+    list(GET REDUCED_FILENAMES 0 str_a)
+    foreach(id RANGE 1 ${max_id})
+      list(GET REDUCED_FILENAMES ${id} str_b)
+      largest_common_prefix(${str_a} ${str_b} prefix)
+      set(str_a ${prefix})
+      if("${str_a}" STREQUAL "")
+        break()
+      endif()
+    endforeach()
+  else()
+    set(prefix "")
+  endif()
 
-  FOREACH(id RANGE 0 ${max_id})
-    LIST(GET ${FILENAMES} ${id} filename)
-    LIST(GET REDUCED_FILENAMES ${id} filenamePath)
-    IF(NOT ("${prefix}" STREQUAL ""))
-      STRING(REGEX REPLACE "${prefix}" "" filenamePath "${filenamePath}")
-    ENDIF()
-    IF(NOT ("${filenamePath}" STREQUAL ""))
-      STRING(REGEX REPLACE "/" "\\\\" filenamePath ${filenamePath})
-      SOURCE_GROUP("${GROUP_NAME}\\${filenamePath}" FILES ${filename})
-    ELSE()
-      SOURCE_GROUP("${GROUP_NAME}" FILES ${filename})
-    ENDIF()
-  ENDFOREACH()
-ENDFUNCTION(ADD_GROUP) 
+  foreach(id RANGE 0 ${max_id})
+    list(GET ${FILENAMES} ${id} filename)
+    list(GET REDUCED_FILENAMES ${id} filenamePath)
+    if(NOT ("${prefix}" STREQUAL ""))
+      string(REGEX REPLACE "${prefix}" "" filenamePath "${filenamePath}")
+    endif()
+    if(NOT ("${filenamePath}" STREQUAL ""))
+      string(REGEX REPLACE "/" "\\\\" filenamePath ${filenamePath})
+      source_group("${GROUP_NAME}\\${filenamePath}" FILES ${filename})
+    else()
+      source_group("${GROUP_NAME}" FILES ${filename})
+    endif()
+  endforeach()
+endfunction(ADD_GROUP)
 
 # ADD_HEADER_GROUP
 # ----------------
 #
 # Add FILENAMES to "Header Files" group when using IDE Cmake Generator
 #
-MACRO(ADD_HEADER_GROUP FILENAMES)
-  ADD_GROUP("Header Files" ${FILENAMES})
-ENDMACRO(ADD_HEADER_GROUP FILENAMES)
+macro(ADD_HEADER_GROUP FILENAMES)
+  add_group("Header Files" ${FILENAMES})
+endmacro(ADD_HEADER_GROUP FILENAMES)
 
 # ADD_SOURCE_GROUP
 # ----------------
 #
 # Add FILENAMES to "Source Files" group when using IDE Cmake Generator
 #
-MACRO(ADD_SOURCE_GROUP FILENAMES)
-  ADD_GROUP("Source Files" ${FILENAMES})
-ENDMACRO(ADD_SOURCE_GROUP FILENAMES)
+macro(ADD_SOURCE_GROUP FILENAMES)
+  add_group("Source Files" ${FILENAMES})
+endmacro(ADD_SOURCE_GROUP FILENAMES)
diff --git a/cmake/idl.cmake b/cmake/idl.cmake
index 5aa185e..4698a2f 100644
--- a/cmake/idl.cmake
+++ b/cmake/idl.cmake
@@ -1,202 +1,209 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. command:: OMNIIDL_INCLUDE_DIRECTORIES (DIRECTORIES)
-#
-#   Set include directories for omniidl
-#
-#   :param DIRECTORIES: a list of directories to search for idl files.
-#
-MACRO (OMNIIDL_INCLUDE_DIRECTORIES)
-  SET (_OMNIIDL_INCLUDE_FLAG "")
-  FOREACH (DIR ${ARGV})
-    SET (_OMNIIDL_INCLUDE_FLAG ${_OMNIIDL_INCLUDE_FLAG}
-      -I${DIR} " "
-      )
-  ENDFOREACH ()
-  STRING (REGEX REPLACE " " ";" _OMNIIDL_INCLUDE_FLAG ${_OMNIIDL_INCLUDE_FLAG})
-ENDMACRO ()
+# .rst: .. command:: OMNIIDL_INCLUDE_DIRECTORIES (DIRECTORIES)
+#
+# Set include directories for omniidl
+#
+# :param DIRECTORIES: a list of directories to search for idl files.
+#
+macro(OMNIIDL_INCLUDE_DIRECTORIES)
+  set(_OMNIIDL_INCLUDE_FLAG "")
+  foreach(DIR ${ARGV})
+    set(_OMNIIDL_INCLUDE_FLAG ${_OMNIIDL_INCLUDE_FLAG} -I${DIR} " ")
+  endforeach()
+  string(REGEX REPLACE " " ";" _OMNIIDL_INCLUDE_FLAG ${_OMNIIDL_INCLUDE_FLAG})
+endmacro()
 
-#.rst:
-# .. command:: GENERATE_IDL_CPP (FILENAME DIRECTORY)
-#
-#   Generate C++ stubs from an idl file.
-#   An include directory can also be specified.
-#   The filename of the generated file is appended to ``ALL_IDL_CPP_STUBS``.
-#
-#   In CMake, *source file properties are visible only to targets added in the
-#   same directory (CMakeLists.txt)*. As a result, we cannot provide a single
-#   macro that takes care of generating the files and ensures a proper build
-#   dependency graph.
-#
-#   .. warning::
-#     It is your responsibility to make sure the target dependency tree
-#     is correct. For instance with::
-#    
-#       ADD_CUSTOM_TARGET(generate_idl_cpp DEPENDS ${ALL_IDL_CPP_STUBS})
-#       ADD_DEPENDENCIES (my-library generate_idl_cpp)
-#
-#   For more information:
-#   http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_add_a_dependency_to_a_source_file_which_is_generated_in_a_subdirectory.3F
-#
-#   :param FILENAME:   IDL filename without the extension.
-#                      Can be prefixed by a path: _path/_filename
-#   :param DIRECTORY:  IDL directory.
-#                      The idl file being search for is: ``${DIRECTORY}/${_filename}.idl``
-#   :param ENABLE_Wba: Option to trigger generation of code for TypeCode and Any.
-#   :param HEADER_SUFFIX: Set option -Wbh of omniidl
-#   :param NO_DEFAULT: Do not add default arguments to omniidl (``-Wbkeep_inc_path``)
-#   :param ARGUMENTS:  The following words are passed as arguments to omniidl
-#
-MACRO(GENERATE_IDL_CPP FILENAME DIRECTORY)
-  SET(options ENABLE_Wba NO_DEFAULT)
-  SET(oneValueArgs HEADER_SUFFIX)
-  SET(multiValueArgs ARGUMENTS)
-  CMAKE_PARSE_ARGUMENTS(_omni "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
-  IF(NOT DEFINED _omni_HEADER_SUFFIX)
-    SET(_omni_HEADER_SUFFIX ".hh")
-  ENDIF()
+# .rst: .. command:: GENERATE_IDL_CPP (FILENAME DIRECTORY)
+#
+# Generate C++ stubs from an idl file. An include directory can also be
+# specified. The filename of the generated file is appended to
+# ``ALL_IDL_CPP_STUBS``.
+#
+# In CMake, *source file properties are visible only to targets added in the
+# same directory (CMakeLists.txt)*. As a result, we cannot provide a single
+# macro that takes care of generating the files and ensures a proper build
+# dependency graph.
+#
+# .. warning:: It is your responsibility to make sure the target dependency tree
+# is correct. For instance with::
+#
+# ADD_CUSTOM_TARGET(generate_idl_cpp DEPENDS ${ALL_IDL_CPP_STUBS})
+# ADD_DEPENDENCIES (my-library generate_idl_cpp)
+#
+# For more information:
+# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_add_a_dependency_to_a_source_file_which_is_generated_in_a_subdirectory.3F
+#
+# :param FILENAME:   IDL filename without the extension. Can be prefixed by a
+# path: _path/_filename :param DIRECTORY:  IDL directory. The idl file being
+# search for is: ``${DIRECTORY}/${_filename}.idl`` :param ENABLE_Wba: Option to
+# trigger generation of code for TypeCode and Any. :param HEADER_SUFFIX: Set
+# option -Wbh of omniidl :param NO_DEFAULT: Do not add default arguments to
+# omniidl (``-Wbkeep_inc_path``) :param ARGUMENTS:  The following words are
+# passed as arguments to omniidl
+#
+macro(GENERATE_IDL_CPP FILENAME DIRECTORY)
+  set(options ENABLE_Wba NO_DEFAULT)
+  set(oneValueArgs HEADER_SUFFIX)
+  set(multiValueArgs ARGUMENTS)
+  cmake_parse_arguments(_omni "${options}" "${oneValueArgs}"
+                        "${multiValueArgs}" ${ARGN})
+  if(NOT DEFINED _omni_HEADER_SUFFIX)
+    set(_omni_HEADER_SUFFIX ".hh")
+  endif()
 
-  GET_FILENAME_COMPONENT (_PATH ${FILENAME} PATH)
-  GET_FILENAME_COMPONENT (_NAME ${FILENAME} NAME)
-  IF (_PATH STREQUAL "")
-    SET(_PATH "./")
-  ENDIF (_PATH STREQUAL "")
-  FIND_PROGRAM(OMNIIDL omniidl)
-  IF(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
-    MESSAGE(FATAL_ERROR "cannot find omniidl.")
-  ENDIF(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
+  get_filename_component(_PATH ${FILENAME} PATH)
+  get_filename_component(_NAME ${FILENAME} NAME)
+  if(_PATH STREQUAL "")
+    set(_PATH "./")
+  endif(_PATH STREQUAL "")
+  find_program(OMNIIDL omniidl)
+  if(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
+    message(FATAL_ERROR "cannot find omniidl.")
+  endif(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
 
-  SET(IDL_COMPILED_FILES ${FILENAME}SK.cc ${FILENAME}${_omni_HEADER_SUFFIX})
-  SET(_omniidl_args -bcxx ${_OMNIIDL_INCLUDE_FLAG} -Wbh=${_omni_HEADER_SUFFIX} ${_omni_ARGUMENTS})
+  set(IDL_COMPILED_FILES ${FILENAME}SK.cc ${FILENAME}${_omni_HEADER_SUFFIX})
+  set(_omniidl_args -bcxx ${_OMNIIDL_INCLUDE_FLAG} -Wbh=${_omni_HEADER_SUFFIX}
+                    ${_omni_ARGUMENTS})
   # This is to keep backward compatibility
-  IF(NOT _omni_NO_DEFAULT)
-    SET(_omniidl_args ${_omniidl_args} -Wbkeep_inc_path)
-  ENDIF()
-  IF(_omni_ENABLE_Wba)
-    SET(_omniidl_args ${_omniidl_args} -Wba)
-    SET(IDL_COMPILED_FILES ${IDL_COMPILED_FILES} ${FILENAME}DynSK.cc)
-  ENDIF(_omni_ENABLE_Wba)
-  ADD_CUSTOM_COMMAND(
+  if(NOT _omni_NO_DEFAULT)
+    set(_omniidl_args ${_omniidl_args} -Wbkeep_inc_path)
+  endif()
+  if(_omni_ENABLE_Wba)
+    set(_omniidl_args ${_omniidl_args} -Wba)
+    set(IDL_COMPILED_FILES ${IDL_COMPILED_FILES} ${FILENAME}DynSK.cc)
+  endif(_omni_ENABLE_Wba)
+  add_custom_command(
     OUTPUT ${IDL_COMPILED_FILES}
-    COMMAND ${OMNIIDL}
-    ARGS ${_omniidl_args} -C${_PATH} ${DIRECTORY}/${_NAME}.idl
+    COMMAND ${OMNIIDL} ARGS ${_omniidl_args} -C${_PATH}
+            ${DIRECTORY}/${_NAME}.idl
     MAIN_DEPENDENCY ${DIRECTORY}/${_NAME}.idl
-    COMMENT "Generating C++ stubs for ${_NAME}"
-    )
+    COMMENT "Generating C++ stubs for ${_NAME}")
 
-  LIST(APPEND ALL_IDL_CPP_STUBS ${IDL_COMPILED_FILES})
+  list(APPEND ALL_IDL_CPP_STUBS ${IDL_COMPILED_FILES})
 
   # Clean generated files.
-  SET_PROPERTY(
-    DIRECTORY APPEND PROPERTY
-    ADDITIONAL_MAKE_CLEAN_FILES
-    ${IDL_COMPILED_FILES}
-    )
-  SET_PROPERTY(SOURCE ${IDL_COMPILED_FILES}
-    APPEND_STRING PROPERTY
-    COMPILE_FLAGS "-Wno-conversion -Wno-cast-qual -Wno-unused-variable -Wno-unused-parameter")
+  set_property(
+    DIRECTORY
+    APPEND
+    PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${IDL_COMPILED_FILES})
+  set_property(
+    SOURCE ${IDL_COMPILED_FILES}
+    APPEND_STRING
+    PROPERTY
+      COMPILE_FLAGS
+      "-Wno-conversion -Wno-cast-qual -Wno-unused-variable -Wno-unused-parameter"
+  )
 
-  LIST(APPEND LOGGING_WATCHED_VARIABLES OMNIIDL ALL_IDL_CPP_STUBS)
-ENDMACRO(GENERATE_IDL_CPP FILENAME DIRECTORY)
+  list(APPEND LOGGING_WATCHED_VARIABLES OMNIIDL ALL_IDL_CPP_STUBS)
+endmacro(
+  GENERATE_IDL_CPP
+  FILENAME
+  DIRECTORY)
 
-#.rst:
-# .. command:: GENERATE_IDL_PYTHON (FILENAME DIRECTORY)
-#
-#   Generate Python stubs from an idl file.
-#   An include directory can also be specified.
-#   The filename of the generated file is appended to ``ALL_IDL_PYTHON_STUBS``.
-#
-#   In CMake, *source file properties are visible only to targets added in the
-#   same directory (CMakeLists.txt)*. As a result, we cannot provide a single
-#   macro that takes care of generating the files and ensures a proper build
-#   dependency graph.
-#
-#   .. warning::
-#     It is your responsibility to make sure the target dependency tree
-#     is correct. For instance with::
-#    
-#       ADD_CUSTOM_TARGET(generate_idl_python DEPENDS ${ALL_IDL_PYTHON_STUBS})
-#       ADD_DEPENDENCIES (my-library generate_idl_python)
-#
-#   For more information:
-#   http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_add_a_dependency_to_a_source_file_which_is_generated_in_a_subdirectory.3F
-#
-#   :param FILENAME: IDL filename without the extension.
-#                    Can be prefixed by a path: _path/_filename
-#   :param DIRECTORY: IDL directory.
-#                     The idl file being search for is: ``${DIRECTORY}/${_filename}.idl``
-#   :param ARGUMENTS:  The following words are passed as arguments to omniidl
-#   :param ENABLE_DOCSTRING: generate docstrings from doxygen comments (only in Python 3)
-#   :param STUBS:    set option -Wbstubs of omniidl.
-#
-MACRO(GENERATE_IDL_PYTHON FILENAME DIRECTORY)
-  SET(options ENABLE_DOCSTRING)
-  SET(oneValueArgs STUBS)
-  SET(multiValueArgs ARGUMENTS)
-  CMAKE_PARSE_ARGUMENTS(_omni "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
+# .rst: .. command:: GENERATE_IDL_PYTHON (FILENAME DIRECTORY)
+#
+# Generate Python stubs from an idl file. An include directory can also be
+# specified. The filename of the generated file is appended to
+# ``ALL_IDL_PYTHON_STUBS``.
+#
+# In CMake, *source file properties are visible only to targets added in the
+# same directory (CMakeLists.txt)*. As a result, we cannot provide a single
+# macro that takes care of generating the files and ensures a proper build
+# dependency graph.
+#
+# .. warning:: It is your responsibility to make sure the target dependency tree
+# is correct. For instance with::
+#
+# ADD_CUSTOM_TARGET(generate_idl_python DEPENDS ${ALL_IDL_PYTHON_STUBS})
+# ADD_DEPENDENCIES (my-library generate_idl_python)
+#
+# For more information:
+# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_add_a_dependency_to_a_source_file_which_is_generated_in_a_subdirectory.3F
+#
+# :param FILENAME: IDL filename without the extension. Can be prefixed by a
+# path: _path/_filename :param DIRECTORY: IDL directory. The idl file being
+# search for is: ``${DIRECTORY}/${_filename}.idl`` :param ARGUMENTS:  The
+# following words are passed as arguments to omniidl :param ENABLE_DOCSTRING:
+# generate docstrings from doxygen comments (only in Python 3) :param STUBS: set
+# option -Wbstubs of omniidl.
+#
+macro(GENERATE_IDL_PYTHON FILENAME DIRECTORY)
+  set(options ENABLE_DOCSTRING)
+  set(oneValueArgs STUBS)
+  set(multiValueArgs ARGUMENTS)
+  cmake_parse_arguments(_omni "${options}" "${oneValueArgs}"
+                        "${multiValueArgs}" ${ARGN})
 
-  GET_FILENAME_COMPONENT (_PATH ${FILENAME} PATH)
-  GET_FILENAME_COMPONENT (_NAME ${FILENAME} NAME)
-  IF (_PATH STREQUAL "")
-    SET(_PATH "./")
-  ENDIF (_PATH STREQUAL "")
-  FIND_PROGRAM(OMNIIDL omniidl)
-  IF(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
-    MESSAGE(FATAL_ERROR "cannot find omniidl.")
-  ENDIF(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
+  get_filename_component(_PATH ${FILENAME} PATH)
+  get_filename_component(_NAME ${FILENAME} NAME)
+  if(_PATH STREQUAL "")
+    set(_PATH "./")
+  endif(_PATH STREQUAL "")
+  find_program(OMNIIDL omniidl)
+  if(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
+    message(FATAL_ERROR "cannot find omniidl.")
+  endif(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
 
-  IF(_omni_ENABLE_DOCSTRING AND PYTHON_VERSION_MAJOR EQUAL 3)
-    SET(_omniidl_args -p${PROJECT_JRL_CMAKE_MODULE_DIR}/hpp/idl -bomniidl_be_python_with_docstring -K)
-  ELSE()
-    SET(_omniidl_args -bpython)
-  ENDIF()
-  SET(_omniidl_args ${_omniidl_args} ${_OMNIIDL_INCLUDE_FLAG} -C${_PATH} ${_omni_ARGUMENTS})
-  IF(DEFINED _omni_STUBS)
-    SET(_omniidl_args ${_omniidl_args} -Wbstubs=${_omni_STUBS})
-    STRING(REPLACE "." "/" _omni_STUBS_DIR ${_omni_STUBS})
-  ENDIF()
-  SET(output_files ${CMAKE_CURRENT_BINARY_DIR}/${_PATH}/${_omni_STUBS_DIR}/${FILENAME}_idl.py)
+  if(_omni_ENABLE_DOCSTRING AND PYTHON_VERSION_MAJOR EQUAL 3)
+    set(_omniidl_args -p${PROJECT_JRL_CMAKE_MODULE_DIR}/hpp/idl
+                      -bomniidl_be_python_with_docstring -K)
+  else()
+    set(_omniidl_args -bpython)
+  endif()
+  set(_omniidl_args ${_omniidl_args} ${_OMNIIDL_INCLUDE_FLAG} -C${_PATH}
+                    ${_omni_ARGUMENTS})
+  if(DEFINED _omni_STUBS)
+    set(_omniidl_args ${_omniidl_args} -Wbstubs=${_omni_STUBS})
+    string(REPLACE "." "/" _omni_STUBS_DIR ${_omni_STUBS})
+  endif()
+  set(output_files
+      ${CMAKE_CURRENT_BINARY_DIR}/${_PATH}/${_omni_STUBS_DIR}/${FILENAME}_idl.py
+  )
 
-  ADD_CUSTOM_COMMAND(
+  add_custom_command(
     OUTPUT ${output_files}
-    COMMAND ${OMNIIDL}
-    ARGS ${_omniidl_args}
-    ${DIRECTORY}/${_NAME}.idl
+    COMMAND ${OMNIIDL} ARGS ${_omniidl_args} ${DIRECTORY}/${_NAME}.idl
     MAIN_DEPENDENCY ${DIRECTORY}/${_NAME}.idl
-    COMMENT "Generating Python stubs for ${_NAME}"
-    )
+    COMMENT "Generating Python stubs for ${_NAME}")
 
-  LIST(APPEND ALL_IDL_PYTHON_STUBS ${output_files})
+  list(APPEND ALL_IDL_PYTHON_STUBS ${output_files})
 
   # Clean generated files.
-  SET_PROPERTY(
-    DIRECTORY APPEND PROPERTY
-    ADDITIONAL_MAKE_CLEAN_FILES
-    ${output_files}
-    )
+  set_property(
+    DIRECTORY
+    APPEND
+    PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${output_files})
 
-  LIST(APPEND LOGGING_WATCHED_VARIABLES OMNIIDL ALL_IDL_PYTHON_STUBS)
-ENDMACRO(GENERATE_IDL_PYTHON FILENAME DIRECTORY)
+  list(APPEND LOGGING_WATCHED_VARIABLES OMNIIDL ALL_IDL_PYTHON_STUBS)
+endmacro(
+  GENERATE_IDL_PYTHON
+  FILENAME
+  DIRECTORY)
 
 # GENERATE_IDL_FILE FILENAME DIRECTORY
 # ------------------------------------
 #
 # Legacy macro, now replaced by GENERATE_IDL_CPP.
-MACRO(GENERATE_IDL_FILE FILENAME DIRECTORY)
-  MESSAGE(FATAL_ERROR
-    "GENERATE_IDL_FILE has been removed. Please use GENERATE_IDL_CPP instead.")
-ENDMACRO(GENERATE_IDL_FILE FILENAME DIRECTORY)
+macro(GENERATE_IDL_FILE FILENAME DIRECTORY)
+  message(
+    FATAL_ERROR
+      "GENERATE_IDL_FILE has been removed. Please use GENERATE_IDL_CPP instead."
+  )
+endmacro(
+  GENERATE_IDL_FILE
+  FILENAME
+  DIRECTORY)
diff --git a/cmake/idlrtc.cmake b/cmake/idlrtc.cmake
index c10b653..a4383bb 100644
--- a/cmake/idlrtc.cmake
+++ b/cmake/idlrtc.cmake
@@ -1,74 +1,74 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # GENERATE_IDL_FILE FILENAME DIRECTORY
 # ------------------------------------
 #
-# Generate stubs from an idl file.
-# An include directory can also be specified.
+# Generate stubs from an idl file. An include directory can also be specified.
 #
-# FILENAME : IDL filename without the extension
-# DIRECTORY : IDL directory
+# FILENAME : IDL filename without the extension DIRECTORY : IDL directory
 # LIST_INCLUDE_DIRECTORIES (optional) : List of include directories
 #
-MACRO(GENERATE_IDLRTC_FILE FILENAME DIRECTORY)
-  FIND_PROGRAM(OMNIIDL omniidl)
+macro(GENERATE_IDLRTC_FILE FILENAME DIRECTORY)
+  find_program(OMNIIDL omniidl)
 
   # Test existence of omniidl
-  IF(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
-    MESSAGE(FATAL_ERROR "cannot find omniidl.")
-  ENDIF(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
+  if(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
+    message(FATAL_ERROR "cannot find omniidl.")
+  endif(${OMNIIDL} STREQUAL OMNIIDL-NOTFOUND)
 
   # Create the flag to include directories
-  SET(OMNIIDL_INC_DIR "")
-  
+  set(OMNIIDL_INC_DIR "")
+
   # Check if there is an optional value
-  MESSAGE(STATUS "ARGC: "${ARGC} )
-  IF(${ARGC} EQUAL 3)
+  message(STATUS "ARGC: "${ARGC})
+  if(${ARGC} EQUAL 3)
     # If there is, the directory to include are added.
-    SET(LIST_INCLUDE_DIRECTORIES ${ARGV2})
+    set(LIST_INCLUDE_DIRECTORIES ${ARGV2})
 
-    MESSAGE(STATUS "ARGV2: "${ARGV2} )
-    FOREACH(INCDIR ${LIST_INCLUDE_DIRECTORIES})
-      # The format for the first one is special
-      # to avoid a \ to be introduced.
-      IF(OMNIIDL_INC_DIR STREQUAL "")
-	SET(OMNIIDL_INC_DIR "-I${INCDIR}")
-      ELSE(OMNIIDL_INC_DIR STREQUAL "")
-	SET(OMNIIDL_INC_DIR ${OMNIIDL_INC_DIR} "-I${INCDIR}")
-      ENDIF(OMNIIDL_INC_DIR STREQUAL "")
-    ENDFOREACH(INCDIR ${LIST_INCLUDE_DIRECTORIES})
+    message(STATUS "ARGV2: "${ARGV2})
+    foreach(INCDIR ${LIST_INCLUDE_DIRECTORIES})
+      # The format for the first one is special to avoid a \ to be introduced.
+      if(OMNIIDL_INC_DIR STREQUAL "")
+        set(OMNIIDL_INC_DIR "-I${INCDIR}")
+      else(OMNIIDL_INC_DIR STREQUAL "")
+        set(OMNIIDL_INC_DIR ${OMNIIDL_INC_DIR} "-I${INCDIR}")
+      endif(OMNIIDL_INC_DIR STREQUAL "")
+    endforeach(INCDIR ${LIST_INCLUDE_DIRECTORIES})
 
-  ENDIF(${ARGC} EQUAL 3)
+  endif(${ARGC} EQUAL 3)
 
-  SET(IDL_FLAGS "-Wbuse_quotes" "-Wbh=.hh" "-Wbs=SK.cc" "-Wba" "-Wbd=DynSK.cc")
-  MESSAGE(STATUS "OMNIIDL_INC_DIR:" ${OMNIIDL_INC_DIR})
-  ADD_CUSTOM_COMMAND(
+  set(IDL_FLAGS "-Wbuse_quotes" "-Wbh=.hh" "-Wbs=SK.cc" "-Wba" "-Wbd=DynSK.cc")
+  message(STATUS "OMNIIDL_INC_DIR:" ${OMNIIDL_INC_DIR})
+  add_custom_command(
     OUTPUT ${FILENAME}SK.cc ${FILENAME}DynSK.cc ${FILENAME}.hh
-    COMMAND ${OMNIIDL}
-    ARGS -bcxx ${IDL_FLAGS} ${OMNIIDL_INC_DIR} ${DIRECTORY}/${FILENAME}.idl 
-    MAIN_DEPENDENCY ${DIRECTORY}/${FILENAME}.idl
-    )
-  SET(ALL_IDL_STUBS ${FILENAME}SK.cc ${FILENAME}DynSK.cc ${FILENAME}.hh ${ALL_IDL_STUBS})
+    COMMAND ${OMNIIDL} ARGS -bcxx ${IDL_FLAGS} ${OMNIIDL_INC_DIR}
+            ${DIRECTORY}/${FILENAME}.idl
+    MAIN_DEPENDENCY ${DIRECTORY}/${FILENAME}.idl)
+  set(ALL_IDL_STUBS ${FILENAME}SK.cc ${FILENAME}DynSK.cc ${FILENAME}.hh
+                    ${ALL_IDL_STUBS})
 
   # Clean generated files.
-  SET_PROPERTY(
-    DIRECTORY APPEND PROPERTY
-    ADDITIONAL_MAKE_CLEAN_FILES
-    ${FILENAME}SK.cc ${FILENAME}DynSK.cc ${FILENAME}.hh
-    )
+  set_property(
+    DIRECTORY
+    APPEND
+    PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${FILENAME}SK.cc ${FILENAME}DynSK.cc
+             ${FILENAME}.hh)
 
-  LIST(APPEND LOGGING_WATCHED_VARIABLES OMNIIDL ALL_IDL_STUBS)
-ENDMACRO(GENERATE_IDLRTC_FILE FILENAME DIRECTORY)
+  list(APPEND LOGGING_WATCHED_VARIABLES OMNIIDL ALL_IDL_STUBS)
+endmacro(
+  GENERATE_IDLRTC_FILE
+  FILENAME
+  DIRECTORY)
diff --git a/cmake/image/visp.cmake b/cmake/image/visp.cmake
index 153e3da..f159fe2 100644
--- a/cmake/image/visp.cmake
+++ b/cmake/image/visp.cmake
@@ -1,51 +1,51 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # FIND_VISP()
 # -----------
 #
 # Find ViSP through the use of visp-config.
 #
-# To make ViSP detection both robust and simple, rely on the
-# visp-config tool instead of the specic CMake mechanism.
+# To make ViSP detection both robust and simple, rely on the visp-config tool
+# instead of the specic CMake mechanism.
 #
-# One just has to make sure that visp-config is available in its path
-# to make ViSP detected automagically.
+# One just has to make sure that visp-config is available in its path to make
+# ViSP detected automagically.
 #
-# Implementation note: please do *not* modify this code to add a
-# variable which override the path and the standard look-up algorithm,
-# it introduces complexity for nothing. Fix your path instead.
-MACRO(FIND_VISP)
-  FIND_PROGRAM(VISP_CONFIG visp-config)
-  IF(NOT VISP_CONFIG)
-    MESSAGE(FATAL_ERROR "visp-config has not been found.")
-  ENDIF()
-  EXECUTE_PROCESS(
+# Implementation note: please do *not* modify this code to add a variable which
+# override the path and the standard look-up algorithm, it introduces complexity
+# for nothing. Fix your path instead.
+macro(FIND_VISP)
+  find_program(VISP_CONFIG visp-config)
+  if(NOT VISP_CONFIG)
+    message(FATAL_ERROR "visp-config has not been found.")
+  endif()
+  execute_process(
     COMMAND ${VISP_CONFIG} --prefix
     OUTPUT_VARIABLE VISP_PREFIX
     OUTPUT_STRIP_TRAILING_WHITESPACE)
-  EXECUTE_PROCESS(
+  execute_process(
     COMMAND ${VISP_CONFIG} --cflags
     OUTPUT_VARIABLE VISP_CFLAGS
     OUTPUT_STRIP_TRAILING_WHITESPACE)
-  EXECUTE_PROCESS(
+  execute_process(
     COMMAND ${VISP_CONFIG} --libs
     OUTPUT_VARIABLE VISP_LIBS
     OUTPUT_STRIP_TRAILING_WHITESPACE)
-  EXECUTE_PROCESS(
+  execute_process(
     COMMAND ${VISP_CONFIG} --dumpversion
     OUTPUT_VARIABLE VISP_VERSION
     OUTPUT_STRIP_TRAILING_WHITESPACE)
-ENDMACRO(FIND_VISP)
+endmacro(FIND_VISP)
diff --git a/cmake/install-data.cmake b/cmake/install-data.cmake
index 0d4bac8..e7c8221 100644
--- a/cmake/install-data.cmake
+++ b/cmake/install-data.cmake
@@ -1,28 +1,28 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # _INSTALL_PROJECT_DATA
 # ---------------------
 #
 # Build the installation rules to install data-files.
 #
-MACRO(_INSTALL_PROJECT_DATA)
-  IF(DEFINED PROJECT_DATA)
-    INSTALL(FILES ${PROJECT_DATA}
+macro(_INSTALL_PROJECT_DATA)
+  if(DEFINED PROJECT_DATA)
+    install(
+      FILES ${PROJECT_DATA}
       DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}
-      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE
-      )
-  ENDIF(DEFINED PROJECT_DATA)
-ENDMACRO(_INSTALL_PROJECT_DATA)
+      PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
+  endif(DEFINED PROJECT_DATA)
+endmacro(_INSTALL_PROJECT_DATA)
diff --git a/cmake/kineo.cmake b/cmake/kineo.cmake
index 8340074..1ab2df1 100644
--- a/cmake/kineo.cmake
+++ b/cmake/kineo.cmake
@@ -1,17 +1,17 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 #
 # Create and install KineoPathPlanner (Kitelab) add-on modules.
 
@@ -20,71 +20,66 @@
 #
 # Build a add-on module for KineoPathPlanner
 #
-# MODULE_NAME		: name of the module
+# MODULE_NAME             : name of the module
 #
-#   1. compile a shared object named lib${MODULE_NAME}.so the sources of
-#      which are defined by (global) variable KINEO_ADDON_SOURCES,
-#   2. install this shared object in lib/modules/${UNAME_N} where ${UNAME_N}
-#      is the result of command "uname -n": the name of the machine,
-#   3. generate a target named "license" that creates the required .kab file.
-#      Note that you must be in possession of a valid kineo license file.
+# 1. compile a shared object named lib${MODULE_NAME}.so the sources of which are
+#    defined by (global) variable KINEO_ADDON_SOURCES,
+# 2. install this shared object in lib/modules/${UNAME_N} where ${UNAME_N} is the
+#    result of command "uname -n": the name of the machine,
+# 3. generate a target named "license" that creates the required .kab file. Note
+#    that you must be in possession of a valid kineo license file.
 #
-#   Before calling this macro, it is recommended to reset variable
-#   PKG_CONFIG_LIBS to the empty string since the right directory is appended
-#   to the "libs:" field of the .pc file by the macro.
+# Before calling this macro, it is recommended to reset variable PKG_CONFIG_LIBS
+# to the empty string since the right directory is appended to the "libs:" field
+# of the .pc file by the macro.
 #
-MACRO(KINEO_ADDON MODULE_NAME)
-  EXECUTE_PROCESS(COMMAND "uname" "-n"
-    OUTPUT_VARIABLE UNAME_N ERROR_QUIET)
-  STRING(REPLACE "\n" "" UNAME_N "${UNAME_N}")
+macro(KINEO_ADDON MODULE_NAME)
+  execute_process(
+    COMMAND "uname" "-n"
+    OUTPUT_VARIABLE UNAME_N
+    ERROR_QUIET)
+  string(REPLACE "\n" "" UNAME_N "${UNAME_N}")
 
-  SET(ADDON_INSTALLDIR lib/modules/${UNAME_N})
-  PKG_CONFIG_APPEND_LIBRARY_DIR(${CMAKE_INSTALL_PREFIX}/${ADDON_INSTALLDIR})
-  PKG_CONFIG_APPEND_LIBS(${PROJECT_NAME})
-  ADD_LIBRARY(${MODULE_NAME} SHARED ${KINEO_ADDON_SOURCES})
-  SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES
-    SOVERSION ${PROJECT_VERSION}
-    INSTALL_RPATH ${ADDON_INSTALLDIR}
-    )
-  ADD_CUSTOM_COMMAND(OUTPUT ${ADDON_INSTALLDIR}/lib${MODULE_NAME}.kab
-    DEPEND ${ADDON_INSTALLDIR}/lib${MODULE_NAME}.so
-    COMMAND KineoAddonBuilder ARGS
-    -m ${CMAKE_INSTALL_PREFIX}/${ADDON_INSTALLDIR}/lib${MODULE_NAME}.so)
-  ADD_CUSTOM_TARGET(license
-    DEPENDS ${ADDON_INSTALLDIR}/lib${MODULE_NAME}.kab)
-  ADD_DEPENDENCIES(license
-    ${CMAKE_INSTALL_PREFIX}/${ADDON_INSTALLDIR}/lib${MODULE_NAME}.so)
-  INSTALL(TARGETS ${MODULE_NAME} DESTINATION ${ADDON_INSTALLDIR})
-ENDMACRO()
+  set(ADDON_INSTALLDIR lib/modules/${UNAME_N})
+  pkg_config_append_library_dir(${CMAKE_INSTALL_PREFIX}/${ADDON_INSTALLDIR})
+  pkg_config_append_libs(${PROJECT_NAME})
+  add_library(${MODULE_NAME} SHARED ${KINEO_ADDON_SOURCES})
+  set_target_properties(
+    ${MODULE_NAME} PROPERTIES SOVERSION ${PROJECT_VERSION} INSTALL_RPATH
+                                                           ${ADDON_INSTALLDIR})
+  add_custom_command(
+    OUTPUT ${ADDON_INSTALLDIR}/lib${MODULE_NAME}.kab DEPEND
+           ${ADDON_INSTALLDIR}/lib${MODULE_NAME}.so
+    COMMAND KineoAddonBuilder ARGS -m
+            ${CMAKE_INSTALL_PREFIX}/${ADDON_INSTALLDIR}/lib${MODULE_NAME}.so)
+  add_custom_target(license DEPENDS ${ADDON_INSTALLDIR}/lib${MODULE_NAME}.kab)
+  add_dependencies(
+    license ${CMAKE_INSTALL_PREFIX}/${ADDON_INSTALLDIR}/lib${MODULE_NAME}.so)
+  install(TARGETS ${MODULE_NAME} DESTINATION ${ADDON_INSTALLDIR})
+endmacro()
 
 # KINEO_STANDALONE
 # ----------------
 #
 # Build a standalone executable for Kineo
 #
-# STANDALONE_NAME		: name of the executable
+# STANDALONE_NAME         : name of the executable
 #
-#   1. compile a kineo add-on builder file ${STANDALONE_NAME}.kab from
-#   the executable ${STANDALONE_NAME},
-#   2. install this .kab file in the the current build directory,
-#   i.e. at the same location as the executable,
-#   3. generate a target named "license" that creates the required
-#      .kab file.  Note that you must be in possession of a valid
-#      kineo license file.
+# 1. compile a kineo add-on builder file ${STANDALONE_NAME}.kab from the
+#    executable ${STANDALONE_NAME},
+# 2. install this .kab file in the the current build directory, i.e. at the same
+#    location as the executable,
+# 3. generate a target named "license" that creates the required .kab file.  Note
+#    that you must be in possession of a valid kineo license file.
 #
-MACRO(KINEO_STANDALONE STANDALONE_NAME)
-  ADD_CUSTOM_COMMAND(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME}.kab
-    DEPEND ${CMAKE_CURRENT_BUILD_DIR}/${STANDALONE_NAME}
-    COMMAND KineoAddonBuilder
-    ARGS -a ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME}
-    )
-  ADD_CUSTOM_TARGET(
-    ${STANDALONE_NAME}-license ALL
-    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME}.kab
-    )
-  ADD_DEPENDENCIES(
-    ${STANDALONE_NAME}-license
-    ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME}
-    )
-ENDMACRO()
+macro(KINEO_STANDALONE STANDALONE_NAME)
+  add_custom_command(
+    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME}.kab DEPEND
+           ${CMAKE_CURRENT_BUILD_DIR}/${STANDALONE_NAME}
+    COMMAND KineoAddonBuilder ARGS -a
+            ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME})
+  add_custom_target(${STANDALONE_NAME}-license ALL
+                    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME}.kab)
+  add_dependencies(${STANDALONE_NAME}-license
+                   ${CMAKE_CURRENT_BINARY_DIR}/${STANDALONE_NAME})
+endmacro()
diff --git a/cmake/lapack.cmake b/cmake/lapack.cmake
index 04c1c5a..3def136 100644
--- a/cmake/lapack.cmake
+++ b/cmake/lapack.cmake
@@ -1,51 +1,53 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # SEARCH_FOR_LAPACK
 # -----------------
 #
 # Search for LAPACK in a portable way.
 #
-# This macro deals with Visual Studio Fortran incompatibilities
-# and add detected flags to the pkg-config file automatically.
+# This macro deals with Visual Studio Fortran incompatibilities and add detected
+# flags to the pkg-config file automatically.
 #
-MACRO(SEARCH_FOR_LAPACK)
-  IF(NOT "${CMAKE_GENERATOR}" MATCHES "Visual Studio.*")
-    ENABLE_LANGUAGE(Fortran)
-  ENDIF(NOT "${CMAKE_GENERATOR}" MATCHES "Visual Studio.*")
+macro(SEARCH_FOR_LAPACK)
+  if(NOT "${CMAKE_GENERATOR}" MATCHES "Visual Studio.*")
+    enable_language(Fortran)
+  endif(NOT "${CMAKE_GENERATOR}" MATCHES "Visual Studio.*")
 
-  FIND_PACKAGE(LAPACK REQUIRED)
+  find_package(LAPACK REQUIRED)
 
-  IF(NOT LAPACK_FOUND)
-    MESSAGE(FATAL_ERROR "Failed to detect LAPACK.")
-  ENDIF(NOT LAPACK_FOUND)
+  if(NOT LAPACK_FOUND)
+    message(FATAL_ERROR "Failed to detect LAPACK.")
+  endif(NOT LAPACK_FOUND)
 
-  IF(WIN32)
-    # Enabling Fortran on Win32 causes the definition of variables
-    #  that change the name of the library built, add the prefix 'lib'
-    # These commands are Counter CMake mesures:
-    SET(CMAKE_STATIC_LIBRARY_PREFIX "")
-    SET(CMAKE_SHARED_LIBRARY_PREFIX "")
-    SET(CMAKE_SHARED_MODULE_PREFIX "")
-    SET(CMAKE_LINK_LIBRARY_SUFFIX ".lib")
-  ENDIF(WIN32)
+  if(WIN32)
+    # Enabling Fortran on Win32 causes the definition of variables that change
+    # the name of the library built, add the prefix 'lib' These commands are
+    # Counter CMake mesures:
+    set(CMAKE_STATIC_LIBRARY_PREFIX "")
+    set(CMAKE_SHARED_LIBRARY_PREFIX "")
+    set(CMAKE_SHARED_MODULE_PREFIX "")
+    set(CMAKE_LINK_LIBRARY_SUFFIX ".lib")
+  endif(WIN32)
 
-  PKG_CONFIG_APPEND_LIBS_RAW("${LAPACK_LINKER_FLAGS};${LAPACK_LIBRARIES}")
+  pkg_config_append_libs_raw("${LAPACK_LINKER_FLAGS};${LAPACK_LIBRARIES}")
 
   # Watch variables.
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
+  list(
+    APPEND
+    LOGGING_WATCHED_VARIABLES
     LAPACK_FOUND
     LAPACK_LINKER_FLAGS
     LAPACK_LIBRARIES
@@ -53,6 +55,5 @@ MACRO(SEARCH_FOR_LAPACK)
     LAPACK95_FOUND
     BLA_STATIC
     BLA_VENDOR
-    BLA_F95
-    )
-ENDMACRO(SEARCH_FOR_LAPACK)
+    BLA_F95)
+endmacro(SEARCH_FOR_LAPACK)
diff --git a/cmake/logging.cmake b/cmake/logging.cmake
index 0fc83e4..cbd6466 100644
--- a/cmake/logging.cmake
+++ b/cmake/logging.cmake
@@ -1,87 +1,87 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-##########
+# ##############################################################################
 # README #
-##########
+# ##############################################################################
 #
-# This file implements an Autotools-like config.log logging file.
-# This file is generated at each project configuration and contains
-# all information about the system, the environment variables, the
-# flags passed to CMake, etc.
+# This file implements an Autotools-like config.log logging file. This file is
+# generated at each project configuration and contains all information about the
+# system, the environment variables, the flags passed to CMake, etc.
 #
 
 # Logging file.
-SET(LOGGING_FILENAME "${CMAKE_BINARY_DIR}/config.log")
+set(LOGGING_FILENAME "${CMAKE_BINARY_DIR}/config.log")
 
-# Watched variables list.
-# All watched variables final value will be displayed in the logging file.
-SET(LOGGING_WATCHED_VARIABLES "")
+# Watched variables list. All watched variables final value will be displayed in
+# the logging file.
+set(LOGGING_WATCHED_VARIABLES "")
 
-# Watched targets list.
-# All watched target properties will be displayed in the logging file.
-SET(LOGGING_WATCHED_TARGETS "")
+# Watched targets list. All watched target properties will be displayed in the
+# logging file.
+set(LOGGING_WATCHED_TARGETS "")
 
 # Watched targets properties list.
-SET(LOGGING_WATCHED_TARGETS_PROPERTIES
-  COMPILE_DEFINITIONS
-  COMPILE_FLAGS
-  DEFINE_SYMBOL
-  ENABLE_EXPORTS
-  EXCLUDE_FROM_ALL
-  LINK_FLAGS
-  SOVERSION
-  VERSION)
+set(LOGGING_WATCHED_TARGETS_PROPERTIES
+    COMPILE_DEFINITIONS
+    COMPILE_FLAGS
+    DEFINE_SYMBOL
+    ENABLE_EXPORTS
+    EXCLUDE_FROM_ALL
+    LINK_FLAGS
+    SOVERSION
+    VERSION)
 
 # Define character separating values in a portable way.
-IF(UNIX)
-  SET(LIST_SEPARATOR ":")
-ELSEIF(WIN32)
-  SET(LIST_SEPARATOR ";")
-ELSE(UNIX)
-  MESSAGE(FATAL_ERROR "Your platform is not supported.")
-ENDIF(UNIX)
+if(UNIX)
+  set(LIST_SEPARATOR ":")
+elseif(WIN32)
+  set(LIST_SEPARATOR ";")
+else(UNIX)
+  message(FATAL_ERROR "Your platform is not supported.")
+endif(UNIX)
 
 # LOGGING_INITIALIZE()
 # --------------
 #
-# This initializes the logging process by:
-# - cleaning any previous config.log
-# - writing global information.
+# This initializes the logging process by: - cleaning any previous config.log -
+# writing global information.
 #
-FUNCTION(LOGGING_INITIALIZE)
+function(LOGGING_INITIALIZE)
   # Retrieve interesting information.
-  IF(${CMAKE_VERSION} VERSION_LESS 2.8)
-    SET(HOSTNAME "unknown (CMake >= 2.8 required)")
-  ELSE()
-    SITE_NAME(HOSTNAME)
-  ENDIF()
+  if(${CMAKE_VERSION} VERSION_LESS 2.8)
+    set(HOSTNAME "unknown (CMake >= 2.8 required)")
+  else()
+    site_name(HOSTNAME)
+  endif()
 
   # Write logging file.
-  FILE(REMOVE ${LOGGING_FILENAME})
+  file(REMOVE ${LOGGING_FILENAME})
 
-  FILE(APPEND ${LOGGING_FILENAME}
-    "This file contains any messages produced by compilers while\n"
-    "running CMake, to aid debugging if configure makes a mistake.\n\n")
+  file(APPEND ${LOGGING_FILENAME}
+       "This file contains any messages produced by compilers while\n"
+       "running CMake, to aid debugging if configure makes a mistake.\n\n")
 
-  FILE(APPEND ${LOGGING_FILENAME}
+  file(
+    APPEND ${LOGGING_FILENAME}
     "It was created by ${CMAKE_PROJECT_NAME} CMake configuration process "
     "${PROJECT_VERSION}, which was\n"
     "generated by CMake ${CMAKE_VERSION}.\n\n")
 
-  FILE(APPEND ${LOGGING_FILENAME}
+  file(
+    APPEND ${LOGGING_FILENAME}
     "## --------- ##\n"
     "## Platform. ##\n"
     "## --------- ##\n"
@@ -92,32 +92,31 @@ FUNCTION(LOGGING_INITIALIZE)
     "generator = ${CMAKE_GENERATOR}\n"
     "\n")
 
-  IF(NOT "$ENV{PATH}" STREQUAL "")
-    STRING(REPLACE "${LIST_SEPARATOR}" "\nPATH " PATH "$ENV{PATH}")
-  ELSE()
-    SET(PATH undefined)
-  ENDIF()
-  FILE(APPEND ${LOGGING_FILENAME} "PATH " ${PATH} "\n\n")
+  if(NOT "$ENV{PATH}" STREQUAL "")
+    string(REPLACE "${LIST_SEPARATOR}" "\nPATH " PATH "$ENV{PATH}")
+  else()
+    set(PATH undefined)
+  endif()
+  file(APPEND ${LOGGING_FILENAME} "PATH " ${PATH} "\n\n")
 
-  IF(NOT "$ENV{PKG_CONFIG_PATH}" STREQUAL "")
-    STRING(
-      REPLACE "${LIST_SEPARATOR}" "\nPKG_CONFIG_PATH "
-      PKG_CONFIG_PATH "$ENV{PKG_CONFIG_PATH}")
-  ELSE()
-    SET(PKG_CONFIG_PATH "undefined")
-  ENDIF()
-  FILE(APPEND ${LOGGING_FILENAME} "PKG_CONFIG_PATH " ${PKG_CONFIG_PATH} "\n\n")
+  if(NOT "$ENV{PKG_CONFIG_PATH}" STREQUAL "")
+    string(REPLACE "${LIST_SEPARATOR}" "\nPKG_CONFIG_PATH " PKG_CONFIG_PATH
+                   "$ENV{PKG_CONFIG_PATH}")
+  else()
+    set(PKG_CONFIG_PATH "undefined")
+  endif()
+  file(APPEND ${LOGGING_FILENAME} "PKG_CONFIG_PATH " ${PKG_CONFIG_PATH} "\n\n")
 
-ENDFUNCTION(LOGGING_INITIALIZE)
+endfunction(LOGGING_INITIALIZE)
 
 # LOGGING_FINALIZE()
 # --------------
 #
-# This finalizes the logging process by:
-# - logging the watched variables
+# This finalizes the logging process by: - logging the watched variables
 #
-FUNCTION(LOGGING_FINALIZE)
-  FILE(APPEND ${LOGGING_FILENAME}
+function(LOGGING_FINALIZE)
+  file(
+    APPEND ${LOGGING_FILENAME}
     "## ---------------- ##\n"
     "## CMake variables. ##\n"
     "## ---------------- ##\n"
@@ -159,36 +158,30 @@ FUNCTION(LOGGING_FINALIZE)
     "CMAKE_SHARED_LIBRARY_SUFFIX = ${CMAKE_SHARED_LIBRARY_SUFFIX}\n"
     "CMAKE_SHARED_MODULE_PREFIX = ${CMAKE_SHARED_MODULE_PREFIX}\n"
     "CMAKE_SHARED_MODULE_SUFFIX = ${CMAKE_SHARED_MODULE_SUFFIX}\n"
-    "\n"
-    )
-
-  FILE(APPEND ${LOGGING_FILENAME}
-    "## ------------------ ##\n"
-    "## Watched variables. ##\n"
-    "## ------------------ ##\n"
-    "\n")
-
-  LIST(REMOVE_DUPLICATES LOGGING_WATCHED_VARIABLES)
-  FOREACH(VAR ${LOGGING_WATCHED_VARIABLES})
-    IF(NOT DEFINED ${VAR})
-      SET(${VAR} "undefined")
-    ENDIF()
-    FILE(APPEND ${LOGGING_FILENAME}
-      "${VAR} = ${${VAR}}\n")
-  ENDFOREACH()
-
-  FILE(APPEND ${LOGGING_FILENAME}
-    "## ---------------- ##\n"
-    "## Watched targets. ##\n"
-    "## ---------------- ##\n"
     "\n")
 
-  LIST(REMOVE_DUPLICATES LOGGING_WATCHED_TARGETS)
-  FOREACH(TARGET ${LOGGING_WATCHED_TARGETS})
-    FOREACH(PROPERTY ${LOGGING_WATCHED_TARGETS_PROPERTIES})
-      GET_TARGET_PROPERTY(VALUE ${TARGET} ${PROPERTY})
-      FILE(APPEND ${LOGGING_FILENAME} "${TARGET}_${PROPERTY} = ${VALUE}\n")
-    ENDFOREACH()
-    FILE(APPEND ${LOGGING_FILENAME} "\n")
-  ENDFOREACH()
-ENDFUNCTION(LOGGING_FINALIZE)
+  file(APPEND ${LOGGING_FILENAME}
+       "## ------------------ ##\n" "## Watched variables. ##\n"
+       "## ------------------ ##\n" "\n")
+
+  list(REMOVE_DUPLICATES LOGGING_WATCHED_VARIABLES)
+  foreach(VAR ${LOGGING_WATCHED_VARIABLES})
+    if(NOT DEFINED ${VAR})
+      set(${VAR} "undefined")
+    endif()
+    file(APPEND ${LOGGING_FILENAME} "${VAR} = ${${VAR}}\n")
+  endforeach()
+
+  file(APPEND ${LOGGING_FILENAME}
+       "## ---------------- ##\n" "## Watched targets. ##\n"
+       "## ---------------- ##\n" "\n")
+
+  list(REMOVE_DUPLICATES LOGGING_WATCHED_TARGETS)
+  foreach(TARGET ${LOGGING_WATCHED_TARGETS})
+    foreach(PROPERTY ${LOGGING_WATCHED_TARGETS_PROPERTIES})
+      get_target_property(VALUE ${TARGET} ${PROPERTY})
+      file(APPEND ${LOGGING_FILENAME} "${TARGET}_${PROPERTY} = ${VALUE}\n")
+    endforeach()
+    file(APPEND ${LOGGING_FILENAME} "\n")
+  endforeach()
+endfunction(LOGGING_FINALIZE)
diff --git a/cmake/man.cmake b/cmake/man.cmake
index e976537..c574583 100644
--- a/cmake/man.cmake
+++ b/cmake/man.cmake
@@ -1,63 +1,56 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # MANPAGE
 # -------
 #
-# Generate a pod man page from a template, then
-# generate the man page and compress it.
-# This macro also adds the installation rules.
+# Generate a pod man page from a template, then generate the man page and
+# compress it. This macro also adds the installation rules.
 #
-MACRO(MANPAGE NAME)
-  IF(WIN32)
-    MESSAGE(FATAL_ERROR "This macro is not supported on Microsoft Windows.")
-  ENDIF(WIN32)
+macro(MANPAGE NAME)
+  if(WIN32)
+    message(FATAL_ERROR "This macro is not supported on Microsoft Windows.")
+  endif(WIN32)
 
-  FIND_PROGRAM(POD2MAN pod2man)
-  FIND_PROGRAM(GZIP gzip)
-  CONFIGURE_FILE(${NAME}.pod.in ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.pod @ONLY)
+  find_program(POD2MAN pod2man)
+  find_program(GZIP gzip)
+  configure_file(${NAME}.pod.in ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.pod @ONLY)
 
-  ADD_CUSTOM_COMMAND(
+  add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.1
-    COMMAND ${POD2MAN} --section=1
-            --center="LOCAL USER COMMANDS"
-	    --release ${PROJECT_NAME} ${NAME}.pod
-	    > ${NAME}.1
+    COMMAND ${POD2MAN} --section=1 --center="LOCAL USER COMMANDS" --release
+            ${PROJECT_NAME} ${NAME}.pod > ${NAME}.1
     DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.pod)
 
-  ADD_CUSTOM_COMMAND(
+  add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.1.gz
     COMMAND ${GZIP} -c ${NAME}.1 > ${NAME}.1.gz
     DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.1)
 
   # Trigger man page generation at install.
-  INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} man)")
+  install(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} man)")
 
   # Detects if PKGMAN has been specified
-  SET(DESTINATION_MAN_PAGE share/man/man1)
-  IF(MANDIR)
-    SET(DESTINATION_MAN_PAGE ${MANDIR}/man1)
-  ENDIF(MANDIR)
+  set(DESTINATION_MAN_PAGE share/man/man1)
+  if(MANDIR)
+    set(DESTINATION_MAN_PAGE ${MANDIR}/man1)
+  endif(MANDIR)
 
   # Install man page.
-  INSTALL(
-    FILES ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.1.gz
-    DESTINATION ${DESTINATION_MAN_PAGE})
-
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
-    POD2MAN
-    GZIP
-    )
-ENDMACRO(MANPAGE)
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.1.gz
+          DESTINATION ${DESTINATION_MAN_PAGE})
+
+  list(APPEND LOGGING_WATCHED_VARIABLES POD2MAN GZIP)
+endmacro(MANPAGE)
diff --git a/cmake/metapodfromurdf.cmake b/cmake/metapodfromurdf.cmake
index 648a317..015eb10 100644
--- a/cmake/metapodfromurdf.cmake
+++ b/cmake/metapodfromurdf.cmake
@@ -1,45 +1,35 @@
-# Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
-# Olivier STASSE (LAAS,CNRS)
+# Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS. Olivier STASSE (LAAS,CNRS)
 # macro inspired from Sébastien Barthélémy in laas/metapod
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
+macro(ADD_METAPOD_FROM_URDF_MODEL model_name)
 
-MACRO(ADD_METAPOD_FROM_URDF_MODEL model_name)
-  
-  SET(robot_name "robot_${model_name}")
-  SET(lib_robot_name "metapod_${model_name}")
-  SET(dir_robot 
-    ${PROJECT_BINARY_DIR}/include/metapod/models/${model_name}
-    )
-  SET(robot_name_sources
-    ${dir_robot}/${model_name}.hh
-    ${dir_robot}/${model_name}.cc
-    )
-  SET(data_robot_dir ${METAPOD_PREFIX}/share/metapod/data/${model_name})
-  SET(config_file_robot ${data_robot_dir}/${model_name}.config)
-  SET(license_file_robot ${data_robot_dir}/${model_name}_license_file.txt)
-  SET(urdf_file_robot ${data_robot_dir}/${model_name}.urdf)
-  
-  ADD_CUSTOM_COMMAND(
+  set(robot_name "robot_${model_name}")
+  set(lib_robot_name "metapod_${model_name}")
+  set(dir_robot ${PROJECT_BINARY_DIR}/include/metapod/models/${model_name})
+  set(robot_name_sources ${dir_robot}/${model_name}.hh
+                         ${dir_robot}/${model_name}.cc)
+  set(data_robot_dir ${METAPOD_PREFIX}/share/metapod/data/${model_name})
+  set(config_file_robot ${data_robot_dir}/${model_name}.config)
+  set(license_file_robot ${data_robot_dir}/${model_name}_license_file.txt)
+  set(urdf_file_robot ${data_robot_dir}/${model_name}.urdf)
+
+  add_custom_command(
     OUTPUT ${robot_name_sources}
-    COMMAND metapodfromurdf
-    --name ${model_name}
-    --libname ${lib_robot_name} 
-    --directory ${dir_robot}
-    --config-file ${config_file_robot}
-    --license-file ${license_file_robot}
-    ${urdf_file_robot}
-  )
-ENDMACRO(ADD_METAPOD_FROM_URDF_MODEL)
+    COMMAND
+      metapodfromurdf --name ${model_name} --libname ${lib_robot_name}
+      --directory ${dir_robot} --config-file ${config_file_robot}
+      --license-file ${license_file_robot} ${urdf_file_robot})
+endmacro(ADD_METAPOD_FROM_URDF_MODEL)
diff --git a/cmake/modernize-links.cmake b/cmake/modernize-links.cmake
index fd1b7fb..be3b78b 100644
--- a/cmake/modernize-links.cmake
+++ b/cmake/modernize-links.cmake
@@ -4,37 +4,41 @@
 # Author: Guilhem Saurel
 #
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
-#   .. command:: MODERNIZE_TARGET_LINK_LIBRARIES(target SCOPE <INTERFACE|PUBLIC|PRIVATE>
-#                 TARGETS [targets...]
-#                 LIBRARIES [libraries...]
-#                 INCLUDE_DIRS [include_dirs...])
-#
-#      link "target" to modern "targets" if they are already defined, or fall back to old-school
-#      "libraries" and "include_dirs"
+# .. command:: MODERNIZE_TARGET_LINK_LIBRARIES(target SCOPE
+# <INTERFACE|PUBLIC|PRIVATE> TARGETS [targets...] LIBRARIES [libraries...]
+# INCLUDE_DIRS [include_dirs...])
 #
+# link "target" to modern "targets" if they are already defined, or fall back to
+# old-school "libraries" and "include_dirs"
 #
 
 macro(MODERNIZE_TARGET_LINK_LIBRARIES target)
   set(options)
   set(oneValueArgs SCOPE)
   set(multiValueArgs TARGETS LIBRARIES INCLUDE_DIRS)
-  cmake_parse_arguments(MODERNIZE_LINK "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
+  cmake_parse_arguments(MODERNIZE_LINK "${options}" "${oneValueArgs}"
+                        "${multiValueArgs}" ${ARGN})
 
   set(_targets_available TRUE)
   foreach(_tgt ${MODERNIZE_LINK_TARGETS})
     if(NOT TARGET ${_tgt})
-      message(VERBOSE "${_tgt} is not available. Falling back to old-school links to libraries / include_dirs")
+      message(
+        VERBOSE
+        "${_tgt} is not available. Falling back to old-school links to libraries / include_dirs"
+      )
       set(_targets_available FALSE)
     endif()
   endforeach()
 
   if(_targets_available)
-    target_link_libraries(${target} ${MODERNIZE_LINK_SCOPE} ${MODERNIZE_LINK_TARGETS})
+    target_link_libraries(${target} ${MODERNIZE_LINK_SCOPE}
+                          ${MODERNIZE_LINK_TARGETS})
   else()
-    target_link_libraries(${target} ${MODERNIZE_LINK_SCOPE} ${MODERNIZE_LINK_LIBRARIES})
-    target_include_directories(${target} SYSTEM ${MODERNIZE_LINK_SCOPE} ${MODERNIZE_LINK_INCLUDE_DIRS})
+    target_link_libraries(${target} ${MODERNIZE_LINK_SCOPE}
+                          ${MODERNIZE_LINK_LIBRARIES})
+    target_include_directories(${target} SYSTEM ${MODERNIZE_LINK_SCOPE}
+                               ${MODERNIZE_LINK_INCLUDE_DIRS})
   endif()
 endmacro()
diff --git a/cmake/msvc-specific.cmake b/cmake/msvc-specific.cmake
index 298aa02..f7ff9e2 100644
--- a/cmake/msvc-specific.cmake
+++ b/cmake/msvc-specific.cmake
@@ -1,17 +1,17 @@
 # Copyright (C) 2016-2021 JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 #
 # This file contains a collection of macros specific to Visual Studio and the
@@ -24,14 +24,13 @@
 # Deprecated
 #
 # This macro return a string corresponding to the version of the MSVC compiler
-# used.
-# The value is returned in the variable MSVC_VERSION. It is an empty string if
-#  - the compiler used is not MSVC,
-#  - it is older than MSVC 6.0
-#  - or newer than MSVC 14.0
+# used. The value is returned in the variable MSVC_VERSION. It is an empty
+# string if - the compiler used is not MSVC, - it is older than MSVC 6.0 - or
+# newer than MSVC 14.0
 #
-MACRO(GET_MSVC_VERSION)
-  message(DEPRECATION "This macro is deprecated. Use GET_MSVC_TOOLS_VERSION instead.")
+macro(GET_MSVC_VERSION)
+  message(
+    DEPRECATION "This macro is deprecated. Use GET_MSVC_TOOLS_VERSION instead.")
   if(MSVC60)
     set(MSVC_VERSION "6.0")
   elseif(MSVC70)
@@ -53,27 +52,33 @@ MACRO(GET_MSVC_VERSION)
   else()
     if(MSVC)
       set(MSVC_VERSION "14.0")
-      message(AUTHOR_WARNING "MSVC version not found. Set MSVC_VERSION to 14.0 by default. Please update the GET_MSVC_VERSION macro.")
+      message(
+        AUTHOR_WARNING
+          "MSVC version not found. Set MSVC_VERSION to 14.0 by default. Please update the GET_MSVC_VERSION macro."
+      )
     else()
       set(MSVC_VERSION "")
-      message(AUTHOR_WARNING "MSVC version not found. You are not using a MSVC generator.")
+      message(
+        AUTHOR_WARNING
+          "MSVC version not found. You are not using a MSVC generator.")
     endif()
   endif()
-ENDMACRO(GET_MSVC_VERSION)
-
+endmacro(GET_MSVC_VERSION)
 
 # GET_MSVC_TOOLS_VERSION
 # ----------------------
 #
 # This macro return a string corresponding to the version of the MSVC compiler
-# used.
-# The value is returned in the variable MSVC_TOOLS_VERSION. It is an empty
+# used. The value is returned in the variable MSVC_TOOLS_VERSION. It is an empty
 # string if the compiler used is not MSVC.
 #
-MACRO(GET_MSVC_TOOLS_VERSION)
+macro(GET_MSVC_TOOLS_VERSION)
   string(REGEX MATCH "\\." CONTAINS_DOT ${MSVC_VERSION})
   if(CONTAINS_DOT)
-    message(AUTHOR_WARNING "MSVC_VERSION has been overwritten with a tools version number (likely by a call to deprecated GET_MSVC_VERSION. Using this number.")
+    message(
+      AUTHOR_WARNING
+        "MSVC_VERSION has been overwritten with a tools version number (likely by a call to deprecated GET_MSVC_VERSION. Using this number."
+    )
     set(MSVC_TOOLS_VERSION ${MSVC_VERSION})
   else()
     if(MSVC_VERSION EQUAL 1200)
@@ -101,82 +106,90 @@ MACRO(GET_MSVC_TOOLS_VERSION)
     else()
       if(MSVC)
         set(MSVC_TOOLS_VERSION "16.0")
-        message(AUTHOR_WARNING "MSVC version not found. Assuming newer version and set MSVC_TOOLS_VERSION to 16.0 by default. Please update the GET_MSVC_TOOLS_VERSION macro.")
+        message(
+          AUTHOR_WARNING
+            "MSVC version not found. Assuming newer version and set MSVC_TOOLS_VERSION to 16.0 by default. Please update the GET_MSVC_TOOLS_VERSION macro."
+        )
       else()
         set(MSVC_TOOLS_VERSION "")
-        message(AUTHOR_WARNING "MSVC version not found. You are not using a MSVC generator.")
+        message(
+          AUTHOR_WARNING
+            "MSVC version not found. You are not using a MSVC generator.")
       endif()
     endif()
   endif()
   unset(CONTAINS_DOT)
-ENDMACRO()
-
+endmacro()
 
 # REQUEST_MINIMUM_MSVC_VERSION(VER)
 # ---------------------------------
 #
-# Return a fatal error if the current MSVC version is strictly lower than VER
-# or when no MSVC compiler or an unknown version of it is used.
+# Return a fatal error if the current MSVC version is strictly lower than VER or
+# when no MSVC compiler or an unknown version of it is used.
 #
 # A reason for the version to be unknown is that it is newer than the versions
-# recognize by the above macro GET_MSVC_TOOLS_VERSION. In this case, please update 
-# the macro and its documentation.
+# recognize by the above macro GET_MSVC_TOOLS_VERSION. In this case, please
+# update the macro and its documentation.
 #
-MACRO(REQUIRE_MINIMUM_MSVC_VERSION VERSION)
-  GET_MSVC_TOOLS_VERSION()
-  if (${MSVC_TOOLS_VERSION})
-    if (NOT ${MSVC_TOOLS_VERSION} VERSION_GREATER ${VERSION})
-	  message(FATAL_ERROR "Minimum MSVC version required is " ${VERSION} " but version " ${MSVC_TOOLS_VERSION} " was found.")
+macro(REQUIRE_MINIMUM_MSVC_VERSION VERSION)
+  get_msvc_tools_version()
+  if(${MSVC_TOOLS_VERSION})
+    if(NOT ${MSVC_TOOLS_VERSION} VERSION_GREATER ${VERSION})
+      message(FATAL_ERROR "Minimum MSVC version required is " ${VERSION}
+                          " but version " ${MSVC_TOOLS_VERSION} " was found.")
     endif()
   else()
-    message(FATAL_ERROR "You are requiring a minimum version for MSVC but you do not use a MSVC generator.")
+    message(
+      FATAL_ERROR
+        "You are requiring a minimum version for MSVC but you do not use a MSVC generator."
+    )
   endif(${MSVC_TOOLS_VERSION})
-ENDMACRO(REQUIRE_MINIMUM_MSVC_VERSION)
+endmacro(REQUIRE_MINIMUM_MSVC_VERSION)
 
-if(${CMAKE_VERSION} VERSION_LESS "3.5.0") 
-    include(CMakeParseArguments)
+if(${CMAKE_VERSION} VERSION_LESS "3.5.0")
+  include(CMakeParseArguments)
 endif()
 
-
 # GENERATE_MSVC_DOT_USER_FILE(<name> [<additional_path>])
-# GENERATE_MSVC_DOT_USER_FILE(NAME <name> [COMMAND <command>] 
-#                             [COMMAND_ARGS <args>] 
-#                             [WORKING_DIRECTORY <dir>]
-#                             [ADDITIONAL_PATH <additional_path>])
+# GENERATE_MSVC_DOT_USER_FILE(NAME <name> [COMMAND <command>] [COMMAND_ARGS
+# <args>] [WORKING_DIRECTORY <dir>] [ADDITIONAL_PATH <additional_path>])
 # ----------------------------------------------------------------
 #
 # Generate the file <name>.vcxproj.user alongside the project file
-# <name>.vcxproj that sets up the options for a local debugging session.
-# This is intended to be used for the test projects, so that they can be 
-# launched from within the Visual Studio IDE by pressing F5.
-# The project will be executed with the command <command> <args> if specified
-# with <dir> as the working directory.
-# The %PATH% environment variable is automatically extended to include the 
+# <name>.vcxproj that sets up the options for a local debugging session. This is
+# intended to be used for the test projects, so that they can be launched from
+# within the Visual Studio IDE by pressing F5. The project will be executed with
+# the command <command> <args> if specified with <dir> as the working directory.
+# The %PATH% environment variable is automatically extended to include the
 # location of the libraries generated by the solution, i.e. it sets the field
-# Configuration Properties > Debuging > Environment to 
+# Configuration Properties > Debuging > Environment to
 # PATH=$(SolutionDir)\src\$(Configuration);additional_path;%PATH%
 # <additional_path> is an optional semicolon-separated list of paths.
 #
-MACRO(GENERATE_MSVC_DOT_USER_FILE)
+macro(GENERATE_MSVC_DOT_USER_FILE)
   if(MSVC)
-    REQUIRE_MINIMUM_MSVC_VERSION("10.0")
-    
-    set(oneValueArgs NAME COMMAND COMMAND_ARGS WORKING_DIRECTORY ADDITIONAL_PATH)
-    cmake_parse_arguments(GMDUT "" "${oneValueArgs}" "" ${ARGN} )
-    
-    if((NOT GMDUT_NAME) AND (NOT GMDUT_COMMAND) AND (NOT GMDUT_COMMAND_ARGS) 
-        AND (NOT GMDUT_WORK_DIR) AND (NOT GMDUT_ADDITIONAL_PATH))
-      #legacy version
+    require_minimum_msvc_version("10.0")
+
+    set(oneValueArgs NAME COMMAND COMMAND_ARGS WORKING_DIRECTORY
+                     ADDITIONAL_PATH)
+    cmake_parse_arguments(GMDUT "" "${oneValueArgs}" "" ${ARGN})
+
+    if((NOT GMDUT_NAME)
+       AND (NOT GMDUT_COMMAND)
+       AND (NOT GMDUT_COMMAND_ARGS)
+       AND (NOT GMDUT_WORK_DIR)
+       AND (NOT GMDUT_ADDITIONAL_PATH))
+      # legacy version
       set(GMDUT_NAME ${ARGV0})
       if(${ARGC} GREATER 1)
         set(MSVC_DOT_USER_ADDITIONAL_PATH_DOT_USER ";${ARGV1}")
       endif()
     endif()
-    
+
     if("${CMAKE_MSVCIDE_RUN_PATH}" STREQUAL "")
       set(CMAKE_MSVCIDE_RUN_PATH "$(SolutionDir)\src\$(Configuration)")
     endif()
-    
+
     if(NOT GMDUT_NAME)
       message(FATAL_ERROR "NAME argument is required.")
     endif()
@@ -189,12 +202,14 @@ MACRO(GENERATE_MSVC_DOT_USER_FILE)
     if(GMDUT_ADDITIONAL_PATH)
       set(MSVC_DOT_USER_ADDITIONAL_PATH_DOT_USER ";${GMDUT_ADDITIONAL_PATH}")
     endif()
-    
-    GET_MSVC_TOOLS_VERSION()
-    set(DOT_USER_TEMPLATE_PATH ${PROJECT_JRL_CMAKE_MODULE_DIR}/msvc.vcxproj.user.in)
-    set(DOT_USER_FILE_PATH ${CMAKE_CURRENT_BINARY_DIR}/${GMDUT_NAME}.vcxproj.user)
+
+    get_msvc_tools_version()
+    set(DOT_USER_TEMPLATE_PATH
+        ${PROJECT_JRL_CMAKE_MODULE_DIR}/msvc.vcxproj.user.in)
+    set(DOT_USER_FILE_PATH
+        ${CMAKE_CURRENT_BINARY_DIR}/${GMDUT_NAME}.vcxproj.user)
     configure_file(${DOT_USER_TEMPLATE_PATH} ${DOT_USER_FILE_PATH})
-    
+
     unset(MSVC_DOT_USER_ADDITIONAL_PATH_DOT_USER)
   endif(MSVC)
-ENDMACRO(GENERATE_MSVC_DOT_USER_FILE)
+endmacro(GENERATE_MSVC_DOT_USER_FILE)
diff --git a/cmake/msvc.vcxproj.user.in b/cmake/msvc.vcxproj.user.in
index b74a956..2d13edb 100644
--- a/cmake/msvc.vcxproj.user.in
+++ b/cmake/msvc.vcxproj.user.in
@@ -7,4 +7,4 @@
     <LocalDebuggerEnvironment>PATH=@CMAKE_MSVCIDE_RUN_PATH@@MSVC_DOT_USER_ADDITIONAL_PATH_DOT_USER@;%PATH%</LocalDebuggerEnvironment>
     <DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>
   </PropertyGroup>
-</Project>
\ No newline at end of file
+</Project>
diff --git a/cmake/openhrp.cmake b/cmake/openhrp.cmake
index e2ce96d..e575c52 100644
--- a/cmake/openhrp.cmake
+++ b/cmake/openhrp.cmake
@@ -1,69 +1,65 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS, LIRMM-CNRS
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-
-# Search if openhrp3.1 is installed.
-# Set the value GRX_PREFIX if found
-MACRO(SEARCH_GRX)
+# Search if openhrp3.1 is installed. Set the value GRX_PREFIX if found
+macro(SEARCH_GRX)
   # Define additional options.
-  FIND_PATH(GRX_PREFIX
-    # Make sure bin/DynamicsSimulator exists (to validate that it is
-    # _really_ the prefix of an OpenHRP setup).
+  find_path(
+    GRX_PREFIX
+    # Make sure bin/DynamicsSimulator exists (to validate that it is _really_
+    # the prefix of an OpenHRP setup).
     include/rtm/idl/SDOPackage.hh
     HINTS /opt/grx/
     DOC "GRX software prefix (i.e. '/opt/grxX.Y')"
     NO_DEFAULT_PATH)
-ENDMACRO(SEARCH_GRX)
-
+endmacro(SEARCH_GRX)
 
-# Search if openhrp3.0(.7) is installed.
-# Set the value GRX_PREFIX if found
-MACRO(SEARCH_GRX3)
-  FIND_PATH(GRX_PREFIX
-    # Make sure bin/DynamicsSimulator exists (to validate that it is
-    # _really_ the prefix of an OpenHRP setup).
+# Search if openhrp3.0(.7) is installed. Set the value GRX_PREFIX if found
+macro(SEARCH_GRX3)
+  find_path(
+    GRX_PREFIX
+    # Make sure bin/DynamicsSimulator exists (to validate that it is _really_
+    # the prefix of an OpenHRP setup).
     OpenHRP/DynamicsSimulator/server/DynamicsSimulator
     HINTS /opt/grx3.0
     DOC "GRX software prefix (i.e. '/opt/grxX.Y')"
     NO_DEFAULT_PATH)
-ENDMACRO(SEARCH_GRX3)
+endmacro(SEARCH_GRX3)
 
+# Check the robots installed in openhrp Args: the robot researched (and handled
+# by the package). Return: the list GRX_ROBOTS Example:
+# SEARCH_GRX_ROBOTS("robot1;robot2")
+macro(SEARCH_GRX_ROBOTS HANDLED_ROBOTS)
+  foreach(robot ${HANDLED_ROBOTS})
+    if(!GRX_PREFIX)
+      message(ERROR "Dit not find GRX_PREFIX")
+    else(!GRX_PREFIX)
+      # List of know robots.
+      if(IS_DIRECTORY ${GRX_PREFIX}/${robot})
+        list(APPEND GRX_ROBOTS ${robot})
+      endif()
+    endif(!GRX_PREFIX)
+  endforeach(robot)
 
-# Check the robots installed in openhrp
-# Args: the robot researched (and handled by the package).
-# Return: the list GRX_ROBOTS
-# Example: SEARCH_GRX_ROBOTS("robot1;robot2")
-MACRO(SEARCH_GRX_ROBOTS  HANDLED_ROBOTS)
-  FOREACH(robot ${HANDLED_ROBOTS})
-    IF(!GRX_PREFIX)
-      MESSAGE(ERROR "Dit not find GRX_PREFIX")
-    ELSE(!GRX_PREFIX)
-      #List of know robots.
-      IF(IS_DIRECTORY ${GRX_PREFIX}/${robot})
-        LIST(APPEND GRX_ROBOTS ${robot})
-      ENDIF()
-    ENDIF(!GRX_PREFIX)
-  ENDFOREACH(robot)
-
-  IF(NOT GRX_ROBOTS)
-    MESSAGE(FATAL_ERROR
-      "None of the following robots (${HANDLED_ROBOTS}) were found in ${GRX_PREFIX}."
+  if(NOT GRX_ROBOTS)
+    message(
+      FATAL_ERROR
+        "None of the following robots (${HANDLED_ROBOTS}) were found in ${GRX_PREFIX}."
     )
-  ELSE()
-    MESSAGE("The following robots were found: ${GRX_ROBOTS}")
-  ENDIF()
-  LIST(APPEND LOGGING_WATCHED_VARIABLES GRX_ROBOTS)
-ENDMACRO(SEARCH_GRX_ROBOTS)
-
+  else()
+    message("The following robots were found: ${GRX_ROBOTS}")
+  endif()
+  list(APPEND LOGGING_WATCHED_VARIABLES GRX_ROBOTS)
+endmacro(SEARCH_GRX_ROBOTS)
diff --git a/cmake/openhrpcontroller.cmake b/cmake/openhrpcontroller.cmake
index 702da5e..28ba292 100644
--- a/cmake/openhrpcontroller.cmake
+++ b/cmake/openhrpcontroller.cmake
@@ -1,20 +1,20 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # OpenRTM-aist
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/openrtm.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/openrtm.cmake)
 
 macro(create_simple_controller CONTROLLER_NAME)
   openrtm()
@@ -22,29 +22,36 @@ macro(create_simple_controller CONTROLLER_NAME)
   target_link_libraries(${CONTROLLER_NAME} ${OPENRTM_LIBRARIES})
   set_target_properties(${CONTROLLER_NAME} PROPERTIES PREFIX "")
 
-  add_executable(${CONTROLLER_NAME}Comp ${CONTROLLER_NAME}Comp.cpp ${CONTROLLER_NAME}.cpp)
+  add_executable(${CONTROLLER_NAME}Comp ${CONTROLLER_NAME}Comp.cpp
+                                        ${CONTROLLER_NAME}.cpp)
   target_link_libraries(${CONTROLLER_NAME}Comp ${OPENRTM_LIBRARIES})
 
   if(WIN32)
     add_definitions(${OPENRTM_DEFINITIONS})
-    set_target_properties(${CONTROLLER_NAME}Comp PROPERTIES DEBUG_POSTFIX d )
+    set_target_properties(${CONTROLLER_NAME}Comp PROPERTIES DEBUG_POSTFIX d)
   endif()
-  
-  set(controller_install_path lib/openhrp/controller/${CONTROLLER_NAME})	
- 
-  install(TARGETS ${CONTROLLER_NAME} ${CONTROLLER_NAME}Comp DESTINATION ${controller_install_path} CONFIGURATIONS Release)
-  
+
+  set(controller_install_path lib/openhrp/controller/${CONTROLLER_NAME})
+
+  install(
+    TARGETS ${CONTROLLER_NAME} ${CONTROLLER_NAME}Comp
+    DESTINATION ${controller_install_path}
+    CONFIGURATIONS Release)
+
   if(WIN32)
-    install(TARGETS ${CONTROLLER_NAME} ${CONTROLLER_NAME}Comp
-        DESTINATION ${PROJECT_SOURCE_DIR}
-        CONFIGURATIONS Release )
+    install(
+      TARGETS ${CONTROLLER_NAME} ${CONTROLLER_NAME}Comp
+      DESTINATION ${PROJECT_SOURCE_DIR}
+      CONFIGURATIONS Release)
   endif()
 
   install(FILES rtc.conf bridge.conf DESTINATION ${controller_install_path})
 
   if(EXISTS ${PROJECT_SOURCE_DIR}/etc)
-    install(DIRECTORY etc DESTINATION ${controller_install_path} PATTERN ".svn" EXCLUDE)
+    install(
+      DIRECTORY etc
+      DESTINATION ${controller_install_path}
+      PATTERN ".svn" EXCLUDE)
   endif()
 
 endmacro()
-
diff --git a/cmake/openrtm.cmake b/cmake/openrtm.cmake
index 420e805..e93f601 100644
--- a/cmake/openrtm.cmake
+++ b/cmake/openrtm.cmake
@@ -1,22 +1,23 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # OpenRTM-aist
 macro(openrtm)
 
-  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_JRL_CMAKE_MODULE_DIR}/find-external/OpenRTM)
+  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
+                        ${PROJECT_JRL_CMAKE_MODULE_DIR}/find-external/OpenRTM)
 
   find_package(OpenRTM REQUIRED)
   set(ADDITIONAL_SYMBOL "")
@@ -26,11 +27,12 @@ macro(openrtm)
     add_definitions(${OPENRTM_DEFINITIONS})
   endif()
 
-  set(OPENHRP_RTM_IDL_DIR "${OpenHRP_SOURCE_DIR}/idl/OpenRTM/${OPENRTM_VERSION}")
-  if( OPENRTM_VERSION STREQUAL OPENRTM_VERSION042 )
+  set(OPENHRP_RTM_IDL_DIR
+      "${OpenHRP_SOURCE_DIR}/idl/OpenRTM/${OPENRTM_VERSION}")
+  if(OPENRTM_VERSION STREQUAL OPENRTM_VERSION042)
     set(ADDITIONAL_SYMBOL "OPENRTM_VERSION_042")
   endif()
-  
+
   if(UNIX)
     set(OPENRTM_IDL_DIR "${OPENRTM_DIR}/include/rtm/idl")
   elseif(WIN32)
@@ -40,8 +42,7 @@ macro(openrtm)
       set(OPENRTM_IDL_DIR "${OPENRTM_DIR}/rtm/idl")
     endif()
   endif()
-  
+
   add_definitions(${OMNIORB_CFLAGS})
 
 endmacro(openrtm)
-
diff --git a/cmake/oscheck.cmake b/cmake/oscheck.cmake
index 26fe6b9..bfd53ae 100644
--- a/cmake/oscheck.cmake
+++ b/cmake/oscheck.cmake
@@ -1,56 +1,44 @@
 # Copyright (C) 2008-2019 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
 # .. command:: CHECK_DEBIAN
 #
-#   Checks is the current system is Debian based
-#   You can then use DEBIAN_FOUND
+# Checks is the current system is Debian based You can then use DEBIAN_FOUND
 #
-MACRO(CHECK_DEBIAN)
-  FIND_FILE(DEBIAN_FOUND debian_version debconf.conf
-    PATHS /etc)
-ENDMACRO(CHECK_DEBIAN)
+macro(CHECK_DEBIAN)
+  find_file(DEBIAN_FOUND debian_version debconf.conf PATHS /etc)
+endmacro(CHECK_DEBIAN)
 
-
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
 # .. command:: CHECK_NETBSD
 #
-#   Checks is the current system is NetBSD
-#   You can then use NETBSD_FOUND
+# Checks is the current system is NetBSD You can then use NETBSD_FOUND
 #
-MACRO(CHECK_NETBSD)
-  FIND_FILE(NETBSD_FOUND netbsd
-    PATHS /)
-ENDMACRO(CHECK_NETBSD)
-
+macro(CHECK_NETBSD)
+  find_file(NETBSD_FOUND netbsd PATHS /)
+endmacro(CHECK_NETBSD)
 
-#.rst:
-# .. ifmode:: user
+# .rst: .. ifmode:: user
 #
 # .. command:: CHECK_ARCHLINUX
 #
-#   Checks is the current system is ArchLinux
-#   You can then use ARCHLINUX_FOUND
+# Checks is the current system is ArchLinux You can then use ARCHLINUX_FOUND
 #
-MACRO(CHECK_ARCHLINUX)
-  FIND_FILE(ARCHLINUX_FOUND arch-release
-    PATHS /etc)
-ENDMACRO(CHECK_ARCHLINUX)
-
+macro(CHECK_ARCHLINUX)
+  find_file(ARCHLINUX_FOUND arch-release PATHS /etc)
+endmacro(CHECK_ARCHLINUX)
diff --git a/cmake/package-config.cmake b/cmake/package-config.cmake
index 46bb25a..92c3da4 100644
--- a/cmake/package-config.cmake
+++ b/cmake/package-config.cmake
@@ -1,20 +1,17 @@
 # Copyright (C) 2016-2022  LAAS-CNRS, JRL AIST-CNRS and others.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-
-
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # _SETUP_PROJECT_PACKAGE_INIT
 # -------------
@@ -22,210 +19,225 @@
 # Initialize the PackageConfig installation configuration.
 # https://github.com/forexample/package-example
 #
-# This function does not take any argument but check that some
-# variables are defined (see documentation at the beginning of this
-# file).
+# This function does not take any argument but check that some variables are
+# defined (see documentation at the beginning of this file).
 #
-MACRO(_SETUP_PROJECT_PACKAGE_INIT)
-####
-# Installation (https://github.com/forexample/package-example)
+macro(_SETUP_PROJECT_PACKAGE_INIT)
+  #
+  # Installation (https://github.com/forexample/package-example)
 
-# Layout. This works for all platforms:
-#   * <prefix>/lib/cmake/<PROJECT-NAME>
-#   * <prefix>/lib/
-#   * <prefix>/include/
-set(CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
-set(INCLUDE_INSTALL_DIR "include")
-set(INCLUDE_INSTALL_DESTINATION "${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}")
+  # Layout. This works for all platforms: * <prefix>/lib/cmake/<PROJECT-NAME> *
+  # <prefix>/lib/ * <prefix>/include/
+  set(CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
+  set(INCLUDE_INSTALL_DIR "include")
+  set(INCLUDE_INSTALL_DESTINATION "${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}")
 
-set(GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
+  set(GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
 
-# Configuration
-set(VERSION_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake")
-set(PROJECT_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}Config.cmake")
-set(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
-set(namespace "${PROJECT_NAME}::")
+  # Configuration
+  set(VERSION_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake")
+  set(PROJECT_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}Config.cmake")
+  set(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
+  set(namespace "${PROJECT_NAME}::")
 
-set(_PACKAGE_CONFIG_DEPENDENCIES_PROJECTS "" CACHE INTERNAL "")
-set(_PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE "" CACHE INTERNAL "")
-set(_PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY "" CACHE INTERNAL "")
-set(_PACKAGE_CONFIG_DEPENDENCIES_FIND_EXTERNAL "" CACHE INTERNAL "")
-set(PACKAGE_EXTRA_MACROS "" CACHE INTERNAL "")
-ENDMACRO(_SETUP_PROJECT_PACKAGE_INIT)
+  set(_PACKAGE_CONFIG_DEPENDENCIES_PROJECTS
+      ""
+      CACHE INTERNAL "")
+  set(_PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE
+      ""
+      CACHE INTERNAL "")
+  set(_PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY
+      ""
+      CACHE INTERNAL "")
+  set(_PACKAGE_CONFIG_DEPENDENCIES_FIND_EXTERNAL
+      ""
+      CACHE INTERNAL "")
+  set(PACKAGE_EXTRA_MACROS
+      ""
+      CACHE INTERNAL "")
+endmacro(_SETUP_PROJECT_PACKAGE_INIT)
 
-#.rst:
-# .. command:: ADD_PROJECT_DEPENDENCY(ARGS [PKG_CONFIG_REQUIRES pkg] [FOR_COMPONENT component] [FIND_EXTERNAL pkg])
+# .rst: .. command:: ADD_PROJECT_DEPENDENCY(ARGS [PKG_CONFIG_REQUIRES pkg]
+# [FOR_COMPONENT component] [FIND_EXTERNAL pkg])
 #
-#   This is a wrapper around find_package to add correct find_dependency calls in
-#   the generated config script. All arguments are passed to find_package.
+# This is a wrapper around find_package to add correct find_dependency calls in
+# the generated config script. All arguments are passed to find_package.
 #
-#   In cases where find_package is not supported by a project, or only in recent
-#   versions, one should provide a custom <PackageName>Config.cmake or use a more
-#   traditional way to get a dependency.
+# In cases where find_package is not supported by a project, or only in recent
+# versions, one should provide a custom <PackageName>Config.cmake or use a more
+# traditional way to get a dependency.
 #
-#   If PKG_CONFIG_REQUIRES is provided, it will also add pkg to the Requires
-#   section of the generated .pc file
+# If PKG_CONFIG_REQUIRES is provided, it will also add pkg to the Requires
+# section of the generated .pc file
 #
-#   If FIND_EXTERNAL is provided, a custom dependency finder will be added in $CMAKE_MODULE_PATH
-#   and installed with the project
+# If FIND_EXTERNAL is provided, a custom dependency finder will be added in
+# $CMAKE_MODULE_PATH and installed with the project
 #
-MACRO(ADD_PROJECT_DEPENDENCY)
-  # add dependency to the generated .pc
-  # ref https://github.com/jrl-umi3218/jrl-cmakemodules/pull/335
-  cmake_parse_arguments(PARSED_ARGN "" "PKG_CONFIG_REQUIRES;FOR_COMPONENT;FIND_EXTERNAL" "" ${ARGN})
-  IF(PARSED_ARGN_PKG_CONFIG_REQUIRES)
-    _ADD_TO_LIST_IF_NOT_PRESENT(_PKG_CONFIG_REQUIRES "${PARSED_ARGN_PKG_CONFIG_REQUIRES}")
-    _ADD_TO_LIST_IF_NOT_PRESENT(_PKG_CONFIG_DEP_NOT_FOR_CONFIG_CMAKE "${PARSED_ARGN_PKG_CONFIG_REQUIRES}")
-  ENDIF()
+macro(ADD_PROJECT_DEPENDENCY)
+  # add dependency to the generated .pc ref
+  # https://github.com/jrl-umi3218/jrl-cmakemodules/pull/335
+  cmake_parse_arguments(
+    PARSED_ARGN "" "PKG_CONFIG_REQUIRES;FOR_COMPONENT;FIND_EXTERNAL" "" ${ARGN})
+  if(PARSED_ARGN_PKG_CONFIG_REQUIRES)
+    _add_to_list_if_not_present(_PKG_CONFIG_REQUIRES
+                                "${PARSED_ARGN_PKG_CONFIG_REQUIRES}")
+    _add_to_list_if_not_present(_PKG_CONFIG_DEP_NOT_FOR_CONFIG_CMAKE
+                                "${PARSED_ARGN_PKG_CONFIG_REQUIRES}")
+  endif()
   if(PARSED_ARGN_FOR_COMPONENT)
     set(component "_${PARSED_ARGN_FOR_COMPONENT}")
   endif(PARSED_ARGN_FOR_COMPONENT)
   if(PARSED_ARGN_FIND_EXTERNAL)
     set(_ext "find-external/${PARSED_ARGN_FIND_EXTERNAL}")
     set(CMAKE_MODULE_PATH "${PROJECT_JRL_CMAKE_MODULE_DIR}/${_ext}"
-      ${CMAKE_MODULE_PATH})
+                          ${CMAKE_MODULE_PATH})
     set(_PACKAGE_CONFIG_DEPENDENCIES_FIND_EXTERNAL
-      "${_PACKAGE_CONFIG_DEPENDENCIES_FIND_EXTERNAL}\n \${PACKAGE_PREFIX_DIR}/${CONFIG_INSTALL_DIR}/${_ext}")
+        "${_PACKAGE_CONFIG_DEPENDENCIES_FIND_EXTERNAL}\n \${PACKAGE_PREFIX_DIR}/${CONFIG_INSTALL_DIR}/${_ext}"
+    )
     install(DIRECTORY "${PROJECT_JRL_CMAKE_MODULE_DIR}/${_ext}"
-      DESTINATION "${CONFIG_INSTALL_DIR}/find-external")
+            DESTINATION "${CONFIG_INSTALL_DIR}/find-external")
   endif()
-  _ADD_TO_LIST_IF_NOT_PRESENT(_PACKAGE_CONFIG${component}_DEPENDENCIES_PROJECTS "${ARGV0}")
+  _add_to_list_if_not_present(_PACKAGE_CONFIG${component}_DEPENDENCIES_PROJECTS
+                              "${ARGV0}")
 
   string(REPLACE ";" " " PACKAGE_ARGS "${PARSED_ARGN_UNPARSED_ARGUMENTS}")
-  _ADD_TO_LIST_IF_NOT_PRESENT(_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_PACKAGE "find_package(${PACKAGE_ARGS})")
-  _ADD_TO_LIST_IF_NOT_PRESENT(_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_DEPENDENCY "find_dependency(${PACKAGE_ARGS})")
+  _add_to_list_if_not_present(
+    _PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_PACKAGE
+    "find_package(${PACKAGE_ARGS})")
+  _add_to_list_if_not_present(
+    _PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_DEPENDENCY
+    "find_dependency(${PACKAGE_ARGS})")
   find_package(${PARSED_ARGN_UNPARSED_ARGUMENTS})
 
   # Propagate variables changes to the cached values
-  set(_PACKAGE_CONFIG${component}_DEPENDENCIES_PROJECTS "${_PACKAGE_CONFIG${component}_DEPENDENCIES_PROJECTS}" CACHE INTERNAL "")
-  set(_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_PACKAGE "${_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_PACKAGE}" CACHE INTERNAL "")
-  set(_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_DEPENDENCY "${_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_DEPENDENCY}" CACHE INTERNAL "")
-ENDMACRO()
-
+  set(_PACKAGE_CONFIG${component}_DEPENDENCIES_PROJECTS
+      "${_PACKAGE_CONFIG${component}_DEPENDENCIES_PROJECTS}"
+      CACHE INTERNAL "")
+  set(_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_PACKAGE
+      "${_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_PACKAGE}"
+      CACHE INTERNAL "")
+  set(_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_DEPENDENCY
+      "${_PACKAGE_CONFIG${component}_DEPENDENCIES_FIND_DEPENDENCY}"
+      CACHE INTERNAL "")
+endmacro()
 
 # SETUP_PROJECT_PACKAGE_FINALIZE
 # -------------
 #
-# Generates CMake PackageConfig.cmake, Targets, and Version
-# files so users can call:
+# Generates CMake PackageConfig.cmake, Targets, and Version files so users can
+# call:
 #
 # find_package(MyPackage)
 #
 # Initialize the PackageConfig installation configuration.
 # https://github.com/forexample/package-example
 #
-# This function does not take any argument but check that some
-# variables are defined (see documentation at the beginning of this
-# file).
+# This function does not take any argument but check that some variables are
+# defined (see documentation at the beginning of this file).
 #
-# assumes SETUP_PROJECT() was called
-# internally the real requirement is that _SETUP_PROJECT_PACKAGE_INIT() was called
-MACRO(SETUP_PROJECT_PACKAGE_FINALIZE)
-####
-# Installation (https://github.com/forexample/package-example)
+# assumes SETUP_PROJECT() was called internally the real requirement is that
+# _SETUP_PROJECT_PACKAGE_INIT() was called
+macro(SETUP_PROJECT_PACKAGE_FINALIZE)
+  #
+  # Installation (https://github.com/forexample/package-example)
 
-# Layout. This works for all platforms:
-#   * <prefix>/lib/cmake/<PROJECT-NAME>
-#   * <prefix>/lib/
-#   * <prefix>/include/
-set(CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
-set(INCLUDE_INSTALL_DIR "include")
-set(INCLUDE_INSTALL_DESTINATION "${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}")
+  # Layout. This works for all platforms: * <prefix>/lib/cmake/<PROJECT-NAME> *
+  # <prefix>/lib/ * <prefix>/include/
+  set(CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
+  set(INCLUDE_INSTALL_DIR "include")
+  set(INCLUDE_INSTALL_DESTINATION "${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}")
 
-set(GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
+  set(GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
 
-# Configuration
-set(VERSION_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake")
-set(PROJECT_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}Config.cmake")
-set(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
-set(namespace "${PROJECT_NAME}::")
-string(TOUPPER "${PROJECT_NAME}" PROJECT_NAME_UPPER)
-string(REGEX REPLACE "[^a-zA-Z0-9]" "_" PROJECT_NAME_UPPER "${PROJECT_NAME_UPPER}")
+  # Configuration
+  set(VERSION_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake")
+  set(PROJECT_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}Config.cmake")
+  set(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
+  set(namespace "${PROJECT_NAME}::")
+  string(TOUPPER "${PROJECT_NAME}" PROJECT_NAME_UPPER)
+  string(REGEX REPLACE "[^a-zA-Z0-9]" "_" PROJECT_NAME_UPPER
+                       "${PROJECT_NAME_UPPER}")
 
-# Include module with fuction 'write_basic_package_version_file'
-include(CMakePackageConfigHelpers)
+  # Include module with fuction 'write_basic_package_version_file'
+  include(CMakePackageConfigHelpers)
 
-string(REPLACE ";" "\n  " PACKAGE_DEPENDENCIES_FIND_PACKAGE "${_PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE}")
-string(REPLACE ";" "\n  " PACKAGE_DEPENDENCIES_FIND_DEPENDENCY "${_PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY}")
+  string(REPLACE ";" "\n  " PACKAGE_DEPENDENCIES_FIND_PACKAGE
+                 "${_PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE}")
+  string(REPLACE ";" "\n  " PACKAGE_DEPENDENCIES_FIND_DEPENDENCY
+                 "${_PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY}")
 
-if(DEFINED _MINIMAL_CXX_STANDARD)
-  # Read macro file and append
-  file(READ ${PROJECT_JRL_CMAKE_MODULE_DIR}/cxx-standard.cmake CXX_STANDARD_MACRO_CONTENT)
-  set(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n# C++ standard compatibility check/enforcement\nset(_MINIMAL_CXX_STANDARD ${_MINIMAL_CXX_STANDARD})\n\n${CXX_STANDARD_MACRO_CONTENT}")
+  if(DEFINED _MINIMAL_CXX_STANDARD)
+    install_jrl_cmakemodules_file("cxx-standard.cmake")
 
-  # Add check for standard - enforce if required
-  if(${MINIMAL_CXX_STANDARD_ENFORCE})
-    set(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nCHECK_MINIMAL_CXX_STANDARD(${_MINIMAL_CXX_STANDARD} ENFORCE)")
-  else()
-    set(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nCHECK_MINIMAL_CXX_STANDARD(${_MINIMAL_CXX_STANDARD})")
+    # Add check for standard - enforce if required
+    if(${MINIMAL_CXX_STANDARD_ENFORCE})
+      set(PACKAGE_EXTRA_MACROS
+          "${PACKAGE_EXTRA_MACROS}\nCHECK_MINIMAL_CXX_STANDARD(${_MINIMAL_CXX_STANDARD} ENFORCE)"
+      )
+    else()
+      set(PACKAGE_EXTRA_MACROS
+          "${PACKAGE_EXTRA_MACROS}\nCHECK_MINIMAL_CXX_STANDARD(${_MINIMAL_CXX_STANDARD})"
+      )
+    endif()
   endif()
-endif()
 
-# Configure '<PROJECT-NAME>ConfigVersion.cmake'
-# Note: PROJECT_VERSION is used as a VERSION
-if(NOT PROJECT_COMPATIBILITY_VERSION)
-  set(PROJECT_COMPATIBILITY_VERSION SameMajorVersion)
-endif()
-write_basic_package_version_file(
-    "${VERSION_CONFIG}" VERSION ${PROJECT_VERSION} COMPATIBILITY ${PROJECT_COMPATIBILITY_VERSION}
-)
+  # Configure '<PROJECT-NAME>ConfigVersion.cmake' Note: PROJECT_VERSION is used
+  # as a VERSION
+  if(NOT PROJECT_COMPATIBILITY_VERSION)
+    set(PROJECT_COMPATIBILITY_VERSION SameMajorVersion)
+  endif()
+  write_basic_package_version_file(
+    "${VERSION_CONFIG}"
+    VERSION ${PROJECT_VERSION}
+    COMPATIBILITY ${PROJECT_COMPATIBILITY_VERSION})
 
-# Configure '<PROJECT-NAME>Config.cmake'
-# Use variables:
-#   * TARGETS_EXPORT_NAME
-#   * PROJECT_NAME
-#   * _PKG_CONFIG_REQUIRES
-unset(_PKG_CONFIG_REQUIRES_LIST)
-if(_PKG_CONFIG_REQUIRES)
-  set(_PKG_CONFIG_REQUIRES_LIST "${_PKG_CONFIG_REQUIRES}")
-  foreach(_pkg ${_PKG_CONFIG_DEP_NOT_FOR_CONFIG_CMAKE})
-    list(REMOVE_ITEM _PKG_CONFIG_REQUIRES_LIST ${_pkg})
-  endforeach()
-  list(REMOVE_DUPLICATES _PKG_CONFIG_REQUIRES_LIST)
-endif(_PKG_CONFIG_REQUIRES)
+  # Configure '<PROJECT-NAME>Config.cmake' Use variables: * TARGETS_EXPORT_NAME
+  # * PROJECT_NAME * _PKG_CONFIG_REQUIRES
+  unset(_PKG_CONFIG_REQUIRES_LIST)
+  if(_PKG_CONFIG_REQUIRES)
+    set(_PKG_CONFIG_REQUIRES_LIST "${_PKG_CONFIG_REQUIRES}")
+    foreach(_pkg ${_PKG_CONFIG_DEP_NOT_FOR_CONFIG_CMAKE})
+      list(REMOVE_ITEM _PKG_CONFIG_REQUIRES_LIST ${_pkg})
+    endforeach()
+    list(REMOVE_DUPLICATES _PKG_CONFIG_REQUIRES_LIST)
+  endif(_PKG_CONFIG_REQUIRES)
 
-if(NOT PROJECT_EXPORT_NO_TARGET)
-  set(INCLUDE_TARGETS_FILE "include(\"\${CMAKE_CURRENT_LIST_DIR}/${TARGETS_EXPORT_NAME}.cmake\")")
-else()
-  set(INCLUDE_TARGETS_FILE "# Package with no targets")
-endif()
+  if(NOT PROJECT_EXPORT_NO_TARGET)
+    set(INCLUDE_TARGETS_FILE
+        "include(\"\${CMAKE_CURRENT_LIST_DIR}/${TARGETS_EXPORT_NAME}.cmake\")")
+  else()
+    set(INCLUDE_TARGETS_FILE "# Package with no targets")
+  endif()
 
-configure_package_config_file(
-    "${PROJECT_JRL_CMAKE_MODULE_DIR}/Config.cmake.in"
-    "${PROJECT_CONFIG}"
-    INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}"
-)
+  configure_package_config_file(
+    "${PROJECT_JRL_CMAKE_MODULE_DIR}/Config.cmake.in" "${PROJECT_CONFIG}"
+    INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}")
 
-# Config
-#   * <prefix>/lib/cmake/Foo/FooConfig.cmake
-#   * <prefix>/lib/cmake/Foo/FooConfigVersion.cmake
-install(
-    FILES "${PROJECT_CONFIG}" "${VERSION_CONFIG}"
-    DESTINATION "${CONFIG_INSTALL_DIR}"
-)
+  # Config * <prefix>/lib/cmake/Foo/FooConfig.cmake *
+  # <prefix>/lib/cmake/Foo/FooConfigVersion.cmake
+  install(FILES "${PROJECT_CONFIG}" "${VERSION_CONFIG}"
+          DESTINATION "${CONFIG_INSTALL_DIR}")
 
-# Config
-#   * <prefix>/lib/cmake/Foo/FooTargets.cmake
-if(NOT PROJECT_EXPORT_NO_TARGET)
-  install(
-    EXPORT "${TARGETS_EXPORT_NAME}"
-    NAMESPACE "${namespace}"
-    DESTINATION "${CONFIG_INSTALL_DIR}"
-    )
-endif()
+  # Config * <prefix>/lib/cmake/Foo/FooTargets.cmake
+  if(NOT PROJECT_EXPORT_NO_TARGET)
+    install(
+      EXPORT "${TARGETS_EXPORT_NAME}"
+      NAMESPACE "${namespace}"
+      DESTINATION "${CONFIG_INSTALL_DIR}")
+  endif()
 
-ENDMACRO(SETUP_PROJECT_PACKAGE_FINALIZE)
+endmacro(SETUP_PROJECT_PACKAGE_FINALIZE)
 
-#.rst:
-# .. command:: PROJECT_INSTALL_COMPONENT(COMPONENT [EXTRA_MACRO cmake_code] [NAMESPACE namespace])
+# .rst: .. command:: PROJECT_INSTALL_COMPONENT(COMPONENT [EXTRA_MACRO
+# cmake_code] [NAMESPACE namespace])
 #
-#   Generates CMake componentConfig.cmake and Targets files so users can call::
+# Generates CMake componentConfig.cmake and Targets files so users can call::
 #
-#     find_package(MyPackage COMPONENT component)
+# find_package(MyPackage COMPONENT component)
 #
-#   :param EXTRA_MACRO: optional argument. `cmake_code` will be appended to
-#          the generated *Config.cmake*.
-#   :param NAMESPACE: optional argument. Defaults to `${PROJECT_NAME}::`.
+# :param EXTRA_MACRO: optional argument. `cmake_code` will be appended to the
+# generated *Config.cmake*. :param NAMESPACE: optional argument. Defaults to
+# `${PROJECT_NAME}::`.
 #
 macro(PROJECT_INSTALL_COMPONENT COMPONENT)
   cmake_parse_arguments(PARSED_ARGN "" "NAMESPACE;EXTRA_MACRO" "" ${ARGN})
@@ -235,25 +247,37 @@ macro(PROJECT_INSTALL_COMPONENT COMPONENT)
     set(namespace "${PROJECT_NAME}::")
   endif()
 
-  install(EXPORT ${COMPONENT}Targets
+  install(
+    EXPORT ${COMPONENT}Targets
     NAMESPACE "${namespace}"
     DESTINATION "${CONFIG_INSTALL_DIR}")
 
   set(COMPONENT ${COMPONENT})
-  set(_PACKAGE_CONFIG_COMPONENT_DEPENDENCIES_PROJECTS "${_PACKAGE_CONFIG_${COMPONENT}_DEPENDENCIES_PROJECTS}")
+  set(_PACKAGE_CONFIG_COMPONENT_DEPENDENCIES_PROJECTS
+      "${_PACKAGE_CONFIG_${COMPONENT}_DEPENDENCIES_PROJECTS}")
   string(REPLACE ";" "\n  " COMPONENT_FIND_PACKAGE
-    "${_PACKAGE_CONFIG_${COMPONENT}_DEPENDENCIES_FIND_PACKAGE}")
+                 "${_PACKAGE_CONFIG_${COMPONENT}_DEPENDENCIES_FIND_PACKAGE}")
   string(REPLACE ";" "\n  " COMPONENT_FIND_DEPENDENCY
-    "${_PACKAGE_CONFIG_${COMPONENT}_DEPENDENCIES_FIND_DEPENDENCY}")
+                 "${_PACKAGE_CONFIG_${COMPONENT}_DEPENDENCIES_FIND_DEPENDENCY}")
   set(COMPONENT_CONFIG "${CMAKE_BINARY_DIR}/generated/${COMPONENT}Config.cmake")
   set(COMPONENT_EXTRA_MACRO "${PARSED_ARGN_EXTRA_MACRO}")
   include(CMakePackageConfigHelpers)
   configure_package_config_file(
-      "${PROJECT_JRL_CMAKE_MODULE_DIR}/componentConfig.cmake.in"
-      "${COMPONENT_CONFIG}"
-      INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}"
-      NO_CHECK_REQUIRED_COMPONENTS_MACRO
-      NO_SET_AND_CHECK_MACRO)
-  install(FILES "${COMPONENT_CONFIG}"
-      DESTINATION "${CONFIG_INSTALL_DIR}")
+    "${PROJECT_JRL_CMAKE_MODULE_DIR}/componentConfig.cmake.in"
+    "${COMPONENT_CONFIG}"
+    INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}"
+    NO_CHECK_REQUIRED_COMPONENTS_MACRO NO_SET_AND_CHECK_MACRO)
+  install(FILES "${COMPONENT_CONFIG}" DESTINATION "${CONFIG_INSTALL_DIR}")
+endmacro()
+
+# .rst: .. command:: INSTALL_JRL_CMAKEMODULES_FILE (filename)
+#
+# install jrl-cmakemodules/$filename along CMake package exports
+#
+macro(INSTALL_JRL_CMAKEMODULES_FILE filename)
+  install(FILES "${PROJECT_JRL_CMAKE_MODULE_DIR}/${filename}"
+          DESTINATION "${CONFIG_INSTALL_DIR}")
+  set(PACKAGE_EXTRA_MACROS
+      "${PACKAGE_EXTRA_MACROS}\ninclude(\"\${CMAKE_CURRENT_LIST_DIR}/${filename}\")"
+  )
 endmacro()
diff --git a/cmake/pkg-config.cmake b/cmake/pkg-config.cmake
index fc18ed6..939d767 100644
--- a/cmake/pkg-config.cmake
+++ b/cmake/pkg-config.cmake
@@ -1,24 +1,23 @@
 # Copyright (C) 2008-2020 LAAS-CNRS, JRL AIST-CNRS INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/shared-library.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/shared-library.cmake)
 
-FIND_PACKAGE(PkgConfig)
+find_package(PkgConfig)
 
-# For CMake >= 3.12, this can be replace by
-# list(JOIN ${${var_in}} ${sep} out)
+# For CMake >= 3.12, this can be replace by list(JOIN ${${var_in}} ${sep} out)
 function(_list_join var_in sep var_out)
   if(CMAKE_VERSION VERSION_GREATER 3.12)
     list(JOIN ${var_in} ${sep} out)
@@ -33,75 +32,145 @@ function(_list_join var_in sep var_out)
       endif()
     endforeach()
   endif()
-  set(${var_out} ${out} PARENT_SCOPE)
+  set(${var_out}
+      ${out}
+      PARENT_SCOPE)
 endfunction()
 
-# Additional pkg-config variables whose value will be imported
-# during the dependency check.
-SET(PKG_CONFIG_ADDITIONAL_VARIABLES bindir pkglibdir datarootdir pkgdatarootdir docdir doxygendocdir)
+# Additional pkg-config variables whose value will be imported during the
+# dependency check.
+set(PKG_CONFIG_ADDITIONAL_VARIABLES bindir pkglibdir datarootdir pkgdatarootdir
+                                    docdir doxygendocdir)
 
-#.rst:
-# .. ifmode:: internal
+# .rst: .. ifmode:: internal
 #
-#   .. command:: _SETUP_PROJECT_PKG_CONFIG
+# .. command:: _SETUP_PROJECT_PKG_CONFIG
 #
-#     Prepare pkg-config pc file generation step.
+# Prepare pkg-config pc file generation step.
 #
-#     This file will be named ${PROJECT_NAME}.pc,
-#     or ${CUSTOM_PKG_CONFIG_FILENAME}.pc if it is defined
+# This file will be named ${PROJECT_NAME}.pc, or
+# ${CUSTOM_PKG_CONFIG_FILENAME}.pc if it is defined
 #
-MACRO(_SETUP_PROJECT_PKG_CONFIG)
+macro(_SETUP_PROJECT_PKG_CONFIG)
   # Pkg-config related commands.
-  SET(_PKG_CONFIG_PREFIX "\${pcfiledir}/../.." CACHE INTERNAL "")
-  SET(_PKG_CONFIG_EXEC_PREFIX "${_PKG_CONFIG_PREFIX}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_LIBDIR "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_BINDIR "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_PKGLIBDIR "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_PKGLIBDIR}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_INCLUDEDIR "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_DATAROOTDIR "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_DATAROOTDIR}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_PKGDATAROOTDIR "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}" CACHE INTERNAL "")
-  IF(INSTALL_DOCUMENTATION)
-    SET(_PKG_CONFIG_DOCDIR "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_DOCDIR}" CACHE INTERNAL "")
-    SET(_PKG_CONFIG_DOXYGENDOCDIR "${_PKG_CONFIG_DOCDIR}/doxygen-html" CACHE INTERNAL "")
-  ELSE(INSTALL_DOCUMENTATION)
-    SET(_PKG_CONFIG_DOCDIR "" CACHE INTERNAL "")
-    SET(_PKG_CONFIG_DOXYGENDOCDIR "" CACHE INTERNAL "")
-  ENDIF(INSTALL_DOCUMENTATION)
-
-  IF(DEFINED PROJECT_DEBUG_POSTFIX)
-    IF(DEFINED CMAKE_CONFIGURATION_TYPES)
-      SET(_PKG_CONFIG_PROJECT_NAME_NOPOSTFIX "${PROJECT_NAME}" CACHE INTERNAL "")
-      SET(_PKG_CONFIG_PROJECT_NAME "${PROJECT_NAME}${PKGCONFIG_POSTFIX}" CACHE INTERNAL "")
-    ELSE()
-      SET(_PKG_CONFIG_PROJECT_NAME "${PROJECT_NAME}${PKGCONFIG_POSTFIX}" CACHE INTERNAL "")
-    ENDIF()
-  ELSE()
-    SET(_PKG_CONFIG_PROJECT_NAME "${PROJECT_NAME}" CACHE INTERNAL "")
-  ENDIF()
-  SET(_PKG_CONFIG_DESCRIPTION "${PROJECT_DESCRIPTION}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_URL "${PROJECT_URL}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_VERSION "${PROJECT_VERSION}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_REQUIRES "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_REQUIRES_DEBUG "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_REQUIRES_OPTIMIZED "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_COMPILE_TIME_REQUIRES "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_CONFLICTS "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_LIBS "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_LIBS_DEBUG "${LIBDIR_KW}\${libdir}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_LIBS_OPTIMIZED "${LIBDIR_KW}\${libdir}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_LIBS_PRIVATE "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_CFLAGS "-I\${includedir}" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_CFLAGS_DEBUG "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_CFLAGS_OPTIMIZED "" CACHE INTERNAL "")
-  SET(_PKG_CONFIG_FILENAME "${PROJECT_NAME}.pc" CACHE INTERNAL "")
-
-  SET(PKG_CONFIG_EXTRA "")
+  set(_PKG_CONFIG_PREFIX
+      "\${pcfiledir}/../.."
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_EXEC_PREFIX
+      "${_PKG_CONFIG_PREFIX}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_LIBDIR
+      "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_BINDIR
+      "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_PKGLIBDIR
+      "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_PKGLIBDIR}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_INCLUDEDIR
+      "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_DATAROOTDIR
+      "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_DATAROOTDIR}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_PKGDATAROOTDIR
+      "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}"
+      CACHE INTERNAL "")
+  if(INSTALL_DOCUMENTATION)
+    set(_PKG_CONFIG_DOCDIR
+        "${_PKG_CONFIG_PREFIX}/${CMAKE_INSTALL_DOCDIR}"
+        CACHE INTERNAL "")
+    set(_PKG_CONFIG_DOXYGENDOCDIR
+        "${_PKG_CONFIG_DOCDIR}/doxygen-html"
+        CACHE INTERNAL "")
+  else(INSTALL_DOCUMENTATION)
+    set(_PKG_CONFIG_DOCDIR
+        ""
+        CACHE INTERNAL "")
+    set(_PKG_CONFIG_DOXYGENDOCDIR
+        ""
+        CACHE INTERNAL "")
+  endif(INSTALL_DOCUMENTATION)
+
+  if(DEFINED PROJECT_DEBUG_POSTFIX)
+    if(DEFINED CMAKE_CONFIGURATION_TYPES)
+      set(_PKG_CONFIG_PROJECT_NAME_NOPOSTFIX
+          "${PROJECT_NAME}"
+          CACHE INTERNAL "")
+      set(_PKG_CONFIG_PROJECT_NAME
+          "${PROJECT_NAME}${PKGCONFIG_POSTFIX}"
+          CACHE INTERNAL "")
+    else()
+      set(_PKG_CONFIG_PROJECT_NAME
+          "${PROJECT_NAME}${PKGCONFIG_POSTFIX}"
+          CACHE INTERNAL "")
+    endif()
+  else()
+    set(_PKG_CONFIG_PROJECT_NAME
+        "${PROJECT_NAME}"
+        CACHE INTERNAL "")
+  endif()
+  set(_PKG_CONFIG_DESCRIPTION
+      "${PROJECT_DESCRIPTION}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_URL
+      "${PROJECT_URL}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_VERSION
+      "${PROJECT_VERSION}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_REQUIRES
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_REQUIRES_DEBUG
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_REQUIRES_OPTIMIZED
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_COMPILE_TIME_REQUIRES
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_CONFLICTS
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_LIBS
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_LIBS_DEBUG
+      "${LIBDIR_KW}\${libdir}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_LIBS_OPTIMIZED
+      "${LIBDIR_KW}\${libdir}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_LIBS_PRIVATE
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_CFLAGS
+      "-I\${includedir}"
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_CFLAGS_DEBUG
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_CFLAGS_OPTIMIZED
+      ""
+      CACHE INTERNAL "")
+  set(_PKG_CONFIG_FILENAME
+      "${PROJECT_NAME}.pc"
+      CACHE INTERNAL "")
+
+  set(PKG_CONFIG_EXTRA "")
 
   # Where to install the pkg-config file?
-  SET(_PKG_CONFIG_DIR "${_PKG_CONFIG_LIBDIR}/pkgconfig" CACHE INTERNAL "")
+  set(_PKG_CONFIG_DIR
+      "${_PKG_CONFIG_LIBDIR}/pkgconfig"
+      CACHE INTERNAL "")
 
   # Watch variables.
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
+  list(
+    APPEND
+    LOGGING_WATCHED_VARIABLES
     _PKG_CONFIG_FOUND
     PKG_CONFIG_EXECUTABLE
     _PKG_CONFIG_PREFIX
@@ -131,239 +200,238 @@ MACRO(_SETUP_PROJECT_PKG_CONFIG)
     _PKG_CONFIG_CFLAGS_DEBUG
     _PKG_CONFIG_CFLAGS_OPTIMIZED
     _PKG_CONFIG_FILENAME
-    PKG_CONFIG_EXTRA
-    )
-ENDMACRO(_SETUP_PROJECT_PKG_CONFIG)
-
+    PKG_CONFIG_EXTRA)
+endmacro(_SETUP_PROJECT_PKG_CONFIG)
 
 # _SETUP_PROJECT_PKG_CONFIG_FINALIZE_DEBUG
 # ----------------------------------
 #
 # Post-processing of the pkg-config step.
 #
-# The pkg-config file has to be generated at the end to allow end-user
-# defined variables replacement.
+# The pkg-config file has to be generated at the end to allow end-user defined
+# variables replacement.
 #
 # This macro adds _PKG_CONFIG_LIBS_DEBUG to _PKG_CONFIG_LIBS and
 # _PKGCONFIG_CFLAGS_DEBUG to _PKG_CONFIG_CFLAGS
 #
-MACRO(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_DEBUG)
+macro(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_DEBUG)
   # Setup altered variables
-  SET(TEMP_CFLAGS ${_PKG_CONFIG_CFLAGS})
-  SET(_PKG_CONFIG_CFLAGS "${_PKG_CONFIG_CFLAGS_DEBUG} ${_PKG_CONFIG_CFLAGS}")
-  SET(TEMP_LIBS ${_PKG_CONFIG_LIBS})
-  SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS_DEBUG} ${_PKG_CONFIG_LIBS}")
-  SET(TEMP_REQUIRES ${_PKG_CONFIG_REQUIRES})
-  IF(_PKG_CONFIG_REQUIRES_DEBUG)
-    LIST(APPEND _PKG_CONFIG_REQUIRES "${_PKG_CONFIG_REQUIRES_DEBUG}")
-  ENDIF()
+  set(TEMP_CFLAGS ${_PKG_CONFIG_CFLAGS})
+  set(_PKG_CONFIG_CFLAGS "${_PKG_CONFIG_CFLAGS_DEBUG} ${_PKG_CONFIG_CFLAGS}")
+  set(TEMP_LIBS ${_PKG_CONFIG_LIBS})
+  set(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS_DEBUG} ${_PKG_CONFIG_LIBS}")
+  set(TEMP_REQUIRES ${_PKG_CONFIG_REQUIRES})
+  if(_PKG_CONFIG_REQUIRES_DEBUG)
+    list(APPEND _PKG_CONFIG_REQUIRES "${_PKG_CONFIG_REQUIRES_DEBUG}")
+  endif()
   _list_join(_PKG_CONFIG_REQUIRES ", " _PKG_CONFIG_REQUIRES_LIST)
-  CONFIGURE_FILE(
+  configure_file(
     "${PROJECT_JRL_CMAKE_MODULE_DIR}/pkg-config.pc.cmake"
-    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}${PKGCONFIG_POSTFIX}.pc"
-    )
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}${PKGCONFIG_POSTFIX}.pc")
   # Restore altered variables
-  SET(_PKG_CONFIG_CFLAGS ${TEMP_CFLAGS})
-  SET(_PKG_CONFIG_LIBS ${TEMP_LIBS})
-  SET(_PKG_CONFIG_REQUIRES ${TEMP_REQUIRES})
+  set(_PKG_CONFIG_CFLAGS ${TEMP_CFLAGS})
+  set(_PKG_CONFIG_LIBS ${TEMP_LIBS})
+  set(_PKG_CONFIG_REQUIRES ${TEMP_REQUIRES})
 
-  INSTALL(
+  install(
     FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}${PKGCONFIG_POSTFIX}.pc"
     DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
     PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
-ENDMACRO(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_DEBUG)
+endmacro(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_DEBUG)
 
 # _SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED
 # ----------------------------------
 #
 # Post-processing of the pkg-config step.
 #
-# The pkg-config file has to be generated at the end to allow end-user
-# defined variables replacement.
+# The pkg-config file has to be generated at the end to allow end-user defined
+# variables replacement.
 #
 # This macro adds _PKG_CONFIG_LIBS_OPTIMIZED to _PKG_CONFIG_LIBS and
 # _PKGCONFIG_CFLAGS_OPTIMIZED to _PKG_CONFIG_CFLAGS
 #
-MACRO(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED)
+macro(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED)
   # Setup altered variables
-  SET(TEMP_PROJECT_NAME ${_PKG_CONFIG_PROJECT_NAME})
-  SET(_PKG_CONFIG_PROJECT_NAME ${_PKG_CONFIG_PROJECT_NAME_NOPOSTFIX})
-  SET(TEMP_CFLAGS ${_PKG_CONFIG_CFLAGS})
-  SET(_PKG_CONFIG_CFLAGS "${_PKG_CONFIG_CFLAGS_OPTIMIZED} ${_PKG_CONFIG_CFLAGS}")
-  SET(TEMP_LIBS ${_PKG_CONFIG_LIBS})
-  SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS_OPTIMIZED} ${_PKG_CONFIG_LIBS}")
-  SET(TEMP_REQUIRES ${_PKG_CONFIG_REQUIRES})
-  IF(_PKG_CONFIG_REQUIRES_OPTIMIZED)
-    LIST(APPEND _PKG_CONFIG_REQUIRES "${_PKG_CONFIG_REQUIRES_OPTIMIZED}")
-  ENDIF()
+  set(TEMP_PROJECT_NAME ${_PKG_CONFIG_PROJECT_NAME})
+  set(_PKG_CONFIG_PROJECT_NAME ${_PKG_CONFIG_PROJECT_NAME_NOPOSTFIX})
+  set(TEMP_CFLAGS ${_PKG_CONFIG_CFLAGS})
+  set(_PKG_CONFIG_CFLAGS
+      "${_PKG_CONFIG_CFLAGS_OPTIMIZED} ${_PKG_CONFIG_CFLAGS}")
+  set(TEMP_LIBS ${_PKG_CONFIG_LIBS})
+  set(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS_OPTIMIZED} ${_PKG_CONFIG_LIBS}")
+  set(TEMP_REQUIRES ${_PKG_CONFIG_REQUIRES})
+  if(_PKG_CONFIG_REQUIRES_OPTIMIZED)
+    list(APPEND _PKG_CONFIG_REQUIRES "${_PKG_CONFIG_REQUIRES_OPTIMIZED}")
+  endif()
   _list_join(_PKG_CONFIG_REQUIRES ", " _PKG_CONFIG_REQUIRES_LIST)
-  IF(DEFINED CUSTOM_PKG_CONFIG_FILENAME)
-    SET(_PKG_CONFIG_FILENAME "${CUSTOM_PKG_CONFIG_FILENAME}.pc" CACHE INTERNAL "")
-  ENDIF(DEFINED CUSTOM_PKG_CONFIG_FILENAME)
+  if(DEFINED CUSTOM_PKG_CONFIG_FILENAME)
+    set(_PKG_CONFIG_FILENAME
+        "${CUSTOM_PKG_CONFIG_FILENAME}.pc"
+        CACHE INTERNAL "")
+  endif(DEFINED CUSTOM_PKG_CONFIG_FILENAME)
   # Generate the pkg-config file.
-  CONFIGURE_FILE(
-    "${PROJECT_JRL_CMAKE_MODULE_DIR}/pkg-config.pc.cmake"
-    "${CMAKE_CURRENT_BINARY_DIR}/${_PKG_CONFIG_FILENAME}"
-    )
+  configure_file("${PROJECT_JRL_CMAKE_MODULE_DIR}/pkg-config.pc.cmake"
+                 "${CMAKE_CURRENT_BINARY_DIR}/${_PKG_CONFIG_FILENAME}")
   # Restore altered variables
-  SET(_PKG_CONFIG_PROJECT_NAME ${TEMP_PROJECT_NAME})
-  SET(_PKG_CONFIG_CFLAGS ${TEMP_CFLAGS})
-  SET(_PKG_CONFIG_LIBS ${TEMP_LIBS})
-  SET(_PKG_CONFIG_REQUIRES ${TEMP_REQUIRES})
+  set(_PKG_CONFIG_PROJECT_NAME ${TEMP_PROJECT_NAME})
+  set(_PKG_CONFIG_CFLAGS ${TEMP_CFLAGS})
+  set(_PKG_CONFIG_LIBS ${TEMP_LIBS})
+  set(_PKG_CONFIG_REQUIRES ${TEMP_REQUIRES})
 
-  INSTALL(
+  install(
     FILES "${CMAKE_CURRENT_BINARY_DIR}/${_PKG_CONFIG_FILENAME}"
     DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
     PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)
-ENDMACRO(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED)
+endmacro(_SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED)
 
 # _SETUP_PROJECT_PKG_CONFIG_FINALIZE
 # ----------------------------------
 #
 # Post-processing of the pkg-config step.
 #
-# The pkg-config file has to be generated at the end to allow end-user
-# defined variables replacement.
+# The pkg-config file has to be generated at the end to allow end-user defined
+# variables replacement.
 #
-MACRO(_SETUP_PROJECT_PKG_CONFIG_FINALIZE)
+macro(_SETUP_PROJECT_PKG_CONFIG_FINALIZE)
   # Single build type generator
-  IF(DEFINED CMAKE_BUILD_TYPE)
-    STRING(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
-    IF(${cmake_build_type} MATCHES debug)
-      _SETUP_PROJECT_PKG_CONFIG_FINALIZE_DEBUG()
-    ELSE()
-      _SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED()
-    ENDIF()
-  # Multiple build types generator
-  ELSE()
-    IF(DEFINED PROJECT_DEBUG_POSTFIX)
-      _SETUP_PROJECT_PKG_CONFIG_FINALIZE_DEBUG()
-      _SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED()
-    ELSE()
-      _SETUP_PROJECT_PKG_CONFIG_FINALIZE_OPTIMIZED()
-    ENDIF()
-  ENDIF()
-ENDMACRO(_SETUP_PROJECT_PKG_CONFIG_FINALIZE)
-
-# _PARSE_PKG_CONFIG_STRING (PKG_CONFIG_STRING _PKG_LIB_NAME_VAR _PKG_PREFIX_VAR _PKG_CONFIG_STRING_NOSPACE_VAR)
+  if(DEFINED CMAKE_BUILD_TYPE)
+    string(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
+    if(${cmake_build_type} MATCHES debug)
+      _setup_project_pkg_config_finalize_debug()
+    else()
+      _setup_project_pkg_config_finalize_optimized()
+    endif()
+    # Multiple build types generator
+  else()
+    if(DEFINED PROJECT_DEBUG_POSTFIX)
+      _setup_project_pkg_config_finalize_debug()
+      _setup_project_pkg_config_finalize_optimized()
+    else()
+      _setup_project_pkg_config_finalize_optimized()
+    endif()
+  endif()
+endmacro(_SETUP_PROJECT_PKG_CONFIG_FINALIZE)
+
+# _PARSE_PKG_CONFIG_STRING (PKG_CONFIG_STRING _PKG_LIB_NAME_VAR _PKG_PREFIX_VAR
+# _PKG_CONFIG_STRING_NOSPACE_VAR)
 # ----------------------------------------------------------
 #
-# Retrieve from the pkg-config string:
-# - the library name,
-# - the prefix used for CMake variable names,
-# - a variant without spaces around the operator (if there is an operator),
-#   as expected by cmake's CHECK_PKG_MODULE.
-# . For instance, `my-package > 0.4` results in
-# - _PKG_LIB_NAME_VAR <- my-package
-# - _PKG_PREFIX_VAR <- MY_PACKAGE
-# - _PKG_CONFIG_STRING_NOSPACE_VAR <- `my-package>0.4`
-# `my-package` results in
-# - _PKG_LIB_NAME_VAR <- my-package
-# - _PKG_PREFIX_VAR <- MY_PACKAGE
-# - _PKG_CONFIG_STRING_NOSPACE_VAR <- `my-package`
-MACRO(_PARSE_PKG_CONFIG_STRING PKG_CONFIG_STRING _PKG_LIB_NAME_VAR _PKG_PREFIX_VAR _PKG_CONFIG_NOSPACE_VAR)
+# Retrieve from the pkg-config string: - the library name, - the prefix used for
+# CMake variable names, - a variant without spaces around the operator (if there
+# is an operator), as expected by cmake's CHECK_PKG_MODULE. . For instance,
+# `my-package > 0.4` results in - _PKG_LIB_NAME_VAR <- my-package -
+# _PKG_PREFIX_VAR <- MY_PACKAGE - _PKG_CONFIG_STRING_NOSPACE_VAR <-
+# `my-package>0.4` `my-package` results in - _PKG_LIB_NAME_VAR <- my-package -
+# _PKG_PREFIX_VAR <- MY_PACKAGE - _PKG_CONFIG_STRING_NOSPACE_VAR <- `my-package`
+macro(_PARSE_PKG_CONFIG_STRING PKG_CONFIG_STRING _PKG_LIB_NAME_VAR
+      _PKG_PREFIX_VAR _PKG_CONFIG_NOSPACE_VAR)
   # Decompose the equation
-  STRING(REGEX MATCH "([^ ]+)( (>|>=|=|<=|<) (.*))?" _UNUSED "${PKG_CONFIG_STRING}")
+  string(REGEX MATCH "([^ ]+)( (>|>=|=|<=|<) (.*))?" _UNUSED
+               "${PKG_CONFIG_STRING}")
   # Reconstruct the equation, without the space around the operator
-  SET(${_PKG_CONFIG_NOSPACE_VAR} "${CMAKE_MATCH_1}${CMAKE_MATCH_3}${CMAKE_MATCH_4}")
+  set(${_PKG_CONFIG_NOSPACE_VAR}
+      "${CMAKE_MATCH_1}${CMAKE_MATCH_3}${CMAKE_MATCH_4}")
   # The left part of the equation is the package name
-  SET(${_PKG_LIB_NAME_VAR} "${CMAKE_MATCH_1}")
-  # Transform it into a valid variable prefix.
-  # 1. replace invalid characters into underscores.
-  STRING(REGEX REPLACE "[^a-zA-Z0-9]" "_" ${_PKG_PREFIX_VAR} "${${_PKG_LIB_NAME_VAR}}")
-  # 2. make it uppercase.
-  STRING(TOUPPER "${${_PKG_PREFIX_VAR}}" ${_PKG_PREFIX_VAR})
-ENDMACRO()
+  set(${_PKG_LIB_NAME_VAR} "${CMAKE_MATCH_1}")
+  # Transform it into a valid variable prefix. 1. replace invalid characters
+  # into underscores.
+  string(REGEX REPLACE "[^a-zA-Z0-9]" "_" ${_PKG_PREFIX_VAR}
+                       "${${_PKG_LIB_NAME_VAR}}")
+  # 1. make it uppercase.
+  string(TOUPPER "${${_PKG_PREFIX_VAR}}" ${_PKG_PREFIX_VAR})
+endmacro()
 
 # ADD_DEPENDENCY(PREFIX P_REQUIRED COMPILE_TIME_ONLY PKGCONFIG_STRING)
 # ------------------------------------------------
 #
-# Check for a dependency using pkg-config. Fail if the package cannot
-# be found.
-#
-# P_REQUIRED : if set to 1 the package is required, otherwise it consider
-#              as optional.
-#              WARNING for optional package:
-#              if the package is detected its compile
-#              and linking options are still put in the required fields
-#              of the generated pc file. Indeed from the binary viewpoint
-#              the package becomes required.
-#
-# COMPILE_TIME_ONLY : if set to 1, the package is only requiered at compile time and won't
-#                     appear as a dependency inside the *.pc file.
-#
-# PKG_CONFIG_STRING	: string passed to pkg-config to check the version.
-#			  Typically, this string looks like:
-#                         ``my-package >= 0.5''
-#
-MACRO(ADD_DEPENDENCY P_REQUIRED COMPILE_TIME_ONLY PKG_CONFIG_STRING PKG_CONFIG_DEBUG_STRING)
-  _PARSE_PKG_CONFIG_STRING ("${PKG_CONFIG_STRING}" LIBRARY_NAME PREFIX PKG_CONFIG_STRING_NOSPACE)
-  IF(NOT ${PKG_CONFIG_DEBUG_STRING} STREQUAL "")
-    _PARSE_PKG_CONFIG_STRING ("${PKG_CONFIG_DEBUG_STRING}" LIBRARY_DEBUG_NAME ${PREFIX}_DEBUG PKG_CONFIG_DEBUG_STRING_NOSPACE)
-  ENDIF()
-
-  # Force redetection each time CMake is launched.
-  # Rationale: these values are *NEVER* manually set, so information is never
-  # lost by overriding them. Moreover, changes in the pkg-config files are
-  # not seen as long as the cache is not destroyed, even if the .pc file
-  # is changed. This is a BAD behavior.
-  SET(${PREFIX}_FOUND 0)
-  IF(DEFINED ${PREFIX}_DEBUG)
-    SET(${PREFIX}_DEBUG_FOUND 0)
-  ENDIF()
+# Check for a dependency using pkg-config. Fail if the package cannot be found.
+#
+# P_REQUIRED : if set to 1 the package is required, otherwise it consider as
+# optional. WARNING for optional package: if the package is detected its compile
+# and linking options are still put in the required fields of the generated pc
+# file. Indeed from the binary viewpoint the package becomes required.
+#
+# COMPILE_TIME_ONLY : if set to 1, the package is only requiered at compile time
+# and won't appear as a dependency inside the *.pc file.
+#
+# PKG_CONFIG_STRING       : string passed to pkg-config to check the version.
+# Typically, this string looks like: ``my-package >= 0.5''
+#
+macro(ADD_DEPENDENCY P_REQUIRED COMPILE_TIME_ONLY PKG_CONFIG_STRING
+      PKG_CONFIG_DEBUG_STRING)
+  _parse_pkg_config_string("${PKG_CONFIG_STRING}" LIBRARY_NAME PREFIX
+                           PKG_CONFIG_STRING_NOSPACE)
+  if(NOT ${PKG_CONFIG_DEBUG_STRING} STREQUAL "")
+    _parse_pkg_config_string("${PKG_CONFIG_DEBUG_STRING}" LIBRARY_DEBUG_NAME
+                             ${PREFIX}_DEBUG PKG_CONFIG_DEBUG_STRING_NOSPACE)
+  endif()
+
+  # Force redetection each time CMake is launched. Rationale: these values are
+  # *NEVER* manually set, so information is never lost by overriding them.
+  # Moreover, changes in the pkg-config files are not seen as long as the cache
+  # is not destroyed, even if the .pc file is changed. This is a BAD behavior.
+  set(${PREFIX}_FOUND 0)
+  if(DEFINED ${PREFIX}_DEBUG)
+    set(${PREFIX}_DEBUG_FOUND 0)
+  endif()
 
   # This makes the debug dependency optional when building in release and
   # vice-versa, this only applies to single build type generators
-  SET(PP_REQUIRED ${P_REQUIRED}) # Work-around macro limitation
-  IF(DEFINED ${PREFIX}_DEBUG)
-    SET(P_DEBUG_REQUIRED ${P_REQUIRED})
-    IF(${P_REQUIRED})
+  set(PP_REQUIRED ${P_REQUIRED}) # Work-around macro limitation
+  if(DEFINED ${PREFIX}_DEBUG)
+    set(P_DEBUG_REQUIRED ${P_REQUIRED})
+    if(${P_REQUIRED})
       # Single build type generators
-      IF(DEFINED CMAKE_BUILD_TYPE)
-        STRING(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
-        IF("${cmake_build_type}" MATCHES "debug")
-          SET(PP_REQUIRED 0)
-        ELSE()
-          SET(P_DEBUG_REQUIRED 0)
-        ENDIF()
-      ENDIF()
-    ENDIF()
-  ENDIF()
+      if(DEFINED CMAKE_BUILD_TYPE)
+        string(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
+        if("${cmake_build_type}" MATCHES "debug")
+          set(PP_REQUIRED 0)
+        else()
+          set(P_DEBUG_REQUIRED 0)
+        endif()
+      endif()
+    endif()
+  endif()
 
   # Search for the package.
-  IF(${PP_REQUIRED})
-    MESSAGE(STATUS "${PKG_CONFIG_STRING} is required.")
-    PKG_CHECK_MODULES("${PREFIX}" REQUIRED "${PKG_CONFIG_STRING_NOSPACE}")
-  ELSE(${PP_REQUIRED})
-    MESSAGE(STATUS "${PKG_CONFIG_STRING} is optional.")
-    PKG_CHECK_MODULES("${PREFIX}" "${PKG_CONFIG_STRING_NOSPACE}")
-  ENDIF(${PP_REQUIRED})
+  if(${PP_REQUIRED})
+    message(STATUS "${PKG_CONFIG_STRING} is required.")
+    pkg_check_modules("${PREFIX}" REQUIRED "${PKG_CONFIG_STRING_NOSPACE}")
+  else(${PP_REQUIRED})
+    message(STATUS "${PKG_CONFIG_STRING} is optional.")
+    pkg_check_modules("${PREFIX}" "${PKG_CONFIG_STRING_NOSPACE}")
+  endif(${PP_REQUIRED})
 
   # Search for the debug package
-  IF(DEFINED ${PREFIX}_DEBUG)
-    IF(${P_DEBUG_REQUIRED})
-      MESSAGE(STATUS "${PKG_CONFIG_DEBUG_STRING} is required")
-      PKG_CHECK_MODULES("${PREFIX}_DEBUG" REQUIRED "${PKG_CONFIG_DEBUG_STRING_NOSPACE}")
-    ELSE(${P_DEBUG_REQUIRED})
-      MESSAGE(STATUS "${PKG_CONFIG_DEBUG_STRING} is optional")
-      PKG_CHECK_MODULES("${PREFIX}_DEBUG" "${PKG_CONFIG_DEBUG_STRING_NOSPACE}")
-    ENDIF(${P_DEBUG_REQUIRED})
-  ENDIF()
-
-  # Fix for ld >= 2.24.90: -l:/some/absolute/path.so is no longer supported.
-  # See shared-library.cmake.
-  IF(UNIX AND NOT ${LD_VERSION} VERSION_LESS "2.24.90")
-    STRING(REPLACE ":/" "/" "${PREFIX}_LIBRARIES" "${${PREFIX}_LIBRARIES}")
-    STRING(REPLACE "-l:/" "/" "${PREFIX}_LDFLAGS" "${${PREFIX}_LDFLAGS}")
-
-    IF(DEFINED ${PREFIX}_DEBUG)
-      STRING(REPLACE ":/" "/" "${PREFIX}_DEBUG_LIBRARIES" "${${PREFIX}_DEBUG_LIBRARIES}")
-      STRING(REPLACE "-l:/" "/" "${PREFIX}_DEBUG_LDFLAGS" "${${PREFIX}_DEBUG_LDFLAGS}")
-    ENDIF()
-  ENDIF()
+  if(DEFINED ${PREFIX}_DEBUG)
+    if(${P_DEBUG_REQUIRED})
+      message(STATUS "${PKG_CONFIG_DEBUG_STRING} is required")
+      pkg_check_modules("${PREFIX}_DEBUG" REQUIRED
+                        "${PKG_CONFIG_DEBUG_STRING_NOSPACE}")
+    else(${P_DEBUG_REQUIRED})
+      message(STATUS "${PKG_CONFIG_DEBUG_STRING} is optional")
+      pkg_check_modules("${PREFIX}_DEBUG" "${PKG_CONFIG_DEBUG_STRING_NOSPACE}")
+    endif(${P_DEBUG_REQUIRED})
+  endif()
+
+  # Fix for ld >= 2.24.90: -l:/some/absolute/path.so is no longer supported. See
+  # shared-library.cmake.
+  if(UNIX AND NOT ${LD_VERSION} VERSION_LESS "2.24.90")
+    string(REPLACE ":/" "/" "${PREFIX}_LIBRARIES" "${${PREFIX}_LIBRARIES}")
+    string(REPLACE "-l:/" "/" "${PREFIX}_LDFLAGS" "${${PREFIX}_LDFLAGS}")
+
+    if(DEFINED ${PREFIX}_DEBUG)
+      string(REPLACE ":/" "/" "${PREFIX}_DEBUG_LIBRARIES"
+                     "${${PREFIX}_DEBUG_LIBRARIES}")
+      string(REPLACE "-l:/" "/" "${PREFIX}_DEBUG_LDFLAGS"
+                     "${${PREFIX}_DEBUG_LDFLAGS}")
+    endif()
+  endif()
 
   # Watch variables.
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
+  list(
+    APPEND
+    LOGGING_WATCHED_VARIABLES
     ${PREFIX}_FOUND
     ${PREFIX}_LIBRARIES
     ${PREFIX}_LIBRARY_DIRS
@@ -383,10 +451,11 @@ MACRO(ADD_DEPENDENCY P_REQUIRED COMPILE_TIME_ONLY PKG_CONFIG_STRING PKG_CONFIG_D
     ${PREFIX}_DATAROOTDIR
     ${PREFIX}_PKGDATAROOTDIR
     ${PREFIX}_DOCDIR
-    ${PREFIX}_DOXYGENDOCDIR
-    )
-  IF(DEFINED ${PREFIX}_DEBUG)
-    LIST(APPEND LOGGING_WATCHED_VARIABLES
+    ${PREFIX}_DOXYGENDOCDIR)
+  if(DEFINED ${PREFIX}_DEBUG)
+    list(
+      APPEND
+      LOGGING_WATCHED_VARIABLES
       ${PREFIX}_DEBUG_FOUND
       ${PREFIX}_DEBUG_LIBRARIES
       ${PREFIX}_DEBUG_LIBRARY_DIRS
@@ -406,647 +475,687 @@ MACRO(ADD_DEPENDENCY P_REQUIRED COMPILE_TIME_ONLY PKG_CONFIG_STRING PKG_CONFIG_D
       ${PREFIX}_DEBUG_DATAROOTDIR
       ${PREFIX}_DEBUG_PKGDATAROOTDIR
       ${PREFIX}_DEBUG_DOCDIR
-      ${PREFIX}_DEBUG_DOXYGENDOCDIR
-      )
-  ENDIF()
+      ${PREFIX}_DEBUG_DOXYGENDOCDIR)
+  endif()
 
   # Get the values of additional variables.
-  FOREACH(VARIABLE ${PKG_CONFIG_ADDITIONAL_VARIABLES})
+  foreach(VARIABLE ${PKG_CONFIG_ADDITIONAL_VARIABLES})
     # Upper-case version of the variable for CMake variable generation.
-    STRING(TOUPPER "${VARIABLE}" "VARIABLE_UC")
-    EXECUTE_PROCESS(
-      COMMAND "${PKG_CONFIG_EXECUTABLE}"
-      "--variable=${VARIABLE}" "${LIBRARY_NAME}"
+    string(TOUPPER "${VARIABLE}" "VARIABLE_UC")
+    execute_process(
+      COMMAND "${PKG_CONFIG_EXECUTABLE}" "--variable=${VARIABLE}"
+              "${LIBRARY_NAME}"
       OUTPUT_VARIABLE "${PREFIX}_${VARIABLE_UC}"
       ERROR_QUIET)
-    STRING(REPLACE "\n" "" "${PREFIX}_${VARIABLE_UC}" "${${PREFIX}_${VARIABLE_UC}}")
+    string(REPLACE "\n" "" "${PREFIX}_${VARIABLE_UC}"
+                   "${${PREFIX}_${VARIABLE_UC}}")
     # Watch additional variables.
-    LIST(APPEND LOGGING_WATCHED_VARIABLES ${PREFIX}_${VARIABLE_UC})
-    IF(DEFINED ${PREFIX}_DEBUG)
-      EXECUTE_PROCESS(
-        COMMAND "${PKG_CONFIG_EXECUTABLE}"
-        "--variable=${VARIABLE}" "${LIBRARY_DEBUG_NAME}"
+    list(APPEND LOGGING_WATCHED_VARIABLES ${PREFIX}_${VARIABLE_UC})
+    if(DEFINED ${PREFIX}_DEBUG)
+      execute_process(
+        COMMAND "${PKG_CONFIG_EXECUTABLE}" "--variable=${VARIABLE}"
+                "${LIBRARY_DEBUG_NAME}"
         OUTPUT_VARIABLE "${PREFIX}_DEBUG_${VARIABLE_UC}"
         ERROR_QUIET)
-      STRING(REPLACE "\n" "" "${PREFIX}_DEBUG_${VARIABLE_UC}" "${${PREFIX}_DEBUG_${VARIABLE_UC}}")
-      LIST(APPEND LOGGING_WATCHED_VARIABLES ${PREFIX}_DEBUG_${VARIABLE_UC})
-    ENDIF()
-  ENDFOREACH(VARIABLE)
-
-  #FIXME: spaces are replaced by semi-colon by mistakes, revert the change.
-  #I cannot see why CMake is doing that...
-  STRING(REPLACE ";" " " PKG_CONFIG_STRING "${PKG_CONFIG_STRING}")
-  IF(DEFINED ${PREFIX}_DEBUG)
-    STRING(REPLACE ";" " " PKG_CONFIG_DEBUG_STRING "${PKG_CONFIG_DEBUG_STRING}")
-  ENDIF()
-
-  IF(DEFINED ${PREFIX}_DEBUG)
-    IF(${${PREFIX}_FOUND})
-      SET(PACKAGE_FOUND 1)
-    ELSEIF(${${PREFIX}_DEBUG_FOUND})
-      SET(PACKAGE_FOUND 1)
-    ELSE()
-      SET(PACKAGE_FOUND 0)
-    ENDIF()
-  ELSE()
-    IF(${${PREFIX}_FOUND})
-      SET(PACKAGE_FOUND 1)
-    ELSE()
-      SET(PACKAGE_FOUND 0)
-    ENDIF()
-  ENDIF()
-
-  # Add the package to the dependency list if found and if dependency
-  # is triggered not only for documentation
-  IF(${PACKAGE_FOUND})
-    IF(NOT ${COMPILE_TIME_ONLY})
-      IF(DEFINED PROJECT_DEBUG_POSTFIX AND DEFINED ${PREFIX}_DEBUG)
-        _ADD_TO_LIST_IF_NOT_PRESENT( _PKG_CONFIG_REQUIRES_DEBUG "${PKG_CONFIG_DEBUG_STRING}")
-        _ADD_TO_LIST_IF_NOT_PRESENT( _PKG_CONFIG_REQUIRES_OPTIMIZED "${PKG_CONFIG_STRING}")
-      ELSE()
-        # Warn the user in case he/she is using alternative libraries for debug but no postfix
-        IF(NOT DEFINED PROJECT_DEBUG_POSTFIX AND DEFINED ${PREFIX}_DEBUG)
-          MESSAGE(AUTHOR_WARNING
-            "You are linking with different libraries in debug mode but the
+      string(REPLACE "\n" "" "${PREFIX}_DEBUG_${VARIABLE_UC}"
+                     "${${PREFIX}_DEBUG_${VARIABLE_UC}}")
+      list(APPEND LOGGING_WATCHED_VARIABLES ${PREFIX}_DEBUG_${VARIABLE_UC})
+    endif()
+  endforeach(VARIABLE)
+
+  # FIXME: spaces are replaced by semi-colon by mistakes, revert the change. I
+  # cannot see why CMake is doing that...
+  string(REPLACE ";" " " PKG_CONFIG_STRING "${PKG_CONFIG_STRING}")
+  if(DEFINED ${PREFIX}_DEBUG)
+    string(REPLACE ";" " " PKG_CONFIG_DEBUG_STRING "${PKG_CONFIG_DEBUG_STRING}")
+  endif()
+
+  if(DEFINED ${PREFIX}_DEBUG)
+    if(${${PREFIX}_FOUND})
+      set(PACKAGE_FOUND 1)
+    elseif(${${PREFIX}_DEBUG_FOUND})
+      set(PACKAGE_FOUND 1)
+    else()
+      set(PACKAGE_FOUND 0)
+    endif()
+  else()
+    if(${${PREFIX}_FOUND})
+      set(PACKAGE_FOUND 1)
+    else()
+      set(PACKAGE_FOUND 0)
+    endif()
+  endif()
+
+  # Add the package to the dependency list if found and if dependency is
+  # triggered not only for documentation
+  if(${PACKAGE_FOUND})
+    if(NOT ${COMPILE_TIME_ONLY})
+      if(DEFINED PROJECT_DEBUG_POSTFIX AND DEFINED ${PREFIX}_DEBUG)
+        _add_to_list_if_not_present(_PKG_CONFIG_REQUIRES_DEBUG
+                                    "${PKG_CONFIG_DEBUG_STRING}")
+        _add_to_list_if_not_present(_PKG_CONFIG_REQUIRES_OPTIMIZED
+                                    "${PKG_CONFIG_STRING}")
+      else()
+        # Warn the user in case he/she is using alternative libraries for debug
+        # but no postfix
+        if(NOT DEFINED PROJECT_DEBUG_POSTFIX AND DEFINED ${PREFIX}_DEBUG)
+          message(
+            AUTHOR_WARNING
+              "You are linking with different libraries in debug mode but the
              generated .pc cannot reflect that, it will default to release flags. Consider
              setting PROJECT_DEBUG_POSTFIX to generate different libraries and pc files in
              debug mode.")
-        ENDIF()
-        _ADD_TO_LIST_IF_NOT_PRESENT( _PKG_CONFIG_REQUIRES "${PKG_CONFIG_STRING}")
-      ENDIF()
-    ELSE()
-      _ADD_TO_LIST_IF_NOT_PRESENT( _PKG_CONFIG_COMPILE_TIME_REQUIRES "${PKG_CONFIG_STRING}")
-    ENDIF()
-  ENDIF()
-
-  # Add the package to the cmake dependency list
-  # if cpack has been included.
-  # This is likely to disappear when Ubuntu 8.04 will
-  # disappear.
-  IF(COMMAND ADD_CMAKE_DEPENDENCY)
-    ADD_CMAKE_DEPENDENCY(${PKG_CONFIG_STRING})
-  ENDIF(COMMAND ADD_CMAKE_DEPENDENCY)
-
-  IF(${${PREFIX}_FOUND})
-   MESSAGE(STATUS
-    "Pkg-config module ${LIBRARY_NAME} v${${PREFIX}_VERSION}"
-    " has been detected with success.")
-  ENDIF()
-  IF(DEFINED ${PREFIX}_DEBUG AND "${${PREFIX}_DEBUG_FOUND}")
-   MESSAGE(STATUS
-    "Pkg-config module ${LIBRARY_DEBUG_NAME} v${${PREFIX}_DEBUG_VERSION}"
-    " has been detected with success.")
-  ENDIF()
-
-ENDMACRO(ADD_DEPENDENCY)
-
-#.rst:
-# .. ifmode:: internal
-#
-#   .. command:: _GET_PKG_CONFIG_DEBUG_STRING
-#
-#     Used in ADD_*_DEPENDENCY to get the PKG_CONFIG_DEBUG_STRING argument.  On
-#     WIN32, if the string is absent but PROJECT_DEBUG_POSTFIX is set, attempts
-#     to locate a package matching the PROJECT_DEBUG_POSTFIX for debug builds.
-#
-MACRO(_GET_PKG_CONFIG_DEBUG_STRING PKG_CONFIG_STRING)
-  SET(PKG_CONFIG_DEBUG_STRING "")
-  FOREACH(ARG ${ARGN})
-    SET(PKG_CONFIG_DEBUG_STRING ${ARG})
-  ENDFOREACH()
-  IF(WIN32 AND DEFINED PROJECT_DEBUG_POSTFIX AND "${PKG_CONFIG_DEBUG_STRING}" STREQUAL "")
-    _PARSE_PKG_CONFIG_STRING("${PKG_CONFIG_STRING}" LIBRARY_NAME PREFIX)
-    STRING(REGEX REPLACE "${LIBRARY_NAME}" "${LIBRARY_NAME}${PROJECT_DEBUG_POSTFIX}" LIBRARY_NAME "${PKG_CONFIG_STRING}")
-    PKG_CHECK_MODULES("${PREFIX}" "${LIBRARY_NAME}")
-    IF(${PREFIX}_FOUND)
-      SET(PKG_CONFIG_DEBUG_STRING "${LIBRARY_NAME}")
-    ENDIF()
-  ENDIF()
-ENDMACRO(_GET_PKG_CONFIG_DEBUG_STRING)
-
-#.rst:
-# .. ifmode:: import
-#
-#   .. command:: ADD_REQUIRED_DEPENDENCY (PKG_CONFIG_STRING PKG_CONFIG_DEBUG_STRING)
-#
-#     Check for a dependency using pkg-config. Fail if the package cannot
-#     be found.
-#
-#     :PKG_CONFIG_STRING: string passed to pkg-config to check the version.
-#       Typically, this string looks like: ``my-package >= 0.5``
-#
-#     :PKG_CONFIG_DEBUG_STRING: (optional) string passed to pkg-config to
-#       check the version. The package found this way will be used in place
-#       of the first provided if the build is happening in DEBUG mode.
-#       This string might look like: ``my-package_d >= 0.5``
-#
-#     An optional argument can be passed to define an alternate PKG_CONFIG_STRING
-#     for debug builds. It should follow the same rule as PKG_CONFIG_STRING.
-#
-MACRO(ADD_REQUIRED_DEPENDENCY PKG_CONFIG_STRING)
-  LIST (FIND _PKG_CONFIG_REQUIRES "${PKG_CONFIG_STRING}" _index)
-  IF(${_index} EQUAL -1)
-    _GET_PKG_CONFIG_DEBUG_STRING("${PKG_CONFIG_STRING}" ${ARGN})
-    ADD_DEPENDENCY(1 0 ${PKG_CONFIG_STRING} "${PKG_CONFIG_DEBUG_STRING}")
-  ELSE()
-    # Already found
-    message(STATUS "Package ${PKG_CONFIG_STRING} already found.")
-  ENDIF()
-ENDMACRO(ADD_REQUIRED_DEPENDENCY)
+        endif()
+        _add_to_list_if_not_present(_PKG_CONFIG_REQUIRES "${PKG_CONFIG_STRING}")
+      endif()
+    else()
+      _add_to_list_if_not_present(_PKG_CONFIG_COMPILE_TIME_REQUIRES
+                                  "${PKG_CONFIG_STRING}")
+    endif()
+  endif()
 
-#.rst:
-# .. ifmode:: import
-#
-#   .. command:: ADD_OPTIONAL_DEPENDENCY (PKG_CONFIG_STRING PKG_CONFIG_DEBUG_STRING)
-#
-#     Check for a dependency using pkg-config. Quiet if the package cannot
-#     be found.
-#
-#     :PKG_CONFIG_STRING: string passed to pkg-config to check the version.
-#       Typically, this string looks like: ``my-package >= 0.5``
-#
-#     :PKG_CONFIG_DEBUG_STRING: (optional) string passed to pkg-config to
-#       check the version. The package found this way will be used in place
-#       of the first provided if the build is happening in DEBUG mode.
-#       This string might look like: ``my-package_d >= 0.5``
-#
-#     An optional argument can be passed to define an alternate PKG_CONFIG_STRING
-#     for debug builds. It should follow the same rule as PKG_CONFIG_STRING.
-#
-MACRO(ADD_OPTIONAL_DEPENDENCY PKG_CONFIG_STRING)
-  _GET_PKG_CONFIG_DEBUG_STRING("${PKG_CONFIG_STRING}" ${ARGN})
-  ADD_DEPENDENCY(0 0 ${PKG_CONFIG_STRING} "${PKG_CONFIG_DEBUG_STRING}")
-ENDMACRO(ADD_OPTIONAL_DEPENDENCY)
+  # Add the package to the cmake dependency list if cpack has been included.
+  # This is likely to disappear when Ubuntu 8.04 will disappear.
+  if(COMMAND ADD_CMAKE_DEPENDENCY)
+    add_cmake_dependency(${PKG_CONFIG_STRING})
+  endif(COMMAND ADD_CMAKE_DEPENDENCY)
+
+  if(${${PREFIX}_FOUND})
+    message(STATUS "Pkg-config module ${LIBRARY_NAME} v${${PREFIX}_VERSION}"
+                   " has been detected with success.")
+  endif()
+  if(DEFINED ${PREFIX}_DEBUG AND "${${PREFIX}_DEBUG_FOUND}")
+    message(
+      STATUS
+        "Pkg-config module ${LIBRARY_DEBUG_NAME} v${${PREFIX}_DEBUG_VERSION}"
+        " has been detected with success.")
+  endif()
 
-#.rst:
-# .. ifmode:: import-advanced
+endmacro(ADD_DEPENDENCY)
+
+# .rst: .. ifmode:: internal
+#
+# .. command:: _GET_PKG_CONFIG_DEBUG_STRING
+#
+# Used in ADD_*_DEPENDENCY to get the PKG_CONFIG_DEBUG_STRING argument.  On
+# WIN32, if the string is absent but PROJECT_DEBUG_POSTFIX is set, attempts to
+# locate a package matching the PROJECT_DEBUG_POSTFIX for debug builds.
+#
+macro(_GET_PKG_CONFIG_DEBUG_STRING PKG_CONFIG_STRING)
+  set(PKG_CONFIG_DEBUG_STRING "")
+  foreach(ARG ${ARGN})
+    set(PKG_CONFIG_DEBUG_STRING ${ARG})
+  endforeach()
+  if(WIN32
+     AND DEFINED PROJECT_DEBUG_POSTFIX
+     AND "${PKG_CONFIG_DEBUG_STRING}" STREQUAL "")
+    _parse_pkg_config_string("${PKG_CONFIG_STRING}" LIBRARY_NAME PREFIX)
+    string(REGEX
+           REPLACE "${LIBRARY_NAME}" "${LIBRARY_NAME}${PROJECT_DEBUG_POSTFIX}"
+                   LIBRARY_NAME "${PKG_CONFIG_STRING}")
+    pkg_check_modules("${PREFIX}" "${LIBRARY_NAME}")
+    if(${PREFIX}_FOUND)
+      set(PKG_CONFIG_DEBUG_STRING "${LIBRARY_NAME}")
+    endif()
+  endif()
+endmacro(_GET_PKG_CONFIG_DEBUG_STRING)
+
+# .rst: .. ifmode:: import
 #
-#   .. command:: ADD_COMPILE_DEPENDENCY (PKGCONFIG_STRING)
+# .. command:: ADD_REQUIRED_DEPENDENCY (PKG_CONFIG_STRING
+# PKG_CONFIG_DEBUG_STRING)
 #
-#     Check for a dependency using pkg-config. Fail if the package cannot
-#     be found.  The package won't appear as depency inside the \*.pc file
-#     of the PROJECT.
+# Check for a dependency using pkg-config. Fail if the package cannot be found.
 #
-#     :PKG_CONFIG_STRING: string passed to pkg-config to check the version.
-#       Typically, this string looks like: ``my-package >= 0.5``
+# :PKG_CONFIG_STRING: string passed to pkg-config to check the version.
+# Typically, this string looks like: ``my-package >= 0.5``
 #
-#     :PKG_CONFIG_DEBUG_STRING: (optional) string passed to pkg-config to
-#       check the version. The package found this way will be used in place
-#       of the first provided if the build is happening in DEBUG mode.  This
-#       string might look like: ``my-package_d >= 0.5``
+# :PKG_CONFIG_DEBUG_STRING: (optional) string passed to pkg-config to check the
+# version. The package found this way will be used in place of the first
+# provided if the build is happening in DEBUG mode. This string might look like:
+# ``my-package_d >= 0.5``
 #
+# An optional argument can be passed to define an alternate PKG_CONFIG_STRING
+# for debug builds. It should follow the same rule as PKG_CONFIG_STRING.
 #
-MACRO(ADD_COMPILE_DEPENDENCY PKG_CONFIG_STRING)
-  _GET_PKG_CONFIG_DEBUG_STRING("${PKG_CONFIG_STRING}" ${ARGN})
-  ADD_DEPENDENCY(1 1 ${PKG_CONFIG_STRING} "${PKG_CONFIG_DEBUG_STRING}")
-ENDMACRO(ADD_COMPILE_DEPENDENCY)
-
+macro(ADD_REQUIRED_DEPENDENCY PKG_CONFIG_STRING)
+  list(FIND _PKG_CONFIG_REQUIRES "${PKG_CONFIG_STRING}" _index)
+  if(${_index} EQUAL -1)
+    _get_pkg_config_debug_string("${PKG_CONFIG_STRING}" ${ARGN})
+    add_dependency(1 0 ${PKG_CONFIG_STRING} "${PKG_CONFIG_DEBUG_STRING}")
+  else()
+    # Already found
+    message(STATUS "Package ${PKG_CONFIG_STRING} already found.")
+  endif()
+endmacro(ADD_REQUIRED_DEPENDENCY)
 
-#.rst:
-# .. ifmode:: import-advanced
+# .rst: .. ifmode:: import
 #
-#   .. command:: ADD_DOC_DEPENDENCY (PKGCONFIG_STRING)
+# .. command:: ADD_OPTIONAL_DEPENDENCY (PKG_CONFIG_STRING
+# PKG_CONFIG_DEBUG_STRING)
 #
-#     Alias for :command:`ADD_COMPILE_DEPENDENCY`
+# Check for a dependency using pkg-config. Quiet if the package cannot be found.
 #
-MACRO(ADD_DOC_DEPENDENCY PKG_CONFIG_STRING)
-  ADD_COMPILE_DEPENDENCY(${PKG_CONFIG_STRING})
-ENDMACRO(ADD_DOC_DEPENDENCY)
-
-#.rst:
-# .. ifmode:: export
+# :PKG_CONFIG_STRING: string passed to pkg-config to check the version.
+# Typically, this string looks like: ``my-package >= 0.5``
 #
-#   .. command:: PKG_CONFIG_APPEND_LIBRARY_DIR (DIRS)
+# :PKG_CONFIG_DEBUG_STRING: (optional) string passed to pkg-config to check the
+# version. The package found this way will be used in place of the first
+# provided if the build is happening in DEBUG mode. This string might look like:
+# ``my-package_d >= 0.5``
 #
-#     This macro adds library directories ``DIRS`` in a portable way into
-#     the CMake file.
+# An optional argument can be passed to define an alternate PKG_CONFIG_STRING
+# for debug builds. It should follow the same rule as PKG_CONFIG_STRING.
 #
-MACRO(PKG_CONFIG_APPEND_LIBRARY_DIR DIRS)
-  FOREACH(DIR ${DIRS})
-    IF(DIR)
-      SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS} ${LIBDIR_KW}${DIR}" CACHE INTERNAL "")
-    ENDIF(DIR)
-  ENDFOREACH(DIR ${DIRS})
-ENDMACRO(PKG_CONFIG_APPEND_LIBRARY_DIR DIR)
+macro(ADD_OPTIONAL_DEPENDENCY PKG_CONFIG_STRING)
+  _get_pkg_config_debug_string("${PKG_CONFIG_STRING}" ${ARGN})
+  add_dependency(0 0 ${PKG_CONFIG_STRING} "${PKG_CONFIG_DEBUG_STRING}")
+endmacro(ADD_OPTIONAL_DEPENDENCY)
 
-#.rst:
-# .. ifmode:: export-advanced
+# .rst: .. ifmode:: import-advanced
 #
-#   .. command:: PKG_CONFIG_APPEND_CFLAGS_DEBUG (FLAGS)
+# .. command:: ADD_COMPILE_DEPENDENCY (PKGCONFIG_STRING)
 #
+# Check for a dependency using pkg-config. Fail if the package cannot be found.
+# The package won't appear as depency inside the \*.pc file of the PROJECT.
 #
-#     This macro adds ``FLAGS`` in a portable way into the pkg-config file
-#     of the debug library.
+# :PKG_CONFIG_STRING: string passed to pkg-config to check the version.
+# Typically, this string looks like: ``my-package >= 0.5``
 #
-#     As such the macro fails if ``PROJECT_DEBUG_POSTFIX`` is not set
+# :PKG_CONFIG_DEBUG_STRING: (optional) string passed to pkg-config to check the
+# version. The package found this way will be used in place of the first
+# provided if the build is happening in DEBUG mode.  This string might look
+# like: ``my-package_d >= 0.5``
 #
-MACRO(PKG_CONFIG_APPEND_CFLAGS_DEBUG FLAGS)
-  IF(NOT DEFINED PROJECT_DEBUG_POSTFIX)
-    MESSAGE(FATAL_ERROR "You are trying to use PKG_CONFIG_APPEND_CFLAGS_DEBUG on a package that does not have a debug library")
-  ENDIF()
-  FOREACH(FLAG ${FLAGS})
-    IF(FLAG)
-      SET(_PKG_CONFIG_CFLAGS_DEBUG "${_PKG_CONFIG_CFLAGS_DEBUG} ${FLAG}" CACHE INTERNAL "")
-    ENDIF(FLAG)
-  ENDFOREACH(FLAG ${FLAGS})
-ENDMACRO(PKG_CONFIG_APPEND_CFLAGS_DEBUG FLAGS)
+macro(ADD_COMPILE_DEPENDENCY PKG_CONFIG_STRING)
+  _get_pkg_config_debug_string("${PKG_CONFIG_STRING}" ${ARGN})
+  add_dependency(1 1 ${PKG_CONFIG_STRING} "${PKG_CONFIG_DEBUG_STRING}")
+endmacro(ADD_COMPILE_DEPENDENCY)
 
-#.rst:
-# .. ifmode:: export-advanced
-#
-#   .. command:: PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED (FLAGS)
-#
+# .rst: .. ifmode:: import-advanced
 #
-#     This macro adds ``FLAGS`` in a portable way into the pkg-config file
-#     of the optimized library.
+# .. command:: ADD_DOC_DEPENDENCY (PKGCONFIG_STRING)
 #
-#     As such the macro fails if ``PROJECT_DEBUG_POSTFIX`` is not set
+# Alias for :command:`ADD_COMPILE_DEPENDENCY`
 #
-MACRO(PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED FLAGS)
-  IF(NOT DEFINED PROJECT_DEBUG_POSTFIX)
-    MESSAGE(FATAL_ERROR "You are trying to use PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED on a package that does not have a debug library")
-  ENDIF()
-  FOREACH(FLAG ${FLAGS})
-    IF(FLAG)
-      SET(_PKG_CONFIG_CFLAGS_OPTIMIZED "${_PKG_CONFIG_CFLAGS_OPTIMIZED} ${FLAG}" CACHE INTERNAL "")
-    ENDIF(FLAG)
-  ENDFOREACH(FLAG ${FLAGS})
-ENDMACRO(PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED FLAGS)
+macro(ADD_DOC_DEPENDENCY PKG_CONFIG_STRING)
+  add_compile_dependency(${PKG_CONFIG_STRING})
+endmacro(ADD_DOC_DEPENDENCY)
 
-#.rst:
-# .. ifmode:: export
+# .rst: .. ifmode:: export
 #
-#   .. command:: PKG_CONFIG_APPEND_CFLAGS (FLAGS)
+# .. command:: PKG_CONFIG_APPEND_LIBRARY_DIR (DIRS)
 #
-#     This macro adds ``FLAGS`` in a portable way into the pkg-config file.
+# This macro adds library directories ``DIRS`` in a portable way into the CMake
+# file.
 #
-MACRO(PKG_CONFIG_APPEND_CFLAGS FLAGS)
-  FOREACH(FLAG ${FLAGS})
-    IF(FLAG)
-      SET(_PKG_CONFIG_CFLAGS "${_PKG_CONFIG_CFLAGS} ${FLAG}" CACHE INTERNAL "")
-    ENDIF(FLAG)
-  ENDFOREACH(FLAG ${FLAGS})
-ENDMACRO(PKG_CONFIG_APPEND_CFLAGS)
+macro(PKG_CONFIG_APPEND_LIBRARY_DIR DIRS)
+  foreach(DIR ${DIRS})
+    if(DIR)
+      set(_PKG_CONFIG_LIBS
+          "${_PKG_CONFIG_LIBS} ${LIBDIR_KW}${DIR}"
+          CACHE INTERNAL "")
+    endif(DIR)
+  endforeach(DIR ${DIRS})
+endmacro(PKG_CONFIG_APPEND_LIBRARY_DIR DIR)
 
-
-#.rst:
-# .. ifmode:: export-advanced
-#
-#   .. command:: PKG_CONFIG_APPEND_LIBS_RAW (LIBS)
-#
-#     This macro adds raw value ``LIBS`` in the "Libs:" section of the
-#     pkg-config file.
+# .rst: .. ifmode:: export-advanced
 #
-#     **Exception for mac OS X**
+# .. command:: PKG_CONFIG_APPEND_CFLAGS_DEBUG (FLAGS)
 #
-#       In addition to the classical static and dynamic libraries (handled
-#       like unix does), mac systems can link against frameworks.
-#       Frameworks are directories gathering headers, libraries, shared
-#       resources...
+# This macro adds ``FLAGS`` in a portable way into the pkg-config file of the
+# debug library.
 #
-#       The syntax used to link with a framework is particular, hence a
-#       filter is added to convert the absolute path to a framework (e.g.
-#       /Path/to/Sample.framework) into the correct flags (-F/Path/to/
-#       -framework Sample).
+# As such the macro fails if ``PROJECT_DEBUG_POSTFIX`` is not set
 #
-MACRO(PKG_CONFIG_APPEND_LIBS_RAW LIBS)
-  FOREACH(LIB ${LIBS})
-    IF(LIB)
-      IF( APPLE AND ${LIB} MATCHES "\\.framework")
-	    GET_FILENAME_COMPONENT(framework_PATH ${LIB} PATH)
-	    GET_FILENAME_COMPONENT(framework_NAME ${LIB} NAME_WE)
-        SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS} -F${framework_PATH} -Wl,-framework,${framework_NAME}" CACHE INTERNAL "")
-      ELSE( APPLE AND ${LIB} MATCHES "\\.framework")
-        SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS} ${LIB}" CACHE INTERNAL "")
-      ENDIF( APPLE AND ${LIB} MATCHES "\\.framework")
-    ENDIF(LIB)
-  ENDFOREACH(LIB ${LIBS})
-  STRING(REPLACE "\n" "" _PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS}")
-ENDMACRO(PKG_CONFIG_APPEND_LIBS_RAW)
+macro(PKG_CONFIG_APPEND_CFLAGS_DEBUG FLAGS)
+  if(NOT DEFINED PROJECT_DEBUG_POSTFIX)
+    message(
+      FATAL_ERROR
+        "You are trying to use PKG_CONFIG_APPEND_CFLAGS_DEBUG on a package that does not have a debug library"
+    )
+  endif()
+  foreach(FLAG ${FLAGS})
+    if(FLAG)
+      set(_PKG_CONFIG_CFLAGS_DEBUG
+          "${_PKG_CONFIG_CFLAGS_DEBUG} ${FLAG}"
+          CACHE INTERNAL "")
+    endif(FLAG)
+  endforeach(FLAG ${FLAGS})
+endmacro(PKG_CONFIG_APPEND_CFLAGS_DEBUG FLAGS)
 
-#.rst:
-# .. ifmode:: export
-#
-#   .. command:: PKG_CONFIG_APPEND_LIBS (LIBS)
+# .rst: .. ifmode:: export-advanced
 #
-#     This macro adds libraries in a portable way into the pkg-config file.
+# .. command:: PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED (FLAGS)
 #
-#     Library prefix and suffix is automatically added.
+# This macro adds ``FLAGS`` in a portable way into the pkg-config file of the
+# optimized library.
 #
-#   .. note::
+# As such the macro fails if ``PROJECT_DEBUG_POSTFIX`` is not set
 #
-#     If you use :variable:`PROJECT_DEBUG_POSTFIX`, this covers both debug
-#     and optimized configurations with the correct name for targets
-#     affected by the postfix.
-#
-MACRO(PKG_CONFIG_APPEND_LIBS LIBS)
-  FOREACH(LIB ${LIBS})
-    IF(LIB)
+macro(PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED FLAGS)
+  if(NOT DEFINED PROJECT_DEBUG_POSTFIX)
+    message(
+      FATAL_ERROR
+        "You are trying to use PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED on a package that does not have a debug library"
+    )
+  endif()
+  foreach(FLAG ${FLAGS})
+    if(FLAG)
+      set(_PKG_CONFIG_CFLAGS_OPTIMIZED
+          "${_PKG_CONFIG_CFLAGS_OPTIMIZED} ${FLAG}"
+          CACHE INTERNAL "")
+    endif(FLAG)
+  endforeach(FLAG ${FLAGS})
+endmacro(PKG_CONFIG_APPEND_CFLAGS_OPTIMIZED FLAGS)
+
+# .rst: .. ifmode:: export
+#
+# .. command:: PKG_CONFIG_APPEND_CFLAGS (FLAGS)
+#
+# This macro adds ``FLAGS`` in a portable way into the pkg-config file.
+#
+macro(PKG_CONFIG_APPEND_CFLAGS FLAGS)
+  foreach(FLAG ${FLAGS})
+    if(FLAG)
+      set(_PKG_CONFIG_CFLAGS
+          "${_PKG_CONFIG_CFLAGS} ${FLAG}"
+          CACHE INTERNAL "")
+    endif(FLAG)
+  endforeach(FLAG ${FLAGS})
+endmacro(PKG_CONFIG_APPEND_CFLAGS)
+
+# .rst: .. ifmode:: export-advanced
+#
+# .. command:: PKG_CONFIG_APPEND_LIBS_RAW (LIBS)
+#
+# This macro adds raw value ``LIBS`` in the "Libs:" section of the pkg-config
+# file.
+#
+# **Exception for mac OS X**
+#
+# In addition to the classical static and dynamic libraries (handled like unix
+# does), mac systems can link against frameworks. Frameworks are directories
+# gathering headers, libraries, shared resources...
+#
+# The syntax used to link with a framework is particular, hence a filter is
+# added to convert the absolute path to a framework (e.g.
+# /Path/to/Sample.framework) into the correct flags (-F/Path/to/ -framework
+# Sample).
+#
+macro(PKG_CONFIG_APPEND_LIBS_RAW LIBS)
+  foreach(LIB ${LIBS})
+    if(LIB)
+      if(APPLE AND ${LIB} MATCHES "\\.framework")
+        get_filename_component(framework_PATH ${LIB} PATH)
+        get_filename_component(framework_NAME ${LIB} NAME_WE)
+        set(_PKG_CONFIG_LIBS
+            "${_PKG_CONFIG_LIBS} -F${framework_PATH} -Wl,-framework,${framework_NAME}"
+            CACHE INTERNAL "")
+      else(APPLE AND ${LIB} MATCHES "\\.framework")
+        set(_PKG_CONFIG_LIBS
+            "${_PKG_CONFIG_LIBS} ${LIB}"
+            CACHE INTERNAL "")
+      endif(APPLE AND ${LIB} MATCHES "\\.framework")
+    endif(LIB)
+  endforeach(LIB ${LIBS})
+  string(REPLACE "\n" "" _PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS}")
+endmacro(PKG_CONFIG_APPEND_LIBS_RAW)
+
+# .rst: .. ifmode:: export
+#
+# .. command:: PKG_CONFIG_APPEND_LIBS (LIBS)
+#
+# This macro adds libraries in a portable way into the pkg-config file.
+#
+# Library prefix and suffix is automatically added.
+#
+# .. note::
+#
+# If you use :variable:`PROJECT_DEBUG_POSTFIX`, this covers both debug and
+# optimized configurations with the correct name for targets affected by the
+# postfix.
+#
+macro(PKG_CONFIG_APPEND_LIBS LIBS)
+  foreach(LIB ${LIBS})
+    if(LIB)
       # Check if this project is building this library
-      IF(TARGET ${LIB})
-        SET(LIB_COMPLETE_NAME ${LIB})
+      if(TARGET ${LIB})
+        set(LIB_COMPLETE_NAME ${LIB})
         # If OUTPUT_NAME property is defined, use this for the library name.
-        GET_PROPERTY(OUTPUT_NAME_SET TARGET ${LIB} PROPERTY OUTPUT_NAME SET)
-        IF(OUTPUT_NAME_SET)
-          GET_TARGET_PROPERTY(OUTPUT_LIB_NAME ${LIB} OUTPUT_NAME)
-        ENDIF(OUTPUT_NAME_SET)
+        get_property(
+          OUTPUT_NAME_SET
+          TARGET ${LIB}
+          PROPERTY OUTPUT_NAME
+          SET)
+        if(OUTPUT_NAME_SET)
+          get_target_property(OUTPUT_LIB_NAME ${LIB} OUTPUT_NAME)
+        endif(OUTPUT_NAME_SET)
         # If SUFFIX property is defined, use it for defining the library name.
-        GET_PROPERTY(SUFFIX_SET TARGET ${LIB} PROPERTY SUFFIX SET)
-        IF(SUFFIX_SET)
-          GET_TARGET_PROPERTY(LIB_SUFFIX ${LIB} SUFFIX)
-        ENDIF(SUFFIX_SET)
-
-        GET_PROPERTY(PREFIX_SET TARGET ${LIB} PROPERTY PREFIX SET)
-        IF(PREFIX_SET)
-          GET_TARGET_PROPERTY(LIB_PREFIX ${LIB} PREFIX)
-        ENDIF(PREFIX_SET)
-        IF(OUTPUT_NAME_SET)
-          SET(LIB_COMPLETE_NAME ${OUTPUT_LIB_NAME})
-        ELSE()
-          SET(LIB_COMPLETE_NAME ${LIB_PREFIX}${LIB}${LIB_SUFFIX})
-        ENDIF()
+        get_property(
+          SUFFIX_SET
+          TARGET ${LIB}
+          PROPERTY SUFFIX
+          SET)
+        if(SUFFIX_SET)
+          get_target_property(LIB_SUFFIX ${LIB} SUFFIX)
+        endif(SUFFIX_SET)
+
+        get_property(
+          PREFIX_SET
+          TARGET ${LIB}
+          PROPERTY PREFIX
+          SET)
+        if(PREFIX_SET)
+          get_target_property(LIB_PREFIX ${LIB} PREFIX)
+        endif(PREFIX_SET)
+        if(OUTPUT_NAME_SET)
+          set(LIB_COMPLETE_NAME ${OUTPUT_LIB_NAME})
+        else()
+          set(LIB_COMPLETE_NAME ${LIB_PREFIX}${LIB}${LIB_SUFFIX})
+        endif()
         # Remove lib extension if any
-        IF(UNIX OR APPLE)
-          STRING(REPLACE ".so" "" LIB_COMPLETE_NAME ${LIB_COMPLETE_NAME})
-          STRING(REPLACE ".dylib" "" LIB_COMPLETE_NAME ${LIB_COMPLETE_NAME})
-        ENDIF(UNIX OR APPLE)
+        if(UNIX OR APPLE)
+          string(REPLACE ".so" "" LIB_COMPLETE_NAME ${LIB_COMPLETE_NAME})
+          string(REPLACE ".dylib" "" LIB_COMPLETE_NAME ${LIB_COMPLETE_NAME})
+        endif(UNIX OR APPLE)
         # Single build type generator
-        IF(DEFINED CMAKE_BUILD_TYPE)
-          SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS} ${LIBINCL_KW}${LIB_COMPLETE_NAME}${PKGCONFIG_POSTFIX}${LIB_EXT}" CACHE INTERNAL "")
-        # Multiple build types generator
-        ELSE()
-          SET(_PKG_CONFIG_LIBS_DEBUG "${_PKG_CONFIG_LIBS_DEBUG} ${LIBINCL_KW}${LIB_COMPLETE_NAME}${PKGCONFIG_POSTFIX}${LIB_EXT}" CACHE INTERNAL "")
-          STRING(STRIP ${_PKG_CONFIG_LIBS_DEBUG} _PKG_CONFIG_LIBS_DEBUG)  # To address CMP0004
-          SET(_PKG_CONFIG_LIBS_OPTIMIZED "${_PKG_CONFIG_LIBS_OPTIMIZED} ${LIBINCL_KW}${LIB_COMPLETE_NAME}${LIB_EXT}" CACHE INTERNAL "")
-          STRING(STRIP ${_PKG_CONFIG_LIBS_OPTIMIZED} _PKG_CONFIG_LIBS_OPTIMIZED)  # To address CMP0004
-        ENDIF()
-      ELSE()
-        IF(IS_ABSOLUTE ${LIB})
-          SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS} ${LIBINCL_ABSKW}${LIB}" CACHE INTERNAL "")
-        ELSE()
-          SET(_PKG_CONFIG_LIBS "${_PKG_CONFIG_LIBS} ${LIBINCL_KW}${LIB}${LIB_EXT}" CACHE INTERNAL "")
-        ENDIF()
-        STRING(STRIP ${_PKG_CONFIG_LIBS} _PKG_CONFIG_LIBS)  # To address CMP0004
-      ENDIF()
-    ENDIF(LIB)
-  ENDFOREACH(LIB ${LIBS})
-ENDMACRO(PKG_CONFIG_APPEND_LIBS)
-
-
-# For internal use only.
-# PKG_CONFIG_USE_LCOMPILE_DEPENDENCY(TARGET DEPENDENCY)
+        if(DEFINED CMAKE_BUILD_TYPE)
+          set(_PKG_CONFIG_LIBS
+              "${_PKG_CONFIG_LIBS} ${LIBINCL_KW}${LIB_COMPLETE_NAME}${PKGCONFIG_POSTFIX}${LIB_EXT}"
+              CACHE INTERNAL "")
+          # Multiple build types generator
+        else()
+          set(_PKG_CONFIG_LIBS_DEBUG
+              "${_PKG_CONFIG_LIBS_DEBUG} ${LIBINCL_KW}${LIB_COMPLETE_NAME}${PKGCONFIG_POSTFIX}${LIB_EXT}"
+              CACHE INTERNAL "")
+          string(STRIP ${_PKG_CONFIG_LIBS_DEBUG} _PKG_CONFIG_LIBS_DEBUG
+          )# To address CMP0004
+          set(_PKG_CONFIG_LIBS_OPTIMIZED
+              "${_PKG_CONFIG_LIBS_OPTIMIZED} ${LIBINCL_KW}${LIB_COMPLETE_NAME}${LIB_EXT}"
+              CACHE INTERNAL "")
+          string(STRIP ${_PKG_CONFIG_LIBS_OPTIMIZED} _PKG_CONFIG_LIBS_OPTIMIZED
+          )# To address CMP0004
+        endif()
+      else()
+        if(IS_ABSOLUTE ${LIB})
+          set(_PKG_CONFIG_LIBS
+              "${_PKG_CONFIG_LIBS} ${LIBINCL_ABSKW}${LIB}"
+              CACHE INTERNAL "")
+        else()
+          set(_PKG_CONFIG_LIBS
+              "${_PKG_CONFIG_LIBS} ${LIBINCL_KW}${LIB}${LIB_EXT}"
+              CACHE INTERNAL "")
+        endif()
+        string(STRIP ${_PKG_CONFIG_LIBS} _PKG_CONFIG_LIBS) # To address CMP0004
+      endif()
+    endif(LIB)
+  endforeach(LIB ${LIBS})
+endmacro(PKG_CONFIG_APPEND_LIBS)
+
+# For internal use only. PKG_CONFIG_USE_LCOMPILE_DEPENDENCY(TARGET DEPENDENCY)
 # --------------------------------------------
 #
 # For user look at PKG_CONFIG_USE_COMPILE_DEPENDENCY
 #
-# This macro changes the target properties to properly search for
-# headers  against the required shared libraries
-# when using a dependency detected through pkg-config.
+# This macro changes the target properties to properly search for headers
+# against the required shared libraries when using a dependency detected through
+# pkg-config.
 #
 # I.e. PKG_CONFIG_USE_LCOMPILE_DEPENDENCY(my-binary my-package)
 #
-MACRO(PKG_CONFIG_USE_LCOMPILE_DEPENDENCY TARGET PREFIX NO_INCLUDE_SYSTEM)
-
-  IF(DEFINED ${PREFIX}_DEBUG_FOUND)
-    FOREACH(FLAG ${${PREFIX}_DEBUG_CFLAGS_OTHER})
-      TARGET_COMPILE_OPTIONS(${TARGET} PUBLIC "$<$<CONFIG:Debug>:${FLAG}>")
-    ENDFOREACH()
-    FOREACH(FLAG ${${PREFIX}_CFLAGS_OTHER})
-      TARGET_COMPILE_OPTIONS(${TARGET} PUBLIC "$<$<NOT:$<CONFIG:Debug>>:${FLAG}>")
-    ENDFOREACH()
-  ELSE()
-    FOREACH(FLAG ${${PREFIX}_CFLAGS_OTHER})
-      TARGET_COMPILE_OPTIONS(${TARGET} PUBLIC ${FLAG})
-    ENDFOREACH()
-  ENDIF()
-
-  # Include/libraries paths seems to be filtered on Linux, add paths
-  # again.
-  SET(SCOPE "PRIVATE")
-  IF(PROJECT_USE_KEYWORD_LINK_LIBRARIES)
-    SET(SCOPE "PUBLIC")
-  ENDIF()
-  SET(SYSTEM "SYSTEM")
-  IF(NO_INCLUDE_SYSTEM)
-    SET(SYSTEM "")
-  ENDIF()
-
-  TARGET_INCLUDE_DIRECTORIES(${TARGET} ${SYSTEM} ${SCOPE} ${${PREFIX}_INCLUDE_DIRS})
-  IF(DEFINED ${PREFIX}_DEBUG_FOUND)
-    TARGET_INCLUDE_DIRECTORIES(${TARGET} ${SYSTEM} ${SCOPE} ${${PREFIX}_DEBUG_INCLUDE_DIRS})
-  ENDIF()
-
-ENDMACRO(PKG_CONFIG_USE_LCOMPILE_DEPENDENCY)
-
-MACRO(_FILTER_LINK_FLAGS TARGET IS_GENERAL IS_DEBUG FLAGS)
-  FOREACH(FLAG ${FLAGS})
-    STRING(FIND "${FLAG}" "/" STARTS_WITH_SLASH)
-    STRING(FIND "${FLAG}" "-" STARTS_WITH_DASH)
-    IF(NOT WIN32 OR (NOT ${STARTS_WITH_DASH} EQUAL 0 AND NOT ${STARTS_WITH_SLASH} EQUAL 0))
-      IF(${IS_GENERAL})
-        TARGET_LINK_LIBRARIES(${TARGET} ${PUBLIC_KEYWORD} ${FLAG})
-      ELSEIF(${IS_DEBUG})
-        TARGET_LINK_LIBRARIES(${TARGET} ${PUBLIC_KEYWORD} debug ${FLAG})
-      ELSE()
-        TARGET_LINK_LIBRARIES(${TARGET} ${PUBLIC_KEYWORD} optimized ${FLAG})
-      ENDIF()
-    ENDIF()
-  ENDFOREACH()
-ENDMACRO()
-
-# Internal use only.
-# _PKG_CONFIG_MANIPULATE_LDFLAGS(TARGET PREFIX CONFIG IS_GENERAL IS_DEBUG)
-#
-MACRO(_PKG_CONFIG_MANIPULATE_LDFLAGS TARGET PREFIX CONFIG IS_GENERAL IS_DEBUG)
+macro(PKG_CONFIG_USE_LCOMPILE_DEPENDENCY TARGET PREFIX NO_INCLUDE_SYSTEM)
+
+  if(DEFINED ${PREFIX}_DEBUG_FOUND)
+    foreach(FLAG ${${PREFIX}_DEBUG_CFLAGS_OTHER})
+      target_compile_options(${TARGET} PUBLIC "$<$<CONFIG:Debug>:${FLAG}>")
+    endforeach()
+    foreach(FLAG ${${PREFIX}_CFLAGS_OTHER})
+      target_compile_options(${TARGET}
+                             PUBLIC "$<$<NOT:$<CONFIG:Debug>>:${FLAG}>")
+    endforeach()
+  else()
+    foreach(FLAG ${${PREFIX}_CFLAGS_OTHER})
+      target_compile_options(${TARGET} PUBLIC ${FLAG})
+    endforeach()
+  endif()
+
+  # Include/libraries paths seems to be filtered on Linux, add paths again.
+  set(SCOPE "PRIVATE")
+  if(PROJECT_USE_KEYWORD_LINK_LIBRARIES)
+    set(SCOPE "PUBLIC")
+  endif()
+  set(SYSTEM "SYSTEM")
+  if(NO_INCLUDE_SYSTEM)
+    set(SYSTEM "")
+  endif()
+
+  target_include_directories(${TARGET} ${SYSTEM} ${SCOPE}
+                             ${${PREFIX}_INCLUDE_DIRS})
+  if(DEFINED ${PREFIX}_DEBUG_FOUND)
+    target_include_directories(${TARGET} ${SYSTEM} ${SCOPE}
+                               ${${PREFIX}_DEBUG_INCLUDE_DIRS})
+  endif()
+
+endmacro(PKG_CONFIG_USE_LCOMPILE_DEPENDENCY)
+
+macro(_FILTER_LINK_FLAGS TARGET IS_GENERAL IS_DEBUG FLAGS)
+  foreach(FLAG ${FLAGS})
+    string(FIND "${FLAG}" "/" STARTS_WITH_SLASH)
+    string(FIND "${FLAG}" "-" STARTS_WITH_DASH)
+    if(NOT WIN32 OR (NOT ${STARTS_WITH_DASH} EQUAL 0
+                     AND NOT ${STARTS_WITH_SLASH} EQUAL 0))
+      if(${IS_GENERAL})
+        target_link_libraries(${TARGET} ${PUBLIC_KEYWORD} ${FLAG})
+      elseif(${IS_DEBUG})
+        target_link_libraries(${TARGET} ${PUBLIC_KEYWORD} debug ${FLAG})
+      else()
+        target_link_libraries(${TARGET} ${PUBLIC_KEYWORD} optimized ${FLAG})
+      endif()
+    endif()
+  endforeach()
+endmacro()
+
+# Internal use only. _PKG_CONFIG_MANIPULATE_LDFLAGS(TARGET PREFIX CONFIG
+# IS_GENERAL IS_DEBUG)
+#
+macro(_PKG_CONFIG_MANIPULATE_LDFLAGS TARGET PREFIX CONFIG IS_GENERAL IS_DEBUG)
   # Make sure we do not override previous flags
-  GET_TARGET_PROPERTY(LDFLAGS ${TARGET} LINK_FLAGS${CONFIG})
+  get_target_property(LDFLAGS ${TARGET} LINK_FLAGS${CONFIG})
 
-  # If there were no previous flags, get rid of the XYFLAGS-NOTFOUND
-  # in the variables.
-  IF(NOT LDFLAGS)
-    SET(LDFLAGS "")
-  ENDIF()
+  # If there were no previous flags, get rid of the XYFLAGS-NOTFOUND in the
+  # variables.
+  if(NOT LDFLAGS)
+    set(LDFLAGS "")
+  endif()
 
   # Transform semi-colon seperated list in to space separated list.
-  FOREACH(FLAG ${${PREFIX}_LDFLAGS})
-    SET(LDFLAGS "${LDFLAGS} ${FLAG}")
-  ENDFOREACH()
+  foreach(FLAG ${${PREFIX}_LDFLAGS})
+    set(LDFLAGS "${LDFLAGS} ${FLAG}")
+  endforeach()
 
   # Update the flags.
-  SET_TARGET_PROPERTIES(${TARGET}
-    PROPERTIES LINK_FLAGS${CONFIG} "${LDFLAGS}")
-  _FILTER_LINK_FLAGS(${TARGET} ${IS_GENERAL} ${IS_DEBUG} "${${PREFIX}_LDFLAGS}")
-  _FILTER_LINK_FLAGS(${TARGET} ${IS_GENERAL} ${IS_DEBUG} "${${PREFIX}_LDFLAGS_OTHER}")
-ENDMACRO(_PKG_CONFIG_MANIPULATE_LDFLAGS TARGET PREFIX CONFIG IS_GENERAL IS_DEBUG)
-
-# Internal use only.
-# PKG_CONFIG_USE_LLINK_DEPENDENCY(TARGET DEPENDENCY)
+  set_target_properties(${TARGET} PROPERTIES LINK_FLAGS${CONFIG} "${LDFLAGS}")
+  _filter_link_flags(${TARGET} ${IS_GENERAL} ${IS_DEBUG} "${${PREFIX}_LDFLAGS}")
+  _filter_link_flags(${TARGET} ${IS_GENERAL} ${IS_DEBUG}
+                     "${${PREFIX}_LDFLAGS_OTHER}")
+endmacro(
+  _PKG_CONFIG_MANIPULATE_LDFLAGS
+  TARGET
+  PREFIX
+  CONFIG
+  IS_GENERAL
+  IS_DEBUG)
+
+# Internal use only. PKG_CONFIG_USE_LLINK_DEPENDENCY(TARGET DEPENDENCY)
 # --------------------------------------------
 #
 # For user look at PKG_CONFIG_USE_LINK_DEPENDENCY
 #
-# This macro changes the target properties to properly search for
-# the required shared libraries
-# when using a dependency detected through pkg-config.
+# This macro changes the target properties to properly search for the required
+# shared libraries when using a dependency detected through pkg-config.
 #
 # I.e. PKG_CONFIG_USE_LLINK_DEPENDENCY(my-binary my-package)
 #
-MACRO(PKG_CONFIG_USE_LLINK_DEPENDENCY TARGET PREFIX)
+macro(PKG_CONFIG_USE_LLINK_DEPENDENCY TARGET PREFIX)
 
-  IF(NOT DEFINED ${PREFIX}_DEBUG_FOUND)
-    _PKG_CONFIG_MANIPULATE_LDFLAGS(${TARGET} ${PREFIX} "" 1 0)
-  ELSE()
+  if(NOT DEFINED ${PREFIX}_DEBUG_FOUND)
+    _pkg_config_manipulate_ldflags(${TARGET} ${PREFIX} "" 1 0)
+  else()
     # Single build type generators
-    IF(DEFINED CMAKE_BUILD_TYPE)
-      STRING(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
-      IF("${cmake_build_type}" MATCHES "debug")
-        _PKG_CONFIG_MANIPULATE_LDFLAGS(${TARGET} "${PREFIX}_DEBUG" "" 1 0)
-      ELSE()
-        _PKG_CONFIG_MANIPULATE_LDFLAGS(${TARGET} ${PREFIX} "" 1 0)
-      ENDIF()
-    # Multiple build types generators
-    ELSE()
-      FOREACH(config ${CMAKE_CONFIGURATION_TYPES})
-        STRING(TOUPPER "_${config}" config_in)
-        IF(${config_in} MATCHES "_DEBUG")
-          _PKG_CONFIG_MANIPULATE_LDFLAGS(${TARGET} "${PREFIX}_DEBUG" "${config_in}" 0 1)
-        ELSE()
-          _PKG_CONFIG_MANIPULATE_LDFLAGS(${TARGET} "${PREFIX}" "${config_in}" 0 0)
-        ENDIF()
-      ENDFOREACH()
-    ENDIF()
-  ENDIF()
-
-  # Include/libraries paths seems to be filtered on Linux, add paths
-  # again.
-  LINK_DIRECTORIES(${${PREFIX}_LIBRARY_DIRS})
-  IF(DEFINED ${PREFIX}_DEBUG_FOUND)
-    LINK_DIRECTORIES(${${PREFIX}_DEBUG_LIBRARY_DIRS})
-  ENDIF()
-
-ENDMACRO(PKG_CONFIG_USE_LLINK_DEPENDENCY)
-
-MACRO(BUILD_PREFIX_FOR_PKG DEPENDENCY PREFIX)
-
-  # Transform the dependency into a valid variable prefix.
-  # 1. replace invalid characters into underscores.
-  STRING(REGEX REPLACE "[^a-zA-Z0-9]" "_" LPREFIX "${DEPENDENCY}")
-  # 2. make it uppercase.
-  STRING(TOUPPER "${LPREFIX}" "LPREFIX")
+    if(DEFINED CMAKE_BUILD_TYPE)
+      string(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
+      if("${cmake_build_type}" MATCHES "debug")
+        _pkg_config_manipulate_ldflags(${TARGET} "${PREFIX}_DEBUG" "" 1 0)
+      else()
+        _pkg_config_manipulate_ldflags(${TARGET} ${PREFIX} "" 1 0)
+      endif()
+      # Multiple build types generators
+    else()
+      foreach(config ${CMAKE_CONFIGURATION_TYPES})
+        string(TOUPPER "_${config}" config_in)
+        if(${config_in} MATCHES "_DEBUG")
+          _pkg_config_manipulate_ldflags(${TARGET} "${PREFIX}_DEBUG"
+                                         "${config_in}" 0 1)
+        else()
+          _pkg_config_manipulate_ldflags(${TARGET} "${PREFIX}" "${config_in}" 0
+                                         0)
+        endif()
+      endforeach()
+    endif()
+  endif()
+
+  # Include/libraries paths seems to be filtered on Linux, add paths again.
+  link_directories(${${PREFIX}_LIBRARY_DIRS})
+  if(DEFINED ${PREFIX}_DEBUG_FOUND)
+    link_directories(${${PREFIX}_DEBUG_LIBRARY_DIRS})
+  endif()
+
+endmacro(PKG_CONFIG_USE_LLINK_DEPENDENCY)
+
+macro(BUILD_PREFIX_FOR_PKG DEPENDENCY PREFIX)
+
+  # Transform the dependency into a valid variable prefix. 1. replace invalid
+  # characters into underscores.
+  string(REGEX REPLACE "[^a-zA-Z0-9]" "_" LPREFIX "${DEPENDENCY}")
+  # 1. make it uppercase.
+  string(TOUPPER "${LPREFIX}" "LPREFIX")
 
   # Make sure we search for a previously detected package.
-  IF(NOT DEFINED ${LPREFIX}_FOUND)
-    MESSAGE(FATAL_ERROR
-      "The package ${DEPENDENCY} has not been detected correctly.\n"
-      "Have you called ADD_REQUIRED_DEPENDENCY/ADD_OPTIONAL_DEPENDENCY?")
-  ENDIF()
-  IF(NOT (${LPREFIX}_FOUND OR ${LPREFIX}_DEBUG_FOUND))
-    MESSAGE(FATAL_ERROR
-      "The package ${DEPENDENCY} has not been found.")
-  ENDIF()
+  if(NOT DEFINED ${LPREFIX}_FOUND)
+    message(
+      FATAL_ERROR
+        "The package ${DEPENDENCY} has not been detected correctly.\n"
+        "Have you called ADD_REQUIRED_DEPENDENCY/ADD_OPTIONAL_DEPENDENCY?")
+  endif()
+  if(NOT (${LPREFIX}_FOUND OR ${LPREFIX}_DEBUG_FOUND))
+    message(FATAL_ERROR "The package ${DEPENDENCY} has not been found.")
+  endif()
 
-  SET(${PREFIX} ${LPREFIX})
+  set(${PREFIX} ${LPREFIX})
 
-ENDMACRO(BUILD_PREFIX_FOR_PKG)
+endmacro(BUILD_PREFIX_FOR_PKG)
 
-#.rst:
-# .. ifmode:: import
+# .rst: .. ifmode:: import
 #
-#   .. command:: PKG_CONFIG_USE_DEPENDENCY (TARGET DEPENDENCY [NO_INCLUDE_SYSTEM])
+# .. command:: PKG_CONFIG_USE_DEPENDENCY (TARGET DEPENDENCY [NO_INCLUDE_SYSTEM])
 #
-#     This macro changes the target properties to properly search for
-#     headers, libraries and link against the required shared libraries
-#     when using a dependency detected through pkg-config.
-#     I.e.::
+# This macro changes the target properties to properly search for headers,
+# libraries and link against the required shared libraries when using a
+# dependency detected through pkg-config. I.e.::
 #
-#       PKG_CONFIG_USE_DEPENDENCY(my-binary my-package)
+# PKG_CONFIG_USE_DEPENDENCY(my-binary my-package)
 #
-#     :TARGET: Target that will be manipulated by this macro
+# :TARGET: Target that will be manipulated by this macro
 #
-#     :DEPENDENCY: Dependency that will be used
+# :DEPENDENCY: Dependency that will be used
 #
-#     :NO_INCLUDE_SYSTEM: By default, includes are using the SYSTEM option,
-#                         this option changes this behaviour
+# :NO_INCLUDE_SYSTEM: By default, includes are using the SYSTEM option, this
+# option changes this behaviour
 #
 
-MACRO(PKG_CONFIG_USE_DEPENDENCY TARGET DEPENDENCY)
-  SET(options NO_INCLUDE_SYSTEM)
-  SET(oneValueArgs )
-  SET(multiValueArgs )
+macro(PKG_CONFIG_USE_DEPENDENCY TARGET DEPENDENCY)
+  set(options NO_INCLUDE_SYSTEM)
+  set(oneValueArgs)
+  set(multiValueArgs)
   cmake_parse_arguments(PKG_CONFIG_USE_DEPENDENCY "${options}"
-    "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )
-  BUILD_PREFIX_FOR_PKG(${DEPENDENCY} PREFIX)
-  PKG_CONFIG_USE_LCOMPILE_DEPENDENCY(${TARGET} ${PREFIX}
-    ${PKG_CONFIG_USE_DEPENDENCY_NO_INCLUDE_SYSTEM})
-  PKG_CONFIG_USE_LLINK_DEPENDENCY(${TARGET} ${PREFIX})
-ENDMACRO(PKG_CONFIG_USE_DEPENDENCY TARGET DEPENDENCY)
+                        "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
+  build_prefix_for_pkg(${DEPENDENCY} PREFIX)
+  pkg_config_use_lcompile_dependency(
+    ${TARGET} ${PREFIX} ${PKG_CONFIG_USE_DEPENDENCY_NO_INCLUDE_SYSTEM})
+  pkg_config_use_llink_dependency(${TARGET} ${PREFIX})
+endmacro(
+  PKG_CONFIG_USE_DEPENDENCY
+  TARGET
+  DEPENDENCY)
 
-
-#.rst:
-# .. ifmode:: import-advanced
-#
-#   .. command:: PKG_CONFIG_USE_COMPILE_DEPENDENCY (TARGET DEPENDENCY [NO_INCLUDE_SYSTEM])
+# .rst: .. ifmode:: import-advanced
 #
-#     This macro changes the target properties to properly search for
-#     headers  against the required shared libraries
-#     when using a dependency detected through pkg-config.
+# .. command:: PKG_CONFIG_USE_COMPILE_DEPENDENCY (TARGET DEPENDENCY
+# [NO_INCLUDE_SYSTEM])
 #
-#     :TARGET: Target that will be manipulated by this macro
+# This macro changes the target properties to properly search for headers
+# against the required shared libraries when using a dependency detected through
+# pkg-config.
 #
-#     :DEPENDENCY: Dependency that will be used
+# :TARGET: Target that will be manipulated by this macro
 #
-#     :NO_INCLUDE_SYSTEM: By default, includes are using the SYSTEM option,
-#                         this option changes this behaviour
+# :DEPENDENCY: Dependency that will be used
 #
+# :NO_INCLUDE_SYSTEM: By default, includes are using the SYSTEM option, this
+# option changes this behaviour
 #
-MACRO(PKG_CONFIG_USE_COMPILE_DEPENDENCY TARGET DEPENDENCY)
-  SET(options NO_INCLUDE_SYSTEM)
-  SET(oneValueArgs )
-  SET(multiValueArgs )
-  cmake_parse_arguments(PKG_CONFIG_USE_DEPENDENCY
-    "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )
-  BUILD_PREFIX_FOR_PKG(${DEPENDENCY} PREFIX)
-  PKG_CONFIG_USE_LCOMPILE_DEPENDENCY(${TARGET}
-    ${PREFIX}
-    ${PKG_CONFIG_USE_COMPILE_DEPENDENCY_NO_INCLUDE_SYSTEM})
-ENDMACRO(PKG_CONFIG_USE_COMPILE_DEPENDENCY TARGET DEPENDENCY)
+macro(PKG_CONFIG_USE_COMPILE_DEPENDENCY TARGET DEPENDENCY)
+  set(options NO_INCLUDE_SYSTEM)
+  set(oneValueArgs)
+  set(multiValueArgs)
+  cmake_parse_arguments(PKG_CONFIG_USE_DEPENDENCY "${options}"
+                        "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
+  build_prefix_for_pkg(${DEPENDENCY} PREFIX)
+  pkg_config_use_lcompile_dependency(
+    ${TARGET} ${PREFIX} ${PKG_CONFIG_USE_COMPILE_DEPENDENCY_NO_INCLUDE_SYSTEM})
+endmacro(
+  PKG_CONFIG_USE_COMPILE_DEPENDENCY
+  TARGET
+  DEPENDENCY)
 
-#.rst:
-# .. ifmode:: import-advanced
+# .rst: .. ifmode:: import-advanced
 #
-#   .. command:: PKG_CONFIG_USE_LINK_DEPENDENCY (TARGET DEPENDENCY)
+# .. command:: PKG_CONFIG_USE_LINK_DEPENDENCY (TARGET DEPENDENCY)
 #
-#     This macro changes the target properties to properly search for
-#     the required shared libraries
-#     when using a dependency detected through pkg-config.
+# This macro changes the target properties to properly search for the required
+# shared libraries when using a dependency detected through pkg-config.
 #
-MACRO(PKG_CONFIG_USE_LINK_DEPENDENCY TARGET DEPENDENCY)
-  BUILD_PREFIX_FOR_PKG(${DEPENDENCY} PREFIX)
-  PKG_CONFIG_USE_LLINK_DEPENDENCY(${TARGET} ${PREFIX})
-ENDMACRO(PKG_CONFIG_USE_LINK_DEPENDENCY TARGET DEPENDENCY)
-
+macro(PKG_CONFIG_USE_LINK_DEPENDENCY TARGET DEPENDENCY)
+  build_prefix_for_pkg(${DEPENDENCY} PREFIX)
+  pkg_config_use_llink_dependency(${TARGET} ${PREFIX})
+endmacro(
+  PKG_CONFIG_USE_LINK_DEPENDENCY
+  TARGET
+  DEPENDENCY)
 
-#.rst:
-# .. ifmode:: import-advanced
+# .rst: .. ifmode:: import-advanced
 #
-#   .. command:: PKG_CONFIG_ADD_COMPILE_OPTIONS (COMPILE_OPTIONS DEPENDENCY)
+# .. command:: PKG_CONFIG_ADD_COMPILE_OPTIONS (COMPILE_OPTIONS DEPENDENCY)
 #
-#     This macro adds the compile-time options for a given pkg-config
-#     ``DEPENDENCY`` to a given semi-colon-separated list:
-#     ``COMPILE_OPTIONS``. This can be used to provide options to
-#     CUDA_ADD_LIBRARY for instance, since it does not support
-#     SET_TARGET_PROPERTIES...
+# This macro adds the compile-time options for a given pkg-config ``DEPENDENCY``
+# to a given semi-colon-separated list: ``COMPILE_OPTIONS``. This can be used to
+# provide options to CUDA_ADD_LIBRARY for instance, since it does not support
+# SET_TARGET_PROPERTIES...
 #
-MACRO(PKG_CONFIG_ADD_COMPILE_OPTIONS COMPILE_OPTIONS DEPENDENCY)
-  BUILD_PREFIX_FOR_PKG(${DEPENDENCY} PREFIX)
+macro(PKG_CONFIG_ADD_COMPILE_OPTIONS COMPILE_OPTIONS DEPENDENCY)
+  build_prefix_for_pkg(${DEPENDENCY} PREFIX)
 
   # If there were no previous options
-  IF(NOT ${COMPILE_OPTIONS})
-    SET(${COMPILE_OPTIONS} "")
-  ENDIF()
+  if(NOT ${COMPILE_OPTIONS})
+    set(${COMPILE_OPTIONS} "")
+  endif()
 
   # Append flags
-  FOREACH(FLAG ${${PREFIX}_CFLAGS_OTHER})
-    LIST(APPEND COMPILE_OPTIONS "${FLAG}")
-  ENDFOREACH()
-ENDMACRO(PKG_CONFIG_ADD_COMPILE_OPTIONS COMPILE_OPTIONS DEPENDENCY)
+  foreach(FLAG ${${PREFIX}_CFLAGS_OTHER})
+    list(APPEND COMPILE_OPTIONS "${FLAG}")
+  endforeach()
+endmacro(
+  PKG_CONFIG_ADD_COMPILE_OPTIONS
+  COMPILE_OPTIONS
+  DEPENDENCY)
diff --git a/cmake/portability.cmake b/cmake/portability.cmake
index 51b12ce..78b9c63 100644
--- a/cmake/portability.cmake
+++ b/cmake/portability.cmake
@@ -1,28 +1,28 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-##########
+# ##############################################################################
 # README #
-##########
+# ##############################################################################
 #
 # This CMake file implements various substitutes to standard CMake macros and
 # functions in order to simplify them or make them more robust.
 #
-# Indeed, many standard macros/functions interface have changed depending
-# on your CMake version triggering many problems when working with too recent
-# or too old versions of CMake.
+# Indeed, many standard macros/functions interface have changed depending on
+# your CMake version triggering many problems when working with too recent or
+# too old versions of CMake.
 #
 # These macros should be used instead of the CMake one to enhance package
 # robustness.
@@ -32,52 +32,46 @@
 #
 # This wraps CONFIGURE_FILES to provide a cleaner, shorter syntax.
 #
-FUNCTION(CONFIG_FILES)
-  FOREACH(I RANGE 0 ${ARGC})
-    SET(FILE ${ARGV${I}})
-    IF(FILE)
-      CONFIGURE_FILE(
-	${CMAKE_CURRENT_SOURCE_DIR}/${FILE}.in
-	${CMAKE_CURRENT_BINARY_DIR}/${FILE}
-	@ONLY
-	)
-    ENDIF(FILE)
-ENDFOREACH(I RANGE 0 ${ARGC})
-ENDFUNCTION(CONFIG_FILES)
+function(CONFIG_FILES)
+  foreach(I RANGE 0 ${ARGC})
+    set(FILE ${ARGV${I}})
+    if(FILE)
+      configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${FILE}.in
+                     ${CMAKE_CURRENT_BINARY_DIR}/${FILE} @ONLY)
+    endif(FILE)
+  endforeach(I RANGE 0 ${ARGC})
+endfunction(CONFIG_FILES)
 
 # CONFIG_FILES_CMAKE
 # ------------------
 #
 # Same as CONFIG_FILES but with CMake-style template files.
 #
-# Please, prefer the use of CONFIG_FILES to this function as
-# it is safer.
+# Please, prefer the use of CONFIG_FILES to this function as it is safer.
 #
-FUNCTION(CONFIG_FILES_CMAKE)
-  FOREACH(I RANGE 0 ${ARGC})
-    SET(FILE ${ARGV${I}})
-    IF(FILE)
-      CONFIGURE_FILE(
-	${CMAKE_CURRENT_SOURCE_DIR}/${FILE}.cmake
-	${CMAKE_CURRENT_BINARY_DIR}/${FILE}
-	)
-    ENDIF(FILE)
-ENDFOREACH(I RANGE 0 ${ARGC})
-ENDFUNCTION(CONFIG_FILES_CMAKE)
-
+function(CONFIG_FILES_CMAKE)
+  foreach(I RANGE 0 ${ARGC})
+    set(FILE ${ARGV${I}})
+    if(FILE)
+      configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${FILE}.cmake
+                     ${CMAKE_CURRENT_BINARY_DIR}/${FILE})
+    endif(FILE)
+  endforeach(I RANGE 0 ${ARGC})
+endfunction(CONFIG_FILES_CMAKE)
 
 # NORMALIZE_PATH
 # ------------------
 #
 # Convert the windows style path into unix style path.
 #
-# On windows, the folder separator is \, wihch can lead to some issues 
-# because of the appearance of special characters like \p, \n ...
+# On windows, the folder separator is \, wihch can lead to some issues because
+# of the appearance of special characters like \p, \n ...
 #
-FUNCTION(NORMALIZE_PATH mypath)
-  IF(WIN32)
-    STRING(REPLACE "\\" "/" ${mypath} "${${mypath}}")
-	SET(${mypath} ${${mypath}} PARENT_SCOPE)
-  ENDIF(WIN32)
-ENDFUNCTION(NORMALIZE_PATH)
-
+function(NORMALIZE_PATH mypath)
+  if(WIN32)
+    string(REPLACE "\\" "/" ${mypath} "${${mypath}}")
+    set(${mypath}
+        ${${mypath}}
+        PARENT_SCOPE)
+  endif(WIN32)
+endfunction(NORMALIZE_PATH)
diff --git a/cmake/post-project.cmake b/cmake/post-project.cmake
index 734c18c..d2012f2 100644
--- a/cmake/post-project.cmake
+++ b/cmake/post-project.cmake
@@ -1,60 +1,60 @@
 # Restore version information that might have been overriden by project() call
-SET(PROJECT_VERSION "${SAVED_PROJECT_VERSION}")
-SET(PROJECT_VERSION_MAJOR "${SAVED_PROJECT_VERSION_MAJOR}")
-SET(PROJECT_VERSION_MINOR "${SAVED_PROJECT_VERSION_MINOR}")
-SET(PROJECT_VERSION_PATCH "${SAVED_PROJECT_VERSION_PATCH}")
-
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/GNUInstallDirs.cmake)
-SET(CMAKE_INSTALL_FULL_PKGLIBDIR ${CMAKE_INSTALL_FULL_LIBDIR}/${PROJECT_NAME})
-SET(CMAKE_INSTALL_PKGLIBDIR ${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME})
-
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/pkg-config.cmake)
-IF(DEFINED PROJECT_DEBUG_POSTFIX)
-  SET(CMAKE_DEBUG_POSTFIX ${PROJECT_DEBUG_POSTFIX})
-  STRING(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
-  IF(${cmake_build_type} MATCHES debug)
-    SET(PKGCONFIG_POSTFIX ${PROJECT_DEBUG_POSTFIX})
-  ELSE()
-    SET(PKGCONFIG_POSTFIX "")
-  ENDIF()
-  IF(DEFINED CMAKE_CONFIGURATION_TYPES)
-    SET(PKGCONFIG_POSTFIX ${PROJECT_DEBUG_POSTFIX})
-  ENDIF()
-ENDIF()
-
-IF(NOT DEFINED PROJECT_USE_KEYWORD_LINK_LIBRARIES)
-  SET(PROJECT_USE_KEYWORD_LINK_LIBRARIES FALSE)
-ENDIF()
-IF(PROJECT_USE_KEYWORD_LINK_LIBRARIES)
-  SET(PUBLIC_KEYWORD PUBLIC)
-ELSE()
-  SET(PUBLIC_KEYWORD "")
-ENDIF()
-
-IF(${ARGC})
-  SET(CMAKE_VERBOSE_MAKEFILE ${ARGV0})
-ELSE(${ARGC})
+set(PROJECT_VERSION "${SAVED_PROJECT_VERSION}")
+set(PROJECT_VERSION_MAJOR "${SAVED_PROJECT_VERSION_MAJOR}")
+set(PROJECT_VERSION_MINOR "${SAVED_PROJECT_VERSION_MINOR}")
+set(PROJECT_VERSION_PATCH "${SAVED_PROJECT_VERSION_PATCH}")
+
+include(${CMAKE_CURRENT_LIST_DIR}/GNUInstallDirs.cmake)
+set(CMAKE_INSTALL_FULL_PKGLIBDIR ${CMAKE_INSTALL_FULL_LIBDIR}/${PROJECT_NAME})
+set(CMAKE_INSTALL_PKGLIBDIR ${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME})
+
+include(${CMAKE_CURRENT_LIST_DIR}/pkg-config.cmake)
+if(DEFINED PROJECT_DEBUG_POSTFIX)
+  set(CMAKE_DEBUG_POSTFIX ${PROJECT_DEBUG_POSTFIX})
+  string(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type)
+  if(${cmake_build_type} MATCHES debug)
+    set(PKGCONFIG_POSTFIX ${PROJECT_DEBUG_POSTFIX})
+  else()
+    set(PKGCONFIG_POSTFIX "")
+  endif()
+  if(DEFINED CMAKE_CONFIGURATION_TYPES)
+    set(PKGCONFIG_POSTFIX ${PROJECT_DEBUG_POSTFIX})
+  endif()
+endif()
+
+if(NOT DEFINED PROJECT_USE_KEYWORD_LINK_LIBRARIES)
+  set(PROJECT_USE_KEYWORD_LINK_LIBRARIES FALSE)
+endif()
+if(PROJECT_USE_KEYWORD_LINK_LIBRARIES)
+  set(PUBLIC_KEYWORD PUBLIC)
+else()
+  set(PUBLIC_KEYWORD "")
+endif()
+
+if(${ARGC})
+  set(CMAKE_VERBOSE_MAKEFILE ${ARGV0})
+else(${ARGC})
   # Be verbose by default.
-  SET(CMAKE_VERBOSE_MAKEFILE TRUE)
-ENDIF(${ARGC})
-
-OPTION(INSTALL_DOCUMENTATION "Generate and install the documentation" ON)
-OPTION(INSTALL_GENERATED_HEADERS "Generate and install standard headers" ON)
-OPTION(INSTALL_PKG_CONFIG_FILE "Generate and install standard .pc file" ON)
-
-INCLUDE(CTest)
-ENABLE_TESTING()
-
-LOGGING_INITIALIZE()
-
-#FIXME: normalize naming to <MODULE>_SETUP()
-_SETUP_PROJECT_WARNINGS()
-_SETUP_PROJECT_HEADER()
-_SETUP_PROJECT_DIST()
-DISTCHECK_SETUP()
-RELEASE_SETUP()
-_SETUP_PROJECT_DEB()
-_SETUP_PROJECT_UNINSTALL()
-_SETUP_PROJECT_PKG_CONFIG()
-_SETUP_PROJECT_DOCUMENTATION()
-_SETUP_PROJECT_PACKAGE_INIT()
+  set(CMAKE_VERBOSE_MAKEFILE TRUE)
+endif(${ARGC})
+
+option(INSTALL_DOCUMENTATION "Generate and install the documentation" ON)
+option(INSTALL_GENERATED_HEADERS "Generate and install standard headers" ON)
+option(INSTALL_PKG_CONFIG_FILE "Generate and install standard .pc file" ON)
+
+include(CTest)
+enable_testing()
+
+logging_initialize()
+
+# FIXME: normalize naming to <MODULE>_SETUP()
+_setup_project_warnings()
+_setup_project_header()
+_setup_project_dist()
+distcheck_setup()
+release_setup()
+_setup_project_deb()
+_setup_project_uninstall()
+_setup_project_pkg_config()
+_setup_project_documentation()
+_setup_project_package_init()
diff --git a/cmake/pthread.cmake b/cmake/pthread.cmake
index 4af9970..8546af0 100644
--- a/cmake/pthread.cmake
+++ b/cmake/pthread.cmake
@@ -1,45 +1,45 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-INCLUDE(FindThreads)
+include(FindThreads)
 
 # SEARCH_FOR_PTHREAD
 # ------------------
 #
 # Check for pthread support on Linux. This does nothing on Windows.
 #
-MACRO(SEARCH_FOR_PTHREAD)
-  IF(UNIX)
-    IF(CMAKE_USE_PTHREADS_INIT)
-      ADD_DEFINITIONS(-pthread)
-    ELSE(CMAKE_USE_PTHREADS_INIT)
-      MESSAGE(FATAL_ERROR
-	"Pthread is required on Unix, but "
-	${CMAKE_THREAD_LIBS_INIT} " has been detected.")
-    ENDIF(CMAKE_USE_PTHREADS_INIT)
-  ELSEIF(WIN32)
+macro(SEARCH_FOR_PTHREAD)
+  if(UNIX)
+    if(CMAKE_USE_PTHREADS_INIT)
+      add_definitions(-pthread)
+    else(CMAKE_USE_PTHREADS_INIT)
+      message(FATAL_ERROR "Pthread is required on Unix, but "
+                          ${CMAKE_THREAD_LIBS_INIT} " has been detected.")
+    endif(CMAKE_USE_PTHREADS_INIT)
+  elseif(WIN32)
     # Nothing to do.
-  ELSE(UNIX)
-    MESSAGE(FATAL_ERROR "Thread support for this platform is not implemented.")
-  ENDIF(UNIX)
+  else(UNIX)
+    message(FATAL_ERROR "Thread support for this platform is not implemented.")
+  endif(UNIX)
 
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
+  list(
+    APPEND
+    LOGGING_WATCHED_VARIABLES
     CMAKE_THREAD_LIBS_INIT
     CMAKE_USE_SPROC_INIT
     CMAKE_USE_WIN32_THREADS_INIT
     CMAKE_USE_PTHREADS_INIT
-    CMAKE_HP_PTHREADS_INIT
-    )
-ENDMACRO(SEARCH_FOR_PTHREAD)
+    CMAKE_HP_PTHREADS_INIT)
+endmacro(SEARCH_FOR_PTHREAD)
diff --git a/cmake/python.cmake b/cmake/python.cmake
index f3fe31c..6efb51f 100644
--- a/cmake/python.cmake
+++ b/cmake/python.cmake
@@ -1,393 +1,432 @@
 # Copyright (C) 2008-2021 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-
-#.rst:
-# .. command:: FINDPYTHON
-#
-#  Find python interpreter and python libs.
-#  Arguments are passed to the find_package command so
-#  refer to `find_package` documentation to learn about valid arguments.
-#
-#  To specify a specific Python version from the command line,
-#  use the command ``FINDPYTHON()``
-#  and pass the following arguments to CMake
-#  ``-DPYTHON_EXECUTABLE=/usr/bin/python3.5 -DPYTHON_LIBRARY= /usr/lib/x86_64-linux-gnu/libpython3.5m.so.1``
-#
-#  To specify a specific Python version within the CMakeLists.txt,
-#  use the command ``FINDPYTHON(2.7 EXACT REQUIRED)``.
-#
-#  If PYTHON_PACKAGES_DIR is set, then the {dist,site}-packages will be replaced by the value contained in PYTHON_PACKAGES_DIR.
-#
-#  .. warning::
-#    According to the ``FindPythonLibs`` and ``FindPythonInterp``
-#    documentation, you could also set ``Python_ADDITIONAL_VERSIONS``.
-#    If you do this, you will not have an error if you found two different versions
-#    or another version that the requested one.
-#
-
-#.rst:
-# .. variable:: PYTHON_SITELIB
-#
-#  Relative path where Python files will be installed.
-
-#.rst:
-# .. variable:: PYTHON_EXT_SUFFIX
-#
-#  Portable suffix of C++ Python modules.
-
-#.rst:
-# .. variable:: PYTHON_COMPONENTS
-#
-#  Required components for python. Default: "Interpreter Development"
-
-#.rst:
-# .. variable:: PYTHON_EXPORT_DEPENDENCY
-#
-#  Define this to forward the final `find_package` to the exported CMake config.
-#  This is mainly useful for PUBLIC links to Python::Targets, so this setting change nothing
-#  for CMake < 3.12 which doesn't have those.
-#  This also export:
-#     - PYTHON_SITELIB
-#     - PYTHON_SOABI
-#     - PYTHON_EXT_SUFFIX
-#     - PYTHON_EXECUTABLE (dynamic)
-#     - Boost Python if `SEARCH_FOR_BOOST_PYTHON` is called
-
-IF(CMAKE_VERSION VERSION_LESS "3.2")
-    SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/python ${CMAKE_MODULE_PATH})
-    MESSAGE(STATUS "CMake versions older than 3.2 do not properly find Python. Custom macros are used to find it.")
-ENDIF(CMAKE_VERSION VERSION_LESS "3.2")
-
-MACRO(FINDPYTHON)
-  IF(DEFINED FINDPYTHON_ALREADY_CALLED)
-    MESSAGE(AUTHOR_WARNING "Macro FINDPYTHON has already been called. Several call to FINDPYTHON may not find the same Python version (for a yet unknown reason).")
-  ENDIF()
-  SET(FINDPYTHON_ALREADY_CALLED TRUE)
-  IF(NOT PYTHON_COMPONENTS)
-    SET(PYTHON_COMPONENTS Interpreter Development)
-  ENDIF()
-
-  LIST(FIND PYTHON_COMPONENTS "NumPy" _npindex)
-  IF(NOT ${_npindex} EQUAL -1)
-    SET(SEARCH_FOR_NUMPY TRUE)
-  ENDIF()
-
-  IF(CMAKE_VERSION VERSION_LESS "3.18")
-    #IF("Development.Module" IN_LIST PYTHON_COMPONENTS) -- require CMake 3.3
-    LIST(FIND PYTHON_COMPONENTS "Development.Module" _index)
-    IF(NOT ${_index} EQUAL -1)
-      MESSAGE(STATUS "For CMake < 3.18, Development.Module is not available. Falling back to Development")
-      LIST(REMOVE_ITEM PYTHON_COMPONENTS Development.Module)
-      SET(PYTHON_COMPONENTS ${PYTHON_COMPONENTS} Development)
-    ENDIF()
-    IF(CMAKE_VERSION VERSION_LESS "3.14")
-      IF(SEARCH_FOR_NUMPY)
-        MESSAGE(STATUS "For CMake < 3.14, NumPy is not available. Falling back to custom FIND_NUMPY()")
-        LIST(REMOVE_ITEM PYTHON_COMPONENTS NumPy)
-      ENDIF()
-    ENDIF()
-  ENDIF()
-
-
-  IF(NOT CMAKE_VERSION VERSION_LESS "3.12")
-
-    IF(DEFINED PYTHON_EXECUTABLE OR DEFINED Python_EXECUTABLE)
-      IF(NOT DEFINED Python_EXCUTABLE)
-        SET(Python_EXCUTABLE ${PYTHON_EXECUTABLE})
-      ELSE()
-        SET(PYTHON_EXCUTABLE ${Python_EXECUTABLE})
-      ENDIF()
-    ELSE()
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# .rst: .. command:: FINDPYTHON
+#
+# Find python interpreter and python libs. Arguments are passed to the
+# find_package command so refer to `find_package` documentation to learn about
+# valid arguments.
+#
+# To specify a specific Python version from the command line, use the command
+# ``FINDPYTHON()`` and pass the following arguments to CMake
+# ``-DPYTHON_EXECUTABLE=/usr/bin/python3.5 -DPYTHON_LIBRARY=
+# /usr/lib/x86_64-linux-gnu/libpython3.5m.so.1``
+#
+# To specify a specific Python version within the CMakeLists.txt, use the
+# command ``FINDPYTHON(2.7 EXACT REQUIRED)``.
+#
+# If PYTHON_PACKAGES_DIR is set, then the {dist,site}-packages will be replaced
+# by the value contained in PYTHON_PACKAGES_DIR.
+#
+# .. warning:: According to the ``FindPythonLibs`` and ``FindPythonInterp``
+# documentation, you could also set ``Python_ADDITIONAL_VERSIONS``. If you do
+# this, you will not have an error if you found two different versions or
+# another version that the requested one.
+#
+
+# .rst: .. variable:: PYTHON_SITELIB
+#
+# Relative path where Python files will be installed.
+
+# .rst: .. variable:: PYTHON_EXT_SUFFIX
+#
+# Portable suffix of C++ Python modules.
+
+# .rst: .. variable:: PYTHON_COMPONENTS
+#
+# Required components for python. Default: "Interpreter Development"
+
+# .rst: .. variable:: PYTHON_EXPORT_DEPENDENCY
+#
+# Define this to forward the final `find_package` to the exported CMake config.
+# This is mainly useful for PUBLIC links to Python::Targets, so this setting
+# change nothing for CMake < 3.12 which doesn't have those. This also export: -
+# PYTHON_SITELIB - PYTHON_SOABI - PYTHON_EXT_SUFFIX - PYTHON_EXECUTABLE
+# (dynamic) - Boost Python if `SEARCH_FOR_BOOST_PYTHON` is called
+
+if(CMAKE_VERSION VERSION_LESS "3.2")
+  set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/python ${CMAKE_MODULE_PATH})
+  message(
+    STATUS
+      "CMake versions older than 3.2 do not properly find Python. Custom macros are used to find it."
+  )
+endif(CMAKE_VERSION VERSION_LESS "3.2")
+
+macro(FINDPYTHON)
+  if(DEFINED FINDPYTHON_ALREADY_CALLED)
+    message(
+      AUTHOR_WARNING
+        "Macro FINDPYTHON has already been called. Several call to FINDPYTHON may not find the same Python version (for a yet unknown reason)."
+    )
+  endif()
+  set(FINDPYTHON_ALREADY_CALLED TRUE)
+
+  if(PYTHON_EXPORT_DEPENDENCY)
+    install_jrl_cmakemodules_file("python.cmake")
+    set(PYTHON_EXPORT_DEPENDENCY_MACROS "FINDPYTHON()")
+  endif()
+
+  if(NOT PYTHON_COMPONENTS)
+    set(PYTHON_COMPONENTS Interpreter Development)
+  endif()
+
+  list(FIND PYTHON_COMPONENTS "NumPy" _npindex)
+  if(NOT ${_npindex} EQUAL -1)
+    set(SEARCH_FOR_NUMPY TRUE)
+  endif()
+
+  if(CMAKE_VERSION VERSION_LESS "3.18")
+    # IF("Development.Module" IN_LIST PYTHON_COMPONENTS) -- require CMake 3.3
+    list(FIND PYTHON_COMPONENTS "Development.Module" _index)
+    if(NOT ${_index} EQUAL -1)
+      message(
+        STATUS
+          "For CMake < 3.18, Development.Module is not available. Falling back to Development"
+      )
+      list(REMOVE_ITEM PYTHON_COMPONENTS Development.Module)
+      set(PYTHON_COMPONENTS ${PYTHON_COMPONENTS} Development)
+    endif()
+    if(CMAKE_VERSION VERSION_LESS "3.14")
+      if(SEARCH_FOR_NUMPY)
+        message(
+          STATUS
+            "For CMake < 3.14, NumPy is not available. Falling back to custom FIND_NUMPY()"
+        )
+        list(REMOVE_ITEM PYTHON_COMPONENTS NumPy)
+      endif()
+    endif()
+  endif()
+
+  if(NOT CMAKE_VERSION VERSION_LESS "3.12")
+
+    if(DEFINED PYTHON_EXECUTABLE
+       OR DEFINED Python_EXECUTABLE
+       OR DEFINED Python2_EXECUTABLE
+       OR DEFINED Python3_EXECUTABLE)
+
+      if(NOT DEFINED PYTHON_EXECUTABLE)
+        if(DEFINED Python_EXECUTABLE)
+          set(PYTHON_EXECUTABLE ${Python_EXECUTABLE})
+        elseif(DEFINED Python2_EXECUTABLE)
+          set(PYTHON_EXECUTABLE ${Python2_EXECUTABLE})
+        elseif(DEFINED Python3_EXECUTABLE)
+          set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
+        endif()
+      endif()
+
+      if(NOT DEFINED Python_EXCUTABLE)
+        set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
+      endif()
+    else()
       # Search for the default python of the system, if exists
-      FIND_PROGRAM(PYTHON_EXECUTABLE python)
-    ENDIF()
-
-    IF(PYTHON_EXECUTABLE)
-      IF(NOT EXISTS ${PYTHON_EXECUTABLE})
-        MESSAGE(FATAL_ERROR "${PYTHON_EXECUTABLE} is not a valid path to the Python executable")
-      ENDIF()
-      EXECUTE_PROCESS(
+      find_program(PYTHON_EXECUTABLE python)
+    endif()
+
+    if(PYTHON_EXECUTABLE)
+      if(NOT EXISTS ${PYTHON_EXECUTABLE})
+        message(
+          FATAL_ERROR
+            "${PYTHON_EXECUTABLE} is not a valid path to the Python executable")
+      endif()
+      execute_process(
         COMMAND ${PYTHON_EXECUTABLE} --version
         WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
         RESULT_VARIABLE _PYTHON_VERSION_RESULT_VARIABLE
         OUTPUT_VARIABLE _PYTHON_VERSION_OUTPUT
         ERROR_VARIABLE _PYTHON_VERSION_OUTPUT
-        OUTPUT_STRIP_TRAILING_WHITESPACE
-        ERROR_STRIP_TRAILING_WHITESPACE
-        )
+        OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE)
 
       # Provide some hints according to the current PYTHON_EXECUTABLE
       if(NOT DEFINED PYTHON_INCLUDE_DIR)
-        EXECUTE_PROCESS(
-          COMMAND "${PYTHON_EXECUTABLE}" "-c"
-          "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
+        execute_process(
+          COMMAND
+            "${PYTHON_EXECUTABLE}" "-c"
+            "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
           OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
           ERROR_QUIET)
-        STRING(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
-        FILE(TO_CMAKE_PATH "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
+        string(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
+        file(TO_CMAKE_PATH "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
       endif()
 
-      IF(NOT "${_PYTHON_VERSION_RESULT_VARIABLE}" STREQUAL "0")
-        MESSAGE(FATAL_ERROR "${PYTHON_EXECUTABLE} --version did not succeed.")
-      ENDIF(NOT "${_PYTHON_VERSION_RESULT_VARIABLE}" STREQUAL "0")
-      STRING(REGEX REPLACE "Python " "" _PYTHON_VERSION ${_PYTHON_VERSION_OUTPUT})
-      STRING(REGEX REPLACE "\\." ";" _PYTHON_VERSION ${_PYTHON_VERSION})
-      LIST(GET _PYTHON_VERSION 0 _PYTHON_VERSION_MAJOR)
+      if(NOT "${_PYTHON_VERSION_RESULT_VARIABLE}" STREQUAL "0")
+        message(FATAL_ERROR "${PYTHON_EXECUTABLE} --version did not succeed.")
+      endif(NOT "${_PYTHON_VERSION_RESULT_VARIABLE}" STREQUAL "0")
+      string(REGEX REPLACE "Python " "" _PYTHON_VERSION
+                           ${_PYTHON_VERSION_OUTPUT})
+      string(REGEX REPLACE "\\." ";" _PYTHON_VERSION ${_PYTHON_VERSION})
+      list(GET _PYTHON_VERSION 0 _PYTHON_VERSION_MAJOR)
 
       # Hint for finding the right Python version
-      SET(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
-      SET(Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE ${PYTHON_EXECUTABLE})
-      SET(Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIR ${PYTHON_INCLUDE_DIR})
-
-      IF(PYTHON_EXPORT_DEPENDENCY)
-        ADD_PROJECT_DEPENDENCY("Python${_PYTHON_VERSION_MAJOR}" REQUIRED COMPONENTS ${PYTHON_COMPONENTS})
-      ELSE()
-        FIND_PACKAGE("Python${_PYTHON_VERSION_MAJOR}" REQUIRED COMPONENTS ${PYTHON_COMPONENTS})
-      ENDIF()
-    ELSE()
-      # No hint was provided. We can then check for first Python 2, then Python 3
-      FIND_PACKAGE(Python2 QUIET COMPONENTS ${PYTHON_COMPONENTS})
-      IF(NOT Python2_FOUND)
-        FIND_PACKAGE(Python3 QUIET COMPONENTS ${PYTHON_COMPONENTS})
-        IF(NOT Python3_FOUND)
-          MESSAGE(FATAL_ERROR "Python executable has not been found.")
-        ELSE()
-          SET(_PYTHON_VERSION_MAJOR 3)
-          IF(PYTHON_EXPORT_DEPENDENCY)
-            ADD_PROJECT_DEPENDENCY(Python3 REQUIRED COMPONENTS ${PYTHON_COMPONENTS})
-          ENDIF()
-        ENDIF(NOT Python3_FOUND)
-      ELSE()
-        SET(_PYTHON_VERSION_MAJOR 2)
-        IF(PYTHON_EXPORT_DEPENDENCY)
-          ADD_PROJECT_DEPENDENCY(Python2 REQUIRED COMPONENTS ${PYTHON_COMPONENTS})
-        ENDIF()
-      ENDIF(NOT Python2_FOUND)
-    ENDIF(PYTHON_EXECUTABLE)
-
-    SET(_PYTHON_PREFIX "Python${_PYTHON_VERSION_MAJOR}")
-
-    IF(${_PYTHON_PREFIX}_FOUND)
-      SET(PYTHON_EXECUTABLE          ${${_PYTHON_PREFIX}_EXECUTABLE})
-      SET(PYTHON_LIBRARY             ${${_PYTHON_PREFIX}_LIBRARIES})
-      SET(PYTHON_LIBRARIES           ${${_PYTHON_PREFIX}_LIBRARIES})
-      SET(PYTHON_INCLUDE_DIR         ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
-      SET(PYTHON_INCLUDE_DIRS        ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
-      SET(PYTHON_VERSION_STRING      ${${_PYTHON_PREFIX}_VERSION})
-      SET(PYTHONLIBS_VERSION_STRING  ${${_PYTHON_PREFIX}_VERSION})
-      SET(PYTHON_FOUND               ${${_PYTHON_PREFIX}_FOUND})
-      SET(PYTHONLIBS_FOUND           ${${_PYTHON_PREFIX}_FOUND})
-      SET(PYTHON_VERSION_MAJOR       ${${_PYTHON_PREFIX}_VERSION_MAJOR})
-      SET(PYTHON_VERSION_MINOR       ${${_PYTHON_PREFIX}_VERSION_MINOR})
-      SET(PYTHON_VERSION_PATCH       ${${_PYTHON_PREFIX}_VERSION_PATCH})
-    ELSE()
-      MESSAGE(FATAL_ERROR "Python executable has not been found.")
-    ENDIF()
-
-    IF(SEARCH_FOR_NUMPY)
-      SET(NUMPY_INCLUDE_DIRS "${Python${_PYTHON_VERSION_MAJOR}_NumPy_INCLUDE_DIRS}")
+      set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
+      set(Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE ${PYTHON_EXECUTABLE})
+      set(Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIR ${PYTHON_INCLUDE_DIR})
+
+      find_package("Python${_PYTHON_VERSION_MAJOR}" REQUIRED
+                   COMPONENTS ${PYTHON_COMPONENTS})
+    else()
+      # No hint was provided. We can then check for first Python 2, then Python
+      # 3
+      find_package(Python2 QUIET COMPONENTS ${PYTHON_COMPONENTS})
+      if(NOT Python2_FOUND)
+        find_package(Python3 QUIET COMPONENTS ${PYTHON_COMPONENTS})
+        if(NOT Python3_FOUND)
+          message(FATAL_ERROR "Python executable has not been found.")
+        else()
+          set(_PYTHON_VERSION_MAJOR 3)
+        endif(NOT Python3_FOUND)
+      else()
+        set(_PYTHON_VERSION_MAJOR 2)
+      endif(NOT Python2_FOUND)
+    endif(PYTHON_EXECUTABLE)
+
+    set(_PYTHON_PREFIX "Python${_PYTHON_VERSION_MAJOR}")
+
+    if(${_PYTHON_PREFIX}_FOUND)
+      set(PYTHON_EXECUTABLE ${${_PYTHON_PREFIX}_EXECUTABLE})
+      set(PYTHON_LIBRARY ${${_PYTHON_PREFIX}_LIBRARIES})
+      set(PYTHON_LIBRARIES ${${_PYTHON_PREFIX}_LIBRARIES})
+      set(PYTHON_INCLUDE_DIR ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
+      set(PYTHON_INCLUDE_DIRS ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
+      set(PYTHON_VERSION_STRING ${${_PYTHON_PREFIX}_VERSION})
+      set(PYTHONLIBS_VERSION_STRING ${${_PYTHON_PREFIX}_VERSION})
+      set(PYTHON_FOUND ${${_PYTHON_PREFIX}_FOUND})
+      set(PYTHONLIBS_FOUND ${${_PYTHON_PREFIX}_FOUND})
+      set(PYTHON_VERSION_MAJOR ${${_PYTHON_PREFIX}_VERSION_MAJOR})
+      set(PYTHON_VERSION_MINOR ${${_PYTHON_PREFIX}_VERSION_MINOR})
+      set(PYTHON_VERSION_PATCH ${${_PYTHON_PREFIX}_VERSION_PATCH})
+    else()
+      message(FATAL_ERROR "Python executable has not been found.")
+    endif()
+
+    if(SEARCH_FOR_NUMPY)
+      set(NUMPY_INCLUDE_DIRS
+          "${Python${_PYTHON_VERSION_MAJOR}_NumPy_INCLUDE_DIRS}")
       string(REPLACE "\\" "/" NUMPY_INCLUDE_DIRS "${NUMPY_INCLUDE_DIRS}")
-      FILE(TO_CMAKE_PATH "${NUMPY_INCLUDE_DIRS}" NUMPY_INCLUDE_DIRS)
-    ENDIF()
+      file(TO_CMAKE_PATH "${NUMPY_INCLUDE_DIRS}" NUMPY_INCLUDE_DIRS)
+    endif()
 
-  ELSE(NOT CMAKE_VERSION VERSION_LESS "3.12")
+  else(NOT CMAKE_VERSION VERSION_LESS "3.12")
 
-    FIND_PACKAGE(PythonInterp ${ARGN})
-    IF (NOT ${PYTHONINTERP_FOUND} STREQUAL TRUE)
-      MESSAGE(FATAL_ERROR "Python executable has not been found.")
-    ENDIF (NOT ${PYTHONINTERP_FOUND} STREQUAL TRUE)
-    MESSAGE(STATUS "PythonInterp: ${PYTHON_EXECUTABLE}")
+    find_package(PythonInterp ${ARGN})
+    if(NOT ${PYTHONINTERP_FOUND} STREQUAL TRUE)
+      message(FATAL_ERROR "Python executable has not been found.")
+    endif(NOT ${PYTHONINTERP_FOUND} STREQUAL TRUE)
+    message(STATUS "PythonInterp: ${PYTHON_EXECUTABLE}")
 
     # Set PYTHON_INCLUDE_DIR variables if it is not defined by the user
-    IF(DEFINED PYTHON_EXECUTABLE)
-      # Retrieve the corresponding value of PYTHON_INCLUDE_DIR if it is not defined
-      IF(NOT DEFINED PYTHON_INCLUDE_DIR)
-        EXECUTE_PROCESS(
-          COMMAND "${PYTHON_EXECUTABLE}" "-c"
-          "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
+    if(DEFINED PYTHON_EXECUTABLE)
+      # Retrieve the corresponding value of PYTHON_INCLUDE_DIR if it is not
+      # defined
+      if(NOT DEFINED PYTHON_INCLUDE_DIR)
+        execute_process(
+          COMMAND
+            "${PYTHON_EXECUTABLE}" "-c"
+            "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
           OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
           ERROR_QUIET)
-        STRING(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
-      ENDIF(NOT DEFINED PYTHON_INCLUDE_DIR)
-      SET(PYTHON_INCLUDE_DIRS ${PYTHON_INCLUDE_DIR})
+        string(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
+      endif(NOT DEFINED PYTHON_INCLUDE_DIR)
+      set(PYTHON_INCLUDE_DIRS ${PYTHON_INCLUDE_DIR})
 
-    ENDIF(DEFINED PYTHON_EXECUTABLE)
+    endif(DEFINED PYTHON_EXECUTABLE)
 
     # Inform PythonLibs of the required version of PythonInterp
-    SET(PYTHONLIBS_VERSION_STRING ${PYTHON_VERSION_STRING})
-
-    FIND_PACKAGE(PythonLibs ${ARGN})
-    MESSAGE(STATUS "PythonLibraries: ${PYTHON_LIBRARIES}")
-    IF (NOT ${PYTHONLIBS_FOUND} STREQUAL TRUE)
-       MESSAGE(FATAL_ERROR "Python has not been found.")
-    ENDIF (NOT ${PYTHONLIBS_FOUND} STREQUAL TRUE)
-
-    STRING(REPLACE "." ";" _PYTHONLIBS_VERSION ${PYTHONLIBS_VERSION_STRING})
-    LIST(GET _PYTHONLIBS_VERSION 0 PYTHONLIBS_VERSION_MAJOR)
-    LIST(GET _PYTHONLIBS_VERSION 1 PYTHONLIBS_VERSION_MINOR)
-
-    IF (NOT ${PYTHON_VERSION_MAJOR} EQUAL ${PYTHONLIBS_VERSION_MAJOR} OR
-        NOT ${PYTHON_VERSION_MINOR} EQUAL ${PYTHONLIBS_VERSION_MINOR})
-      MESSAGE(FATAL_ERROR "Python interpreter and libraries are in different version: ${PYTHON_VERSION_STRING} vs ${PYTHONLIBS_VERSION_STRING}")
-    ENDIF (NOT ${PYTHON_VERSION_MAJOR} EQUAL ${PYTHONLIBS_VERSION_MAJOR} OR
-           NOT ${PYTHON_VERSION_MINOR} EQUAL ${PYTHONLIBS_VERSION_MINOR})
+    set(PYTHONLIBS_VERSION_STRING ${PYTHON_VERSION_STRING})
+
+    find_package(PythonLibs ${ARGN})
+    message(STATUS "PythonLibraries: ${PYTHON_LIBRARIES}")
+    if(NOT ${PYTHONLIBS_FOUND} STREQUAL TRUE)
+      message(FATAL_ERROR "Python has not been found.")
+    endif(NOT ${PYTHONLIBS_FOUND} STREQUAL TRUE)
+
+    string(REPLACE "." ";" _PYTHONLIBS_VERSION ${PYTHONLIBS_VERSION_STRING})
+    list(GET _PYTHONLIBS_VERSION 0 PYTHONLIBS_VERSION_MAJOR)
+    list(GET _PYTHONLIBS_VERSION 1 PYTHONLIBS_VERSION_MINOR)
+
+    if(NOT ${PYTHON_VERSION_MAJOR} EQUAL ${PYTHONLIBS_VERSION_MAJOR}
+       OR NOT ${PYTHON_VERSION_MINOR} EQUAL ${PYTHONLIBS_VERSION_MINOR})
+      message(
+        FATAL_ERROR
+          "Python interpreter and libraries are in different version: ${PYTHON_VERSION_STRING} vs ${PYTHONLIBS_VERSION_STRING}"
+      )
+    endif(NOT ${PYTHON_VERSION_MAJOR} EQUAL ${PYTHONLIBS_VERSION_MAJOR}
+          OR NOT ${PYTHON_VERSION_MINOR} EQUAL ${PYTHONLIBS_VERSION_MINOR})
 
-  ENDIF(NOT CMAKE_VERSION VERSION_LESS "3.12")
+  endif(NOT CMAKE_VERSION VERSION_LESS "3.12")
 
   # Find PYTHON_LIBRARY_DIRS
-  GET_FILENAME_COMPONENT(PYTHON_LIBRARY_DIRS "${PYTHON_LIBRARIES}" PATH)
-  MESSAGE(STATUS "PythonLibraryDirs: ${PYTHON_LIBRARY_DIRS}")
-  MESSAGE(STATUS "PythonLibVersionString: ${PYTHONLIBS_VERSION_STRING}")
-
-  IF(PYTHON_SITELIB)
-    FILE(TO_CMAKE_PATH "${PYTHON_SITELIB}" PYTHON_SITELIB)
-  ELSE(PYTHON_SITELIB)
-    # Use either site-packages (default) or dist-packages (Debian packages) directory
-    OPTION(PYTHON_DEB_LAYOUT "Enable Debian-style Python package layout" OFF)
+  get_filename_component(PYTHON_LIBRARY_DIRS "${PYTHON_LIBRARIES}" PATH)
+  message(STATUS "PythonLibraryDirs: ${PYTHON_LIBRARY_DIRS}")
+  message(STATUS "PythonLibVersionString: ${PYTHONLIBS_VERSION_STRING}")
+
+  if(PYTHON_SITELIB)
+    file(TO_CMAKE_PATH "${PYTHON_SITELIB}" PYTHON_SITELIB)
+  else(PYTHON_SITELIB)
+    # Use either site-packages (default) or dist-packages (Debian packages)
+    # directory
+    option(PYTHON_DEB_LAYOUT "Enable Debian-style Python package layout" OFF)
     # ref. https://docs.python.org/3/library/site.html
-    OPTION(PYTHON_STANDARD_LAYOUT "Enable standard Python package layout" OFF)
+    option(PYTHON_STANDARD_LAYOUT "Enable standard Python package layout" OFF)
 
-    IF(PYTHON_STANDARD_LAYOUT)
-      SET(PYTHON_SITELIB_CMD "import sys, os; print(os.sep.join(['lib', 'python' + '.'.join(sys.version.split('.')[:2]), 'site-packages']))")
-    ELSE(PYTHON_STANDARD_LAYOUT)
-      SET(PYTHON_SITELIB_CMD "from distutils import sysconfig; print(sysconfig.get_python_lib(prefix='', plat_specific=False))")
-    ENDIF(PYTHON_STANDARD_LAYOUT)
+    if(PYTHON_STANDARD_LAYOUT)
+      set(PYTHON_SITELIB_CMD
+          "import sys, os; print(os.sep.join(['lib', 'python' + '.'.join(sys.version.split('.')[:2]), 'site-packages']))"
+      )
+    else(PYTHON_STANDARD_LAYOUT)
+      set(PYTHON_SITELIB_CMD
+          "from distutils import sysconfig; print(sysconfig.get_python_lib(prefix='', plat_specific=False))"
+      )
+    endif(PYTHON_STANDARD_LAYOUT)
 
-    EXECUTE_PROCESS(
-      COMMAND "${PYTHON_EXECUTABLE}" "-c"
-      "${PYTHON_SITELIB_CMD}"
+    execute_process(
+      COMMAND "${PYTHON_EXECUTABLE}" "-c" "${PYTHON_SITELIB_CMD}"
       OUTPUT_VARIABLE PYTHON_SITELIB
-      OUTPUT_STRIP_TRAILING_WHITESPACE
-      ERROR_QUIET)
+      OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
 
     # Keep compatility with former jrl-cmake-modules versions
-    IF(PYTHON_DEB_LAYOUT)
-      STRING(REPLACE "site-packages" "dist-packages" PYTHON_SITELIB "${PYTHON_SITELIB}")
-    ENDIF(PYTHON_DEB_LAYOUT)
-
-    # If PYTHON_PACKAGES_DIR is defined, then force the Python packages directory name
-    IF(PYTHON_PACKAGES_DIR)
-      STRING(REGEX REPLACE "(site-packages|dist-packages)" "${PYTHON_PACKAGES_DIR}" PYTHON_SITELIB "${PYTHON_SITELIB}")
-    ENDIF(PYTHON_PACKAGES_DIR)
-  ENDIF(PYTHON_SITELIB)
-
-  MESSAGE(STATUS "Python site lib: ${PYTHON_SITELIB}")
-  MESSAGE(STATUS "Python include dirs: ${PYTHON_INCLUDE_DIRS}")
-
-  # Get PYTHON_SOABI
-  # We should be in favor of using PYTHON_EXT_SUFFIX in future for better portability.
-  # However we keep it here for backward compatibility.
-  SET(PYTHON_SOABI "")
-  IF(PYTHON_VERSION_MAJOR EQUAL 3 AND NOT WIN32)
-    EXECUTE_PROCESS(
-      COMMAND "${PYTHON_EXECUTABLE}" "-c"
-      "from distutils.sysconfig import get_config_var; print('.' + get_config_var('SOABI'))"
+    if(PYTHON_DEB_LAYOUT)
+      string(REPLACE "site-packages" "dist-packages" PYTHON_SITELIB
+                     "${PYTHON_SITELIB}")
+    endif(PYTHON_DEB_LAYOUT)
+
+    # If PYTHON_PACKAGES_DIR is defined, then force the Python packages
+    # directory name
+    if(PYTHON_PACKAGES_DIR)
+      string(REGEX
+             REPLACE "(site-packages|dist-packages)" "${PYTHON_PACKAGES_DIR}"
+                     PYTHON_SITELIB "${PYTHON_SITELIB}")
+    endif(PYTHON_PACKAGES_DIR)
+  endif(PYTHON_SITELIB)
+
+  message(STATUS "Python site lib: ${PYTHON_SITELIB}")
+  message(STATUS "Python include dirs: ${PYTHON_INCLUDE_DIRS}")
+
+  # Get PYTHON_SOABI We should be in favor of using PYTHON_EXT_SUFFIX in future
+  # for better portability. However we keep it here for backward compatibility.
+  set(PYTHON_SOABI "")
+  if(PYTHON_VERSION_MAJOR EQUAL 3 AND NOT WIN32)
+    execute_process(
+      COMMAND
+        "${PYTHON_EXECUTABLE}" "-c"
+        "from distutils.sysconfig import get_config_var; print('.' + get_config_var('SOABI'))"
       OUTPUT_VARIABLE PYTHON_SOABI)
-    STRING(STRIP ${PYTHON_SOABI} PYTHON_SOABI)
-  ENDIF(PYTHON_VERSION_MAJOR EQUAL 3 AND NOT WIN32)
+    string(STRIP ${PYTHON_SOABI} PYTHON_SOABI)
+  endif(PYTHON_VERSION_MAJOR EQUAL 3 AND NOT WIN32)
 
   # Get PYTHON_EXT_SUFFIX
-  SET(PYTHON_EXT_SUFFIX "")
-  IF(PYTHON_VERSION_MAJOR EQUAL 3)
-    EXECUTE_PROCESS(
-      COMMAND "${PYTHON_EXECUTABLE}" "-c"
-      "from distutils.sysconfig import get_config_var; print(get_config_var('EXT_SUFFIX'))"
+  set(PYTHON_EXT_SUFFIX "")
+  if(PYTHON_VERSION_MAJOR EQUAL 3)
+    execute_process(
+      COMMAND
+        "${PYTHON_EXECUTABLE}" "-c"
+        "from distutils.sysconfig import get_config_var; print(get_config_var('EXT_SUFFIX'))"
       OUTPUT_VARIABLE PYTHON_EXT_SUFFIX)
-    STRING(STRIP ${PYTHON_EXT_SUFFIX} PYTHON_EXT_SUFFIX)
-  ENDIF(PYTHON_VERSION_MAJOR EQUAL 3)
-  IF("${PYTHON_EXT_SUFFIX}" STREQUAL "")
-    IF(WIN32)
-      SET(PYTHON_EXT_SUFFIX ".pyd")
-    ELSE()
-      SET(PYTHON_EXT_SUFFIX ".so")
-    ENDIF()
-  ENDIF()
-
-  # Call FIND_NUMPY if necessary
-  IF(CMAKE_VERSION VERSION_LESS "3.14")
-    IF(SEARCH_FOR_NUMPY)
-      FIND_NUMPY()
-    ENDIF()
-  ENDIF()
-
-  IF(SEARCH_FOR_NUMPY)
-    MESSAGE(STATUS "NumPy include dir: ${NUMPY_INCLUDE_DIRS}")
-    LIST(APPEND NUMPY_INCLUDE_DIRS)
-  ENDIF()
+    string(STRIP ${PYTHON_EXT_SUFFIX} PYTHON_EXT_SUFFIX)
+  endif(PYTHON_VERSION_MAJOR EQUAL 3)
+  if("${PYTHON_EXT_SUFFIX}" STREQUAL "")
+    if(WIN32)
+      set(PYTHON_EXT_SUFFIX ".pyd")
+    else()
+      set(PYTHON_EXT_SUFFIX ".so")
+    endif()
+  endif()
+
+  if(SEARCH_FOR_NUMPY)
+    find_numpy()
+    if(PYTHON_EXPORT_DEPENDENCY)
+      set(PYTHON_EXPORT_DEPENDENCY_MACROS
+          "${PYTHON_EXPORT_DEPENDENCY_MACROS}\nFIND_NUMPY()")
+    endif()
+  endif()
+
+  if(SEARCH_FOR_NUMPY)
+    message(STATUS "NumPy include dir: ${NUMPY_INCLUDE_DIRS}")
+    list(APPEND NUMPY_INCLUDE_DIRS)
+  endif()
 
   # Export required variables
-  IF(PYTHON_EXPORT_DEPENDENCY)
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nset(PYTHON_SITELIB ${PYTHON_SITELIB})")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nset(PYTHON_SOABI ${PYTHON_SOABI})")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nset(PYTHON_EXT_SUFFIX ${PYTHON_EXT_SUFFIX})")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nif(NOT PYTHON_EXECUTABLE)")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n  if(Python_EXECUTABLE)")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n    set(PYTHON_EXECUTABLE \${Python_EXECUTABLE})")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n  elseif(Python3_EXECUTABLE)")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n    set(PYTHON_EXECUTABLE \${Python3_EXECUTABLE})")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n  elseif(Python2_EXECUTABLE)")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n    set(PYTHON_EXECUTABLE \${Python2_EXECUTABLE})")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n  endif()")
-    SET(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nendif()")
-  ENDIF()
+  if(PYTHON_EXPORT_DEPENDENCY)
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\nset(PYTHON_SITELIB ${PYTHON_SITELIB})")
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\nset(PYTHON_SOABI ${PYTHON_SOABI})")
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\nset(PYTHON_EXT_SUFFIX ${PYTHON_EXT_SUFFIX})")
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\nif(NOT PYTHON_EXECUTABLE)")
+    set(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n  if(Python_EXECUTABLE)")
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\n    set(PYTHON_EXECUTABLE \${Python_EXECUTABLE})"
+    )
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\n  elseif(Python3_EXECUTABLE)")
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\n    set(PYTHON_EXECUTABLE \${Python3_EXECUTABLE})"
+    )
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\n  elseif(Python2_EXECUTABLE)")
+    set(PACKAGE_EXTRA_MACROS
+        "${PACKAGE_EXTRA_MACROS}\n    set(PYTHON_EXECUTABLE \${Python2_EXECUTABLE})"
+    )
+    set(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\n  endif()")
+    set(PACKAGE_EXTRA_MACROS "${PACKAGE_EXTRA_MACROS}\nendif()")
+  endif()
 
   # Log Python variables
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
+  list(
+    APPEND
+    LOGGING_WATCHED_VARIABLES
     PYTHONINTERP_FOUND
     PYTHONLIBS_FOUND
     PYTHON_LIBRARY_DIRS
     PYTHONLIBS_VERSION_STRING
     PYTHON_EXECUTABLE
     PYTHON_SOABI
-    PYTHON_EXT_SUFFIX
-    )
+    PYTHON_EXT_SUFFIX)
 
-ENDMACRO(FINDPYTHON)
+endmacro(FINDPYTHON)
 
-
-#.rst:
-# .. command:: DYNAMIC_GRAPH_PYTHON_MODULE ( SUBMODULENAME LIBRARYNAME TARGETNAME INSTALL_INIT_PY=1 SOURCE_PYTHON_MODULE=cmake/dynamic_graph/python-module-py.cc)
+# .rst: .. command:: DYNAMIC_GRAPH_PYTHON_MODULE ( SUBMODULENAME LIBRARYNAME
+# TARGETNAME INSTALL_INIT_PY=1
+# SOURCE_PYTHON_MODULE=cmake/dynamic_graph/python-module-py.cc)
 #
-#   Add a python submodule to dynamic_graph
+# Add a python submodule to dynamic_graph
 #
-#   :param SUBMODULENAME: the name of the submodule (can be foo/bar),
+# :param SUBMODULENAME: the name of the submodule (can be foo/bar),
 #
-#   :param LIBRARYNAME:   library to link the submodule with.
+# :param LIBRARYNAME:   library to link the submodule with.
 #
-#   :param TARGETNAME:     name of the target: should be different for several
-#                   calls to the macro.
+# :param TARGETNAME:     name of the target: should be different for several
+# calls to the macro.
 #
-#   :param INSTALL_INIT_PY: if set to 1 install and generated a __init__.py file.
-#                   Set to 1 by default.
+# :param INSTALL_INIT_PY: if set to 1 install and generated a __init__.py file.
+# Set to 1 by default.
 #
-#   :param SOURCE_PYTHON_MODULE: Location of the cpp file for the python module in the package.
-#                   Set to cmake/dynamic_graph/python-module-py.cc by default.
+# :param SOURCE_PYTHON_MODULE: Location of the cpp file for the python module in
+# the package. Set to cmake/dynamic_graph/python-module-py.cc by default.
 #
-#  .. note::
-#    Before calling this macro, set variable NEW_ENTITY_CLASS as
-#    the list of new Entity types that you want to be bound.
-#    Entity class name should match the name referencing the type
-#    in the factory.
+# .. note:: Before calling this macro, set variable NEW_ENTITY_CLASS as the list
+# of new Entity types that you want to be bound. Entity class name should match
+# the name referencing the type in the factory.
 #
-MACRO(DYNAMIC_GRAPH_PYTHON_MODULE SUBMODULENAME LIBRARYNAME TARGETNAME)
+macro(DYNAMIC_GRAPH_PYTHON_MODULE SUBMODULENAME LIBRARYNAME TARGETNAME)
 
   set(options DONT_INSTALL_INIT_PY)
   set(oneValueArgs SOURCE_PYTHON_MODULE MODULE_HEADER)
-  cmake_parse_arguments(ARG "${options}" "${oneValueArgs}"
-                        "${multiValueArgs}" ${ARGN} )
+  cmake_parse_arguments(ARG "${options}" "${oneValueArgs}" "${multiValueArgs}"
+                        ${ARGN})
 
   # By default the __init__.py file is installed.
   if(NOT DEFINED ARG_SOURCE_PYTHON_MODULE)
@@ -395,199 +434,196 @@ MACRO(DYNAMIC_GRAPH_PYTHON_MODULE SUBMODULENAME LIBRARYNAME TARGETNAME)
     configure_file(
       ${PROJECT_JRL_CMAKE_MODULE_DIR}/dynamic_graph/python-module-py.cc.in
       ${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME}/python-module-py.cc
-      @ONLY
-      )
-    SET(ARG_SOURCE_PYTHON_MODULE "${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME}/python-module-py.cc")
+      @ONLY)
+    set(ARG_SOURCE_PYTHON_MODULE
+        "${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME}/python-module-py.cc"
+    )
   endif()
 
-  IF(NOT DEFINED PYTHONLIBS_FOUND)
-    FINDPYTHON()
-  ELSEIF(NOT ${PYTHONLIBS_FOUND} STREQUAL "TRUE")
-    MESSAGE(FATAL_ERROR "Python has not been found.")
-  ENDIF()
+  if(NOT DEFINED PYTHONLIBS_FOUND)
+    findpython()
+  elseif(NOT ${PYTHONLIBS_FOUND} STREQUAL "TRUE")
+    message(FATAL_ERROR "Python has not been found.")
+  endif()
   if(NOT DEFINED Boost_PYTHON_LIBRARIES)
-    MESSAGE(FATAL_ERROR "Boost Python library must have been found to call this macro.")
+    message(
+      FATAL_ERROR
+        "Boost Python library must have been found to call this macro.")
   endif()
 
-  SET(PYTHON_MODULE ${TARGETNAME})
+  set(PYTHON_MODULE ${TARGETNAME})
 
-  ADD_LIBRARY(${PYTHON_MODULE}
-    MODULE
-    ${ARG_SOURCE_PYTHON_MODULE})
+  add_library(${PYTHON_MODULE} MODULE ${ARG_SOURCE_PYTHON_MODULE})
 
-  FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME})
+  file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME})
 
-  SET(PYTHON_INSTALL_DIR "${PYTHON_SITELIB}/dynamic_graph/${SUBMODULENAME}")
-  STRING(REGEX REPLACE "[^/]+" ".." PYTHON_INSTALL_DIR_REVERSE ${PYTHON_INSTALL_DIR})
+  set(PYTHON_INSTALL_DIR "${PYTHON_SITELIB}/dynamic_graph/${SUBMODULENAME}")
+  string(REGEX REPLACE "[^/]+" ".." PYTHON_INSTALL_DIR_REVERSE
+                       ${PYTHON_INSTALL_DIR})
 
-  SET_TARGET_PROPERTIES(${PYTHON_MODULE}
-    PROPERTIES PREFIX ""
-    OUTPUT_NAME dynamic_graph/${SUBMODULENAME}/wrap
-    BUILD_RPATH "${DYNAMIC_GRAPH_PLUGINDIR}:\$ORIGIN/${PYTHON_INSTALL_DIR_REVERSE}/${DYNAMIC_GRAPH_PLUGINDIR}"
-   )
+  set_target_properties(
+    ${PYTHON_MODULE}
+    PROPERTIES
+      PREFIX ""
+      OUTPUT_NAME dynamic_graph/${SUBMODULENAME}/wrap
+      BUILD_RPATH
+      "${DYNAMIC_GRAPH_PLUGINDIR}:\$ORIGIN/${PYTHON_INSTALL_DIR_REVERSE}/${DYNAMIC_GRAPH_PLUGINDIR}"
+  )
 
-  IF (UNIX AND NOT APPLE)
-    TARGET_LINK_LIBRARIES(${PYTHON_MODULE} ${PUBLIC_KEYWORD} "-Wl,--no-as-needed")
-  ENDIF(UNIX AND NOT APPLE)
-  TARGET_LINK_LIBRARIES(${PYTHON_MODULE} ${PUBLIC_KEYWORD} ${LIBRARYNAME} ${PYTHON_LIBRARY} dynamic-graph::dynamic-graph)
-  TARGET_LINK_BOOST_PYTHON(${PYTHON_MODULE} ${PUBLIC_KEYWORD})
+  if(UNIX AND NOT APPLE)
+    target_link_libraries(${PYTHON_MODULE} ${PUBLIC_KEYWORD}
+                          "-Wl,--no-as-needed")
+  endif(UNIX AND NOT APPLE)
+  target_link_libraries(${PYTHON_MODULE} ${PUBLIC_KEYWORD} ${LIBRARYNAME}
+                        ${PYTHON_LIBRARY} dynamic-graph::dynamic-graph)
+  target_link_boost_python(${PYTHON_MODULE} ${PUBLIC_KEYWORD})
   if(PROJECT_NAME STREQUAL "dynamic-graph-python")
-    TARGET_LINK_LIBRARIES(${PYTHON_MODULE} ${PUBLIC_KEYWORD} dynamic-graph-python)
+    target_link_libraries(${PYTHON_MODULE} ${PUBLIC_KEYWORD}
+                          dynamic-graph-python)
   else()
-    TARGET_LINK_LIBRARIES(${PYTHON_MODULE} ${PUBLIC_KEYWORD} dynamic-graph-python::dynamic-graph-python)
+    target_link_libraries(${PYTHON_MODULE} ${PUBLIC_KEYWORD}
+                          dynamic-graph-python::dynamic-graph-python)
   endif()
 
-  TARGET_INCLUDE_DIRECTORIES(${PYTHON_MODULE} SYSTEM PRIVATE ${PYTHON_INCLUDE_DIRS})
+  target_include_directories(${PYTHON_MODULE} SYSTEM
+                             PRIVATE ${PYTHON_INCLUDE_DIRS})
 
   #
   # Installation
   #
 
-  INSTALL(TARGETS ${PYTHON_MODULE}
-    DESTINATION
-    ${PYTHON_INSTALL_DIR})
+  install(TARGETS ${PYTHON_MODULE} DESTINATION ${PYTHON_INSTALL_DIR})
 
-  SET(ENTITY_CLASS_LIST "")
-  FOREACH (ENTITY ${NEW_ENTITY_CLASS})
-    SET(ENTITY_CLASS_LIST "${ENTITY_CLASS_LIST}${ENTITY}('')\n")
-  ENDFOREACH(ENTITY ${NEW_ENTITY_CLASS})
+  set(ENTITY_CLASS_LIST "")
+  foreach(ENTITY ${NEW_ENTITY_CLASS})
+    set(ENTITY_CLASS_LIST "${ENTITY_CLASS_LIST}${ENTITY}('')\n")
+  endforeach(ENTITY ${NEW_ENTITY_CLASS})
 
   # Install if not DONT_INSTALL_INIT_PY
   if(NOT DONT_INSTALL_INIT_PY)
 
-    CONFIGURE_FILE(
+    configure_file(
       ${PROJECT_JRL_CMAKE_MODULE_DIR}/dynamic_graph/submodule/__init__.py.cmake
-      ${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME}/__init__.py
-      )
+      ${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME}/__init__.py)
 
-    INSTALL(
+    install(
       FILES ${PROJECT_BINARY_DIR}/src/dynamic_graph/${SUBMODULENAME}/__init__.py
-      DESTINATION ${PYTHON_INSTALL_DIR}
-      )
+      DESTINATION ${PYTHON_INSTALL_DIR})
 
   endif()
 
-ENDMACRO(DYNAMIC_GRAPH_PYTHON_MODULE SUBMODULENAME)
-
+endmacro(DYNAMIC_GRAPH_PYTHON_MODULE SUBMODULENAME)
 
-#.rst:
-# .. command::  PYTHON_INSTALL(MODULE FILE DEST)
+# .rst: .. command::  PYTHON_INSTALL(MODULE FILE DEST)
 #
-#  Compile and install a Python file.
+# Compile and install a Python file.
 #
-MACRO(PYTHON_INSTALL MODULE FILE DEST)
+macro(PYTHON_INSTALL MODULE FILE DEST)
 
-  PYTHON_BUILD("${MODULE}" "${FILE}")
+  python_build("${MODULE}" "${FILE}")
 
-  INSTALL(FILES
-    "${CMAKE_CURRENT_SOURCE_DIR}/${MODULE}/${FILE}"
-    DESTINATION "${DEST}/${MODULE}")
-ENDMACRO()
+  install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/${MODULE}/${FILE}"
+          DESTINATION "${DEST}/${MODULE}")
+endmacro()
 
-#.rst:
-# .. command:: PYTHON_INSTALL_ON_SITE (MODULE FILE)
+# .rst: .. command:: PYTHON_INSTALL_ON_SITE (MODULE FILE)
 #
-#  Compile and install a Python file in :cmake:variable:`PYTHON_SITELIB`.
+# Compile and install a Python file in :cmake:variable:`PYTHON_SITELIB`.
 #
-MACRO(PYTHON_INSTALL_ON_SITE MODULE FILE)
+macro(PYTHON_INSTALL_ON_SITE MODULE FILE)
 
-  IF(NOT PYTHON_EXECUTABLE)
-    FINDPYTHON()
-  ENDIF()
+  if(NOT PYTHON_EXECUTABLE)
+    findpython()
+  endif()
 
-  PYTHON_INSTALL("${MODULE}" "${FILE}" ${PYTHON_SITELIB})
+  python_install("${MODULE}" "${FILE}" ${PYTHON_SITELIB})
 
-ENDMACRO()
+endmacro()
 
 # PYTHON_BUILD(MODULE FILE DEST)
 # --------------------------------------
 #
 # Build a Python file from the source directory in the build directory.
 #
-MACRO(PYTHON_BUILD MODULE FILE)
+macro(PYTHON_BUILD MODULE FILE)
   # Regex from IsValidTargetName in CMake/Source/cmGeneratorExpression.cxx
-  STRING(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" compile_pyc "compile_pyc_${CMAKE_CURRENT_SOURCE_DIR}")
-  IF(NOT TARGET ${compile_pyc})
-    ADD_CUSTOM_TARGET(${compile_pyc} ALL)
-  ENDIF()
-  FILE(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}")
+  string(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" compile_pyc
+                       "compile_pyc_${CMAKE_CURRENT_SOURCE_DIR}")
+  if(NOT TARGET ${compile_pyc})
+    add_custom_target(${compile_pyc} ALL)
+  endif()
+  file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}")
 
-  ADD_CUSTOM_COMMAND(
+  add_custom_command(
     TARGET ${compile_pyc}
     PRE_BUILD
     COMMAND
-    "${PYTHON_EXECUTABLE}"
-    "${PROJECT_JRL_CMAKE_MODULE_DIR}/compile.py"
-    "${CMAKE_CURRENT_SOURCE_DIR}"
-    "${CMAKE_CURRENT_BINARY_DIR}"
-    "${MODULE}/${FILE}"
-  )
+      "${PYTHON_EXECUTABLE}" "${PROJECT_JRL_CMAKE_MODULE_DIR}/compile.py"
+      "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_BINARY_DIR}"
+      "${MODULE}/${FILE}")
 
   # Tag pyc file as generated.
-  SET_SOURCE_FILES_PROPERTIES(
-    "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
-    PROPERTIES GENERATED TRUE)
+  set_source_files_properties("${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
+                              PROPERTIES GENERATED TRUE)
 
   # Clean generated files.
-  SET_PROPERTY(
-    DIRECTORY APPEND PROPERTY
-    ADDITIONAL_MAKE_CLEAN_FILES
-    "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
-    )
-ENDMACRO()
+  set_property(
+    DIRECTORY
+    APPEND
+    PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
+             "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c")
+endmacro()
 
 # PYTHON_BUILD_FILE(FILE)
 # --------------------------------------
 #
 # Build a Python a given file.
 #
-MACRO(PYTHON_BUILD_FILE FILE)
+macro(PYTHON_BUILD_FILE FILE)
   # Regex from IsValidTargetName in CMake/Source/cmGeneratorExpression.cxx
-  STRING(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" compile_pyc "compile_pyc_${CMAKE_CURRENT_SOURCE_DIR}")
-  IF(NOT TARGET ${compile_pyc})
-    ADD_CUSTOM_TARGET(${compile_pyc} ALL)
-  ENDIF()
+  string(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" compile_pyc
+                       "compile_pyc_${CMAKE_CURRENT_SOURCE_DIR}")
+  if(NOT TARGET ${compile_pyc})
+    add_custom_target(${compile_pyc} ALL)
+  endif()
 
-  ADD_CUSTOM_COMMAND(
+  add_custom_command(
     TARGET ${compile_pyc}
     PRE_BUILD
-    COMMAND
-    "${PYTHON_EXECUTABLE}"
-    -c "import py_compile; py_compile.compile(\"${FILE}\",\"${FILE}c\")"
-    VERBATIM
-  )
+    COMMAND "${PYTHON_EXECUTABLE}" -c
+            "import py_compile; py_compile.compile(\"${FILE}\",\"${FILE}c\")"
+    VERBATIM)
 
   # Tag pyc file as generated.
-  SET_SOURCE_FILES_PROPERTIES(
-    "${FILE}c"
-    PROPERTIES GENERATED TRUE)
+  set_source_files_properties("${FILE}c" PROPERTIES GENERATED TRUE)
 
   # Clean generated files.
-  SET_PROPERTY(
-    DIRECTORY APPEND PROPERTY
-    ADDITIONAL_MAKE_CLEAN_FILES
-    "${FILE}c"
-    )
-ENDMACRO()
-
-
+  set_property(
+    DIRECTORY
+    APPEND
+    PROPERTY ADDITIONAL_MAKE_CLEAN_FILES "${FILE}c")
+endmacro()
 
 # PYTHON_INSTALL_BUILD(MODULE FILE DEST)
 # --------------------------------------
 #
-# Install a Python file residing in the build directory and its
-# associated compiled version.
+# Install a Python file residing in the build directory and its associated
+# compiled version.
 #
-MACRO(PYTHON_INSTALL_BUILD MODULE FILE DEST)
+macro(PYTHON_INSTALL_BUILD MODULE FILE DEST)
 
-  MESSAGE(AUTHOR_WARNING "PYTHON_INSTALL_BUILD is deprecated and will be removed in the future")
-  MESSAGE(AUTHOR_WARNING "Please use PYTHON_INSTALL_ON_SITE")
-  MESSAGE(AUTHOR_WARNING "ref https://github.com/jrl-umi3218/jrl-cmakemodules/issues/136")
+  message(
+    AUTHOR_WARNING
+      "PYTHON_INSTALL_BUILD is deprecated and will be removed in the future")
+  message(AUTHOR_WARNING "Please use PYTHON_INSTALL_ON_SITE")
+  message(
+    AUTHOR_WARNING
+      "ref https://github.com/jrl-umi3218/jrl-cmakemodules/issues/136")
 
-  FILE(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}")
+  file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}")
 
-  INSTALL(CODE
-    "EXECUTE_PROCESS(COMMAND
+  install(
+    CODE "EXECUTE_PROCESS(COMMAND
     \"${PYTHON_EXECUTABLE}\"
     \"${PROJECT_JRL_CMAKE_MODULE_DIR}/compile.py\"
     \"${CMAKE_CURRENT_BINARY_DIR}\"
@@ -596,56 +632,54 @@ MACRO(PYTHON_INSTALL_BUILD MODULE FILE DEST)
     ")
 
   # Tag pyc file as generated.
-  SET_SOURCE_FILES_PROPERTIES(
-    "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
-    PROPERTIES GENERATED TRUE)
+  set_source_files_properties("${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
+                              PROPERTIES GENERATED TRUE)
 
   # Clean generated files.
-  SET_PROPERTY(
-    DIRECTORY APPEND PROPERTY
-    ADDITIONAL_MAKE_CLEAN_FILES
-    "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
-    )
+  set_property(
+    DIRECTORY
+    APPEND
+    PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
+             "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c")
 
-  INSTALL(FILES
-    "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}"
-    "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
-    DESTINATION "${DEST}/${MODULE}")
-ENDMACRO()
+  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}"
+                "${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/${FILE}c"
+          DESTINATION "${DEST}/${MODULE}")
+endmacro()
 
-#.rst:
-# .. command:: FIND_NUMPY()
+# .rst: .. command:: FIND_NUMPY()
 #
-#   Detect numpy module and define the variable NUMPY_INCLUDE_DIRS if it is not already set.
+# Detect numpy module and define the variable NUMPY_INCLUDE_DIRS if it is not
+# already set.
 #
 
-MACRO(FIND_NUMPY)
+macro(FIND_NUMPY)
   # Detect numpy.
-  MESSAGE (STATUS "checking for numpy")
-  EXECUTE_PROCESS(
+  message(STATUS "checking for numpy")
+  execute_process(
     COMMAND "${PYTHON_EXECUTABLE}" "-c" "import numpy; print (True)"
     OUTPUT_VARIABLE IS_NUMPY
     ERROR_QUIET)
-  IF (NOT IS_NUMPY)
-    MESSAGE (FATAL_ERROR "Failed to detect numpy")
-  ELSE ()
-    IF(NOT NUMPY_INCLUDE_DIRS)
-      EXECUTE_PROCESS(
+  if(NOT IS_NUMPY)
+    message(FATAL_ERROR "Failed to detect numpy")
+  else()
+    if(NOT NUMPY_INCLUDE_DIRS)
+      execute_process(
         COMMAND "${PYTHON_EXECUTABLE}" "-c"
-        "import numpy; print (numpy.get_include())"
+                "import numpy; print (numpy.get_include())"
         OUTPUT_VARIABLE NUMPY_INCLUDE_DIRS
         ERROR_QUIET)
-      STRING(REGEX REPLACE "\n$" "" NUMPY_INCLUDE_DIRS "${NUMPY_INCLUDE_DIRS}")
-      FILE(TO_CMAKE_PATH "${NUMPY_INCLUDE_DIRS}" NUMPY_INCLUDE_DIRS)
-    ENDIF()
-    MESSAGE(STATUS "  NUMPY_INCLUDE_DIRS=${NUMPY_INCLUDE_DIRS}")
+      string(REGEX REPLACE "\n$" "" NUMPY_INCLUDE_DIRS "${NUMPY_INCLUDE_DIRS}")
+      file(TO_CMAKE_PATH "${NUMPY_INCLUDE_DIRS}" NUMPY_INCLUDE_DIRS)
+    endif()
+    message(STATUS "  NUMPY_INCLUDE_DIRS=${NUMPY_INCLUDE_DIRS}")
     # Retrive NUMPY_VERSION
-    EXECUTE_PROCESS(
+    execute_process(
       COMMAND "${PYTHON_EXECUTABLE}" "-c"
-      "import numpy; print (numpy.__version__)"
+              "import numpy; print (numpy.__version__)"
       OUTPUT_VARIABLE NUMPY_VERSION
       ERROR_QUIET)
-    STRING(REGEX REPLACE "\n$" "" NUMPY_VERSION "${NUMPY_VERSION}")
-    MESSAGE(STATUS "  NUMPY_VERSION=${NUMPY_VERSION}")
-  ENDIF()
-ENDMACRO()
+    string(REGEX REPLACE "\n$" "" NUMPY_VERSION "${NUMPY_VERSION}")
+    message(STATUS "  NUMPY_VERSION=${NUMPY_VERSION}")
+  endif()
+endmacro()
diff --git a/cmake/qhull.cmake b/cmake/qhull.cmake
index 74455b1..4ae857f 100644
--- a/cmake/qhull.cmake
+++ b/cmake/qhull.cmake
@@ -1,11 +1,10 @@
-###############################################################################
+# ##############################################################################
 # Find Qhull
 #
-# This sets the following variables:
-# QHULL_FOUND - True if Qhull was found.
+# This sets the following variables: QHULL_FOUND - True if Qhull was found.
 # QHULL_INCLUDE_DIRS - Directories containing the Qhull include files.
-# QHULL_LIBRARIES - Libraries needed to use Qhull.
-# QHULL_LIBRARY_DIR - Directory containing Qhull libraries.
+# QHULL_LIBRARIES - Libraries needed to use Qhull. QHULL_LIBRARY_DIR - Directory
+# containing Qhull libraries.
 
 # SEARCH_FOR_QHULL
 # -----------------
@@ -14,65 +13,80 @@
 #
 # This macro adds detected flags to the pkg-config file automatically.
 #
-MACRO(SEARCH_FOR_QHULL)
+macro(SEARCH_FOR_QHULL)
 
   set(QHULL_MAJOR_VERSION 6)
 
-  find_file(QHULL_HEADER
-            NAMES libqhull/libqhull.h qhull.h
-            HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}" "${QHULL_INCLUDE_DIR}"
-            PATHS "$ENV{PROGRAMFILES}/QHull" "$ENV{PROGRAMW6432}/QHull"
-                  "$ENV{PROGRAMFILES}/qhull 6.2.0.1373" "$ENV{PROGRAMW6432}/qhull 6.2.0.1373"
-            PATH_SUFFIXES qhull src/libqhull libqhull include)
+  find_file(
+    QHULL_HEADER
+    NAMES libqhull/libqhull.h qhull.h
+    HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}" "${QHULL_INCLUDE_DIR}"
+    PATHS "$ENV{PROGRAMFILES}/QHull" "$ENV{PROGRAMW6432}/QHull"
+          "$ENV{PROGRAMFILES}/qhull 6.2.0.1373"
+          "$ENV{PROGRAMW6432}/qhull 6.2.0.1373"
+    PATH_SUFFIXES qhull src/libqhull libqhull include)
 
-  set(QHULL_HEADER "${QHULL_HEADER}" CACHE INTERNAL "QHull header" FORCE )
+  set(QHULL_HEADER
+      "${QHULL_HEADER}"
+      CACHE INTERNAL "QHull header" FORCE)
 
   if(QHULL_HEADER)
-      get_filename_component(qhull_header ${QHULL_HEADER} NAME_WE)
-      if("${qhull_header}" STREQUAL "qhull")
-          set(HAVE_QHULL_2011 OFF)
-          get_filename_component(QHULL_INCLUDE_DIR ${QHULL_HEADER} PATH)
-      elseif("${qhull_header}" STREQUAL "libqhull")
-          set(HAVE_QHULL_2011 ON)
-          get_filename_component(QHULL_INCLUDE_DIR ${QHULL_HEADER} PATH)
-          get_filename_component(QHULL_INCLUDE_DIR ${QHULL_INCLUDE_DIR} PATH)
-      endif()
+    get_filename_component(qhull_header ${QHULL_HEADER} NAME_WE)
+    if("${qhull_header}" STREQUAL "qhull")
+      set(HAVE_QHULL_2011 OFF)
+      get_filename_component(QHULL_INCLUDE_DIR ${QHULL_HEADER} PATH)
+    elseif("${qhull_header}" STREQUAL "libqhull")
+      set(HAVE_QHULL_2011 ON)
+      get_filename_component(QHULL_INCLUDE_DIR ${QHULL_HEADER} PATH)
+      get_filename_component(QHULL_INCLUDE_DIR ${QHULL_INCLUDE_DIR} PATH)
+    endif()
   else(QHULL_HEADER)
-      set(QHULL_INCLUDE_DIR "QHULL_INCLUDE_DIR-NOTFOUND")
+    set(QHULL_INCLUDE_DIR "QHULL_INCLUDE_DIR-NOTFOUND")
   endif(QHULL_HEADER)
 
-  set(QHULL_INCLUDE_DIR "${QHULL_INCLUDE_DIR}" CACHE PATH "QHull include dir." FORCE)
+  set(QHULL_INCLUDE_DIR
+      "${QHULL_INCLUDE_DIR}"
+      CACHE PATH "QHull include dir." FORCE)
 
   # Prefer static libraries in Windows over shared ones
   if(WIN32)
-    find_library(QHULL_LIBRARY
-                 NAMES qhullstatic qhull qhull${QHULL_MAJOR_VERSION}
-                 HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
-                 PATHS "$ENV{PROGRAMFILES}/QHull" "$ENV{PROGRAMW6432}/QHull"
-                       "$ENV{PROGRAMFILES}/qhull 6.2.0.1373" "$ENV{PROGRAMW6432}/qhull 6.2.0.1373"
-                 PATH_SUFFIXES project build bin lib)
-
-    find_library(QHULL_LIBRARY_DEBUG
-                 NAMES qhullstatic_d qhull_d qhull_d${QHULL_MAJOR_VERSION} qhull qhull${QHULL_MAJOR_VERSION}
-                 HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
-                 PATHS "$ENV{PROGRAMFILES}/QHull" "$ENV{PROGRAMW6432}/QHull"
-                       "$ENV{PROGRAMFILES}/qhull 6.2.0.1373" "$ENV{PROGRAMW6432}/qhull 6.2.0.1373"
-                 PATH_SUFFIXES project build bin lib)
+    find_library(
+      QHULL_LIBRARY
+      NAMES qhullstatic qhull qhull${QHULL_MAJOR_VERSION}
+      HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
+      PATHS "$ENV{PROGRAMFILES}/QHull" "$ENV{PROGRAMW6432}/QHull"
+            "$ENV{PROGRAMFILES}/qhull 6.2.0.1373"
+            "$ENV{PROGRAMW6432}/qhull 6.2.0.1373"
+      PATH_SUFFIXES project build bin lib)
+
+    find_library(
+      QHULL_LIBRARY_DEBUG
+      NAMES qhullstatic_d qhull_d qhull_d${QHULL_MAJOR_VERSION} qhull
+            qhull${QHULL_MAJOR_VERSION}
+      HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
+      PATHS "$ENV{PROGRAMFILES}/QHull" "$ENV{PROGRAMW6432}/QHull"
+            "$ENV{PROGRAMFILES}/qhull 6.2.0.1373"
+            "$ENV{PROGRAMW6432}/qhull 6.2.0.1373"
+      PATH_SUFFIXES project build bin lib)
   else(WIN32)
-    find_library(QHULL_LIBRARY
-                 NAMES qhull qhull${QHULL_MAJOR_VERSION}
-                 HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
-                 PATH_SUFFIXES project build bin lib)
-
-    find_library(QHULL_LIBRARY_DEBUG
-                 NAMES qhull_d qhull_d${QHULL_MAJOR_VERSION} qhull qhull${QHULL_MAJOR_VERSION}
-                 HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
-                 PATH_SUFFIXES project build bin lib)
-
-    find_library(QHULL_CPP_LIBRARY
-                 NAMES qhullcpp
-                 HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
-                 PATH_SUFFIXES project build bin lib)
+    find_library(
+      QHULL_LIBRARY
+      NAMES qhull qhull${QHULL_MAJOR_VERSION}
+      HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
+      PATH_SUFFIXES project build bin lib)
+
+    find_library(
+      QHULL_LIBRARY_DEBUG
+      NAMES qhull_d qhull_d${QHULL_MAJOR_VERSION} qhull
+            qhull${QHULL_MAJOR_VERSION}
+      HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
+      PATH_SUFFIXES project build bin lib)
+
+    find_library(
+      QHULL_CPP_LIBRARY
+      NAMES qhullcpp
+      HINTS "${QHULL_ROOT}" "$ENV{QHULL_ROOT}"
+      PATH_SUFFIXES project build bin lib)
   endif(WIN32)
 
   if(NOT QHULL_LIBRARY_DEBUG)
@@ -84,32 +98,33 @@ MACRO(SEARCH_FOR_QHULL)
 
   # C++ library may not be available on old Linux distributions
   if(QHULL_CPP_LIBRARY)
-      set(QHULL_LIBRARIES ${QHULL_LIBRARIES} ${QHULL_CPP_LIBRARY})
+    set(QHULL_LIBRARIES ${QHULL_LIBRARIES} ${QHULL_CPP_LIBRARY})
   endif(QHULL_CPP_LIBRARY)
 
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(Qhull DEFAULT_MSG QHULL_LIBRARY
-      QHULL_INCLUDE_DIR)
-
-  mark_as_advanced(QHULL_LIBRARY QHULL_LIBRARY_DEBUG QHULL_CPP_LIBRARY QHULL_INCLUDE_DIR)
-
-  IF(QHULL_FOUND)
-    SET(HAVE_QHULL ON)
-    ADD_DEFINITIONS("-DHAVE_QHULL")
-    PKG_CONFIG_APPEND_CFLAGS(-DHAVE_QHULL)
-    MESSAGE(STATUS "Qhull found")
-    GET_FILENAME_COMPONENT(QHULL_LIBRARY_DIR ${QHULL_LIBRARY} PATH)
-  ENDIF(QHULL_FOUND)
-
-  IF(HAVE_QHULL_2011)
-    ADD_DEFINITIONS("-DHAVE_QHULL_2011")
-    PKG_CONFIG_APPEND_CFLAGS(-DHAVE_QHULL_2011)
-  ENDIF(HAVE_QHULL_2011)
-
-  IF(QHULL_FOUND)
-    INCLUDE_DIRECTORIES(${QHULL_INCLUDE_DIRS})
-    LINK_DIRECTORIES(${QHULL_LIBRARY_DIR})
-    PKG_CONFIG_APPEND_CFLAGS("-I ${QHULL_INCLUDE_DIRS}")
-    PKG_CONFIG_APPEND_LIBRARY_DIR("${QHULL_LIBRARY_DIR}")
-  ENDIF(QHULL_FOUND)
-ENDMACRO(SEARCH_FOR_QHULL)
+                                    QHULL_INCLUDE_DIR)
+
+  mark_as_advanced(QHULL_LIBRARY QHULL_LIBRARY_DEBUG QHULL_CPP_LIBRARY
+                   QHULL_INCLUDE_DIR)
+
+  if(QHULL_FOUND)
+    set(HAVE_QHULL ON)
+    add_definitions("-DHAVE_QHULL")
+    pkg_config_append_cflags(-DHAVE_QHULL)
+    message(STATUS "Qhull found")
+    get_filename_component(QHULL_LIBRARY_DIR ${QHULL_LIBRARY} PATH)
+  endif(QHULL_FOUND)
+
+  if(HAVE_QHULL_2011)
+    add_definitions("-DHAVE_QHULL_2011")
+    pkg_config_append_cflags(-DHAVE_QHULL_2011)
+  endif(HAVE_QHULL_2011)
+
+  if(QHULL_FOUND)
+    include_directories(${QHULL_INCLUDE_DIRS})
+    link_directories(${QHULL_LIBRARY_DIR})
+    pkg_config_append_cflags("-I ${QHULL_INCLUDE_DIRS}")
+    pkg_config_append_library_dir("${QHULL_LIBRARY_DIR}")
+  endif(QHULL_FOUND)
+endmacro(SEARCH_FOR_QHULL)
diff --git a/cmake/release.cmake b/cmake/release.cmake
index 8283772..e6a00c4 100644
--- a/cmake/release.cmake
+++ b/cmake/release.cmake
@@ -1,92 +1,116 @@
 # Copyright (C) 2008-2014,2018 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
-# .. command:: RELEASE_SETUP
+# .rst: .. command:: RELEASE_SETUP
 #
-#   .. _target-release:
+# .. _target-release:
 #
-#   This adds a *release* target which release a stable version of the
-#   current package.
+# This adds a *release* target which release a stable version of the current
+# package.
 #
-#   To release a package, please run:
+# To release a package, please run:
 #
-#   .. code-block:: bash
+# .. code-block:: bash
 #
-#     make release VERSION=X.Y.Z
+# make release VERSION=X.Y.Z
 #
-#   where ``X.Y.Z`` is the version number of your new package.
+# where ``X.Y.Z`` is the version number of your new package.
 #
-#   A release consists in:
+# A release consists in:
 #
-#   - adding a signed tag following the ``vVERSION`` pattern.
-#   - running ``make distcheck`` (:ref:`distcheck <target-distcheck>`) to make sure everything is ok.
-#   - running ``make dist`` to generate a tarball
-#   - running ``make distclean`` to remove the current dist directory
-#   - reminds that you should push the tag and tarball on the GitHub repository (to be done manually as
-#     it is simple but cannot be reverted).
+# * adding a signed tag following the ``vVERSION`` pattern.
+# * running ``make distcheck`` (:ref:`distcheck <target-distcheck>`) to make
+#   sure everything is ok.
+# * running ``make dist`` to generate a tarball
+# * running ``make distclean`` to remove the current dist directory
+# * reminds that you should push the tag and tarball on the GitHub repository
+#   (to be done manually as it is simple but cannot be reverted).
 #
-#   .. todo::
+# .. todo::
 #
-#     The following steps are missing to the current release procedure:
+# The following steps are missing to the current release procedure:
 #
-#     - uploading the stable documentation.
-#     - uploading the resulting tarball to GitHub.
-#     - announce the release by e-mail.
+# * uploading the stable documentation.
+# * uploading the resulting tarball to GitHub.
+# * announce the release by e-mail.
 #
-MACRO(RELEASE_SETUP)
-  IF(UNIX)
-    FIND_PROGRAM(GIT git)
+macro(RELEASE_SETUP)
+  if(UNIX)
+    find_program(GIT git)
 
-    #Set LD_LIBRARY_PATH
-    IF(APPLE)
-      SET(LD_LIBRARY_PATH_VARIABLE_NAME "DYLD_LIBRARY_PATH") 
-    ELSE(APPLE)
-      SET(LD_LIBRARY_PATH_VARIABLE_NAME "LD_LIBRARY_PATH") 
-    ENDIF(APPLE)
-    
-    ADD_CUSTOM_TARGET(release
+    # Set LD_LIBRARY_PATH
+    if(APPLE)
+      set(LD_LIBRARY_PATH_VARIABLE_NAME "DYLD_LIBRARY_PATH")
+    else(APPLE)
+      set(LD_LIBRARY_PATH_VARIABLE_NAME "LD_LIBRARY_PATH")
+    endif(APPLE)
+
+    add_custom_target(
+      release
       COMMAND
-         export LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}
-      && export ${LD_LIBRARY_PATH_VARIABLE_NAME}=$ENV{${LD_LIBRARY_PATH_VARIABLE_NAME}}
-      && export PYTHONPATH=$ENV{PYTHONPATH}
-      && ! test x$$VERSION = x
-        || (echo "Please set a version for this release" && false)
-      && cd ${PROJECT_SOURCE_DIR}
-      # Update version in package.xml if it exists
-      && if [ -f "package.xml" ]; then
-          (echo "Updating package.xml to $$VERSION"
-           && sed -i.back \"s|<version>.*</version>|<version>$$VERSION</version>|g\" package.xml
-           && rm package.xml.back
-           && ${GIT} add package.xml
-           && ${GIT} commit -m "release: Update package.xml version to $$VERSION"
-           && echo "Updated package.xml and committed") ;
-         fi
-      && ${GIT} tag -s v$$VERSION -m "Release of version $$VERSION."
-      && cd ${CMAKE_BINARY_DIR}
-      && cmake ${PROJECT_SOURCE_DIR}
-      && make distcheck
-       || (echo "Please fix distcheck first."
-           && cd ${PROJECT_SOURCE_DIR}
-           && ${GIT} tag -d v$$VERSION
-           && cd ${CMAKE_BINARY_DIR}
-           && cmake ${PROJECT_SOURCE_DIR}
-           && false)
-      && make dist
-      && make distclean
-      && echo "Please, run 'git push --tags' and upload the tarball to github to finalize this release."
-      )
-  ENDIF()
-ENDMACRO()
+        export LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH} && export
+        ${LD_LIBRARY_PATH_VARIABLE_NAME}=$ENV{${LD_LIBRARY_PATH_VARIABLE_NAME}}
+        && export PYTHONPATH=$ENV{PYTHONPATH} && ! test x$$VERSION = x ||
+        (echo "Please set a version for this release" && false) && cd
+        ${PROJECT_SOURCE_DIR}
+        # Update version in package.xml if it exists
+        && if [ -f "package.xml" ]; then
+        (echo
+         "Updating package.xml to $$VERSION"
+         &&
+         sed
+         -i.back
+         \"s|<version>.*</version>|<version>$$VERSION</version>|g\"
+         package.xml
+         &&
+         rm
+         package.xml.back
+         &&
+         ${GIT}
+         add
+         package.xml
+         &&
+         ${GIT}
+         commit
+         -m
+         "release: Update package.xml version to $$VERSION"
+         &&
+         echo
+         "Updated package.xml and committed") ; fi && ${GIT} tag -s v$$VERSION
+        -m "Release of version $$VERSION." && cd ${CMAKE_BINARY_DIR} && cmake
+        ${PROJECT_SOURCE_DIR} && make distcheck || (
+                                                   echo
+                                                   "Please fix distcheck first."
+                                                   &&
+                                                   cd
+                                                   ${PROJECT_SOURCE_DIR}
+                                                   &&
+                                                   ${GIT}
+                                                   tag
+                                                   -d
+                                                   v$$VERSION
+                                                   &&
+                                                   cd
+                                                   ${CMAKE_BINARY_DIR}
+                                                   &&
+                                                   cmake
+                                                   ${PROJECT_SOURCE_DIR}
+                                                   &&
+                                                   false) && make dist && make
+        distclean && echo
+        "Please, run 'git push --tags' and upload the tarball to github to finalize this release."
+    )
+  endif()
+endmacro()
diff --git a/cmake/ros.cmake b/cmake/ros.cmake
index 15e07ff..c8555fc 100644
--- a/cmake/ros.cmake
+++ b/cmake/ros.cmake
@@ -1,164 +1,167 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-# Check the existence of the ros package using rospack.
-#  PKG_ROS is a string containing the name of the package and eventually the
-#  desired version of the package using pkg-config syntax.
-#  The following operators are handled: {>, >=, =, <, <=}
-# example: ADD_ROSPACK_DEPENDENCY("pkg_name")
-#          ADD_ROSPACK_DEPENDENCY("pkg_name >= 0.1")
-MACRO(ADD_ROSPACK_DEPENDENCY PKG_ROS)
-  IF(PKG STREQUAL "")
-    MESSAGE(FATAL_ERROR "ADD_ROS_DEPENDENCY invalid call.")
-  ENDIF()
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# Check the existence of the ros package using rospack. PKG_ROS is a string
+# containing the name of the package and eventually the desired version of the
+# package using pkg-config syntax. The following operators are handled: {>, >=,
+# =, <, <=} example: ADD_ROSPACK_DEPENDENCY("pkg_name")
+# ADD_ROSPACK_DEPENDENCY("pkg_name >= 0.1")
+macro(ADD_ROSPACK_DEPENDENCY PKG_ROS)
+  if(PKG STREQUAL "")
+    message(FATAL_ERROR "ADD_ROS_DEPENDENCY invalid call.")
+  endif()
 
   # check if a version is defined
-  STRING(REGEX MATCH "[<>=]+" SIGN "${PKG_ROS}")
-  IF(NOT "${SIGN}" STREQUAL "")
-    STRING(REGEX MATCH "[0-9.]+ *$" PKG_VERSION "${PKG_ROS}")
+  string(REGEX MATCH "[<>=]+" SIGN "${PKG_ROS}")
+  if(NOT "${SIGN}" STREQUAL "")
+    string(REGEX MATCH "[0-9.]+ *$" PKG_VERSION "${PKG_ROS}")
     # get the name of the package
-    STRING(REGEX MATCH "[^<>= ]+" PKG ${PKG_ROS})
-  ELSE()
+    string(REGEX MATCH "[^<>= ]+" PKG ${PKG_ROS})
+  else()
     # the name of the package is the full input
-    SET(PKG ${PKG_ROS})
-  ENDIF()
+    set(PKG ${PKG_ROS})
+  endif()
 
-  # Transform package name into a valid variable prefix.
-  # 1. replace invalid characters into underscores.
-  STRING(REGEX REPLACE "[^a-zA-Z0-9]" "_" PREFIX "${PKG}")
-  # 2. make it uppercase.
-  STRING(TOUPPER "${PREFIX}" "PREFIX")
+  # Transform package name into a valid variable prefix. 1. replace invalid
+  # characters into underscores.
+  string(REGEX REPLACE "[^a-zA-Z0-9]" "_" PREFIX "${PKG}")
+  # 1. make it uppercase.
+  string(TOUPPER "${PREFIX}" "PREFIX")
 
-  SET(${PREFIX}_FOUND 0)
+  set(${PREFIX}_FOUND 0)
 
-  FIND_PROGRAM(ROSPACK rospack)
-  IF(NOT ROSPACK)
-    MESSAGE(FATAL_ERROR "failed to find the rospack binary. Is ROS installed?")
-  ENDIF()
+  find_program(ROSPACK rospack)
+  if(NOT ROSPACK)
+    message(FATAL_ERROR "failed to find the rospack binary. Is ROS installed?")
+  endif()
 
-  MESSAGE(STATUS "Looking for ${PKG} using rospack...")
-  EXECUTE_PROCESS(
+  message(STATUS "Looking for ${PKG} using rospack...")
+  execute_process(
     COMMAND "${ROSPACK}" find "${PKG}"
     OUTPUT_VARIABLE "${PKG}_ROS_PREFIX"
     ERROR_QUIET)
-  IF(NOT ${PKG}_ROS_PREFIX)
-    MESSAGE(FATAL_ERROR "Failed to detect ${PKG}.")
-  ENDIF()
+  if(NOT ${PKG}_ROS_PREFIX)
+    message(FATAL_ERROR "Failed to detect ${PKG}.")
+  endif()
 
   # Get the version of the package
-  FIND_PROGRAM(ROSVERSION rosversion)
-  IF(NOT ROSVERSION)
-    MESSAGE(FATAL_ERROR "failed to find the rosversion binary. Is ROS installed?")
-  ENDIF()
+  find_program(ROSVERSION rosversion)
+  if(NOT ROSVERSION)
+    message(
+      FATAL_ERROR "failed to find the rosversion binary. Is ROS installed?")
+  endif()
 
-  EXECUTE_PROCESS(
+  execute_process(
     COMMAND "${ROSVERSION}" "${PKG}"
     OUTPUT_VARIABLE ${PKG}_ROSVERSION_TMP
     ERROR_QUIET)
-  STRING(REGEX REPLACE "\n" "" ${PKG}_ROSVERSION ${${PKG}_ROSVERSION_TMP})
-
-  #check whether the version satisfies the constraint
-  IF (NOT "${SIGN}" STREQUAL "")
-    SET(RESULT FALSE)
-    IF(("${${PKG}_ROSVERSION}" VERSION_LESS "${PKG_VERSION}")
-       AND((${SIGN} STREQUAL "<=") OR (${SIGN} STREQUAL "<")))
-        SET(RESULT TRUE)
-    ENDIF()
-
-    IF(("${${PKG}_ROSVERSION}" VERSION_EQUAL "${PKG_VERSION}")
-      AND((${SIGN} STREQUAL ">=") OR (${SIGN} STREQUAL "=") OR (${SIGN} STREQUAL "<=")))
-        SET(RESULT TRUE)
-    ENDIF()
-
-    IF(("${${PKG}_ROSVERSION}" VERSION_GREATER "${PKG_VERSION}")
-       AND(("${SIGN}" STREQUAL ">=") OR ("${SIGN}" STREQUAL ">")))
-        SET(RESULT TRUE)
-    ENDIF()
-
-    IF (NOT RESULT)
-      MESSAGE(FATAL_ERROR "The package ${PKG} does not have the correct version."
-              " Found: ${${PKG}_ROSVERSION}, desired: ${SIGN} ${PKG_VERSION}")
-    ENDIF()
-  ENDIF (NOT "${SIGN}" STREQUAL "")
+  string(REGEX REPLACE "\n" "" ${PKG}_ROSVERSION ${${PKG}_ROSVERSION_TMP})
+
+  # check whether the version satisfies the constraint
+  if(NOT "${SIGN}" STREQUAL "")
+    set(RESULT FALSE)
+    if(("${${PKG}_ROSVERSION}" VERSION_LESS "${PKG_VERSION}")
+       AND ((${SIGN} STREQUAL "<=") OR (${SIGN} STREQUAL "<")))
+      set(RESULT TRUE)
+    endif()
+
+    if(("${${PKG}_ROSVERSION}" VERSION_EQUAL "${PKG_VERSION}")
+       AND ((${SIGN} STREQUAL ">=")
+            OR (${SIGN} STREQUAL "=")
+            OR (${SIGN} STREQUAL "<=")))
+      set(RESULT TRUE)
+    endif()
+
+    if(("${${PKG}_ROSVERSION}" VERSION_GREATER "${PKG_VERSION}")
+       AND (("${SIGN}" STREQUAL ">=") OR ("${SIGN}" STREQUAL ">")))
+      set(RESULT TRUE)
+    endif()
+
+    if(NOT RESULT)
+      message(
+        FATAL_ERROR
+          "The package ${PKG} does not have the correct version."
+          " Found: ${${PKG}_ROSVERSION}, desired: ${SIGN} ${PKG_VERSION}")
+    endif()
+  endif(NOT "${SIGN}" STREQUAL "")
 
   # Declare that the package has been found
-  MESSAGE("${PKG} found, version ${${PKG}_ROSVERSION}")
+  message("${PKG} found, version ${${PKG}_ROSVERSION}")
 
-  SET(${PREFIX}_FOUND 1)
-  EXECUTE_PROCESS(
+  set(${PREFIX}_FOUND 1)
+  execute_process(
     COMMAND "${ROSPACK}" export "--lang=cpp" "--attrib=cflags" "${PKG}"
     OUTPUT_VARIABLE "${PREFIX}_CFLAGS"
     ERROR_QUIET)
-  EXECUTE_PROCESS(
+  execute_process(
     COMMAND "${ROSPACK}" export "--lang=cpp" "--attrib=lflags" "${PKG}"
     OUTPUT_VARIABLE "${PREFIX}_LIBS"
     ERROR_QUIET)
-  STRING(REPLACE "\n" "" ${PREFIX}_CFLAGS "${${PREFIX}_CFLAGS}")
-  STRING(REPLACE "\n" "" ${PREFIX}_LIBS "${${PREFIX}_LIBS}")
-  STRING(REPLACE "\n" "" ${PKG}_ROS_PREFIX "${${PKG}_ROS_PREFIX}")
+  string(REPLACE "\n" "" ${PREFIX}_CFLAGS "${${PREFIX}_CFLAGS}")
+  string(REPLACE "\n" "" ${PREFIX}_LIBS "${${PREFIX}_LIBS}")
+  string(REPLACE "\n" "" ${PKG}_ROS_PREFIX "${${PKG}_ROS_PREFIX}")
 
   # Add flags to package pkg-config file.
-  PKG_CONFIG_APPEND_CFLAGS ("${${PREFIX}_CFLAGS}")
-  PKG_CONFIG_APPEND_LIBS_RAW ("${${PREFIX}_LIBS}")
-ENDMACRO()
+  pkg_config_append_cflags("${${PREFIX}_CFLAGS}")
+  pkg_config_append_libs_raw("${${PREFIX}_LIBS}")
+endmacro()
 
-MACRO(ROSPACK_USE_DEPENDENCY TARGET PKG)
-  IF(PKG STREQUAL "")
-    MESSAGE(FATAL_ERROR "ROSPACK_USE_DEPENDENCY invalid call.")
-  ENDIF()
+macro(ROSPACK_USE_DEPENDENCY TARGET PKG)
+  if(PKG STREQUAL "")
+    message(FATAL_ERROR "ROSPACK_USE_DEPENDENCY invalid call.")
+  endif()
 
-  # Transform package name into a valid variable prefix.
-  # 1. replace invalid characters into underscores.
-  STRING(REGEX REPLACE "[^a-zA-Z0-9]" "_" PREFIX "${PKG}")
-  # 2. make it uppercase.
-  STRING(TOUPPER "${PREFIX}" "PREFIX")
+  # Transform package name into a valid variable prefix. 1. replace invalid
+  # characters into underscores.
+  string(REGEX REPLACE "[^a-zA-Z0-9]" "_" PREFIX "${PKG}")
+  # 1. make it uppercase.
+  string(TOUPPER "${PREFIX}" "PREFIX")
 
   # Make sure we do not override previous flags.
-  GET_TARGET_PROPERTY(CFLAGS "${TARGET}" COMPILE_FLAGS)
-  GET_TARGET_PROPERTY(LDFLAGS "${TARGET}" LINK_FLAGS)
-
-  # If there were no previous flags, get rid of the XYFLAGS-NOTFOUND
-  # in the variables.
-  IF(NOT CFLAGS)
-    SET(CFLAGS "")
-  ENDIF()
-  IF(NOT LDFLAGS)
-    SET(LDFLAGS "")
-  ENDIF()
+  get_target_property(CFLAGS "${TARGET}" COMPILE_FLAGS)
+  get_target_property(LDFLAGS "${TARGET}" LINK_FLAGS)
+
+  # If there were no previous flags, get rid of the XYFLAGS-NOTFOUND in the
+  # variables.
+  if(NOT CFLAGS)
+    set(CFLAGS "")
+  endif()
+  if(NOT LDFLAGS)
+    set(LDFLAGS "")
+  endif()
 
   # Filter out end of line in new flags.
-  STRING(REPLACE "\n" "" ${PREFIX}_CFLAGS "${${PREFIX}_CFLAGS}")
-  STRING(REPLACE "\n" "" ${PREFIX}_LIBS "${${PREFIX}_LIBS}")
+  string(REPLACE "\n" "" ${PREFIX}_CFLAGS "${${PREFIX}_CFLAGS}")
+  string(REPLACE "\n" "" ${PREFIX}_LIBS "${${PREFIX}_LIBS}")
 
   # Append new flags.
-  SET(CFLAGS "${CFLAGS} ${${PREFIX}_CFLAGS}")
-  SET(LDFLAGS "${LDFLAGS} ${${PREFIX}_LIBS}")
+  set(CFLAGS "${CFLAGS} ${${PREFIX}_CFLAGS}")
+  set(LDFLAGS "${LDFLAGS} ${${PREFIX}_LIBS}")
 
   # Update the flags.
-  SET_TARGET_PROPERTIES("${TARGET}"
-    PROPERTIES COMPILE_FLAGS "${CFLAGS}" LINK_FLAGS "${LDFLAGS}")
-
-  # Correct the potential link issue due to the order of link flags.
-  #  (appears e.g. on ubuntu 12.04).
-  # Note that this issue is the same as the one in pkg-config.cmake,
-  #  method PKG_CONFIG_USE_LLINK_DEPENDENCY
-  IF(UNIX AND NOT APPLE)
+  set_target_properties("${TARGET}" PROPERTIES COMPILE_FLAGS "${CFLAGS}"
+                                               LINK_FLAGS "${LDFLAGS}")
+
+  # Correct the potential link issue due to the order of link flags. (appears
+  # e.g. on ubuntu 12.04). Note that this issue is the same as the one in
+  # pkg-config.cmake, method PKG_CONFIG_USE_LLINK_DEPENDENCY
+  if(UNIX AND NOT APPLE)
     # convert the string in a list
-    STRING(REPLACE " " ";" LDFLAGS_LIST "${LDFLAGS}")
-    FOREACH(dep ${LDFLAGS_LIST})
-      TARGET_LINK_LIBRARIES(${TARGET} ${PUBLIC_KEYWORD} ${dep})
-    ENDFOREACH(dep)
-  ENDIF(UNIX AND NOT APPLE)
-ENDMACRO()
+    string(REPLACE " " ";" LDFLAGS_LIST "${LDFLAGS}")
+    foreach(dep ${LDFLAGS_LIST})
+      target_link_libraries(${TARGET} ${PUBLIC_KEYWORD} ${dep})
+    endforeach(dep)
+  endif(UNIX AND NOT APPLE)
+endmacro()
diff --git a/cmake/sdformat.cmake b/cmake/sdformat.cmake
index 88dd7ba..33a3b99 100644
--- a/cmake/sdformat.cmake
+++ b/cmake/sdformat.cmake
@@ -1,44 +1,48 @@
 #
-#   Copyright 2021 INRIA
-#
-#   Author: Rohan Budhiraja
+# Copyright 2021 INRIA
 #
+# Author: Rohan Budhiraja
 #
 
 # SEARCH_FOR_SDFORMAT
 # ----------------------------------
-# Try to quietly find SDFormat, and when found, add dependency.
-# REQUIRED (Optional):  if REQUIRED is given as argument, and SDFormat is not found,
-#                       FATAL_ERROR is generated.
+# Try to quietly find SDFormat, and when found, add dependency. REQUIRED
+# (Optional):  if REQUIRED is given as argument, and SDFormat is not found,
+# FATAL_ERROR is generated.
 #
-MACRO(SEARCH_FOR_SDFORMAT)
-  SET(SDF_VERSIONS "12" "11" "10" "9")
-  LIST(APPEND SDF_VERSIONS "")
-  SET(P_REQUIRED False)
-  SET (variadic_args ${ARGN})
-  LIST(LENGTH variadic_args variadic_count)
-  IF (${variadic_count} GREATER 0)
-    LIST(GET variadic_args 0 optional_arg)
-    IF(${optional_arg} STREQUAL "REQUIRED")
-      SET(P_REQUIRED True)
-    ELSE()
-      MESSAGE (STATUS "Got an unknown optional arg: ${optional_arg}. Only REQUIRED is recognized.")
-    ENDIF ()
-  ENDIF()
-  FOREACH(version IN LISTS SDF_VERSIONS)
-    FIND_PACKAGE(SDFormat${version} QUIET)
-    IF (SDFormat${version}_FOUND)
-      SET(SDFormat_FOUND True)
-      ADD_PROJECT_DEPENDENCY(SDFormat${version})
-      MESSAGE(STATUS "SDFormat${version} Found")
-      BREAK()
-    ENDIF()
-  ENDFOREACH(version)
-  IF (NOT SDFormat_FOUND)
-    IF(P_REQUIRED)
-      MESSAGE(FATAL_ERROR "SDFormat required but not found. Accepted versions: ${SDF_VERSIONS}")
-    ELSE()
-      MESSAGE(STATUS "SDFormat not found. Accepted versions: ${SDF_VERSIONS}")
-    ENDIF()
-  ENDIF()
-ENDMACRO(SEARCH_FOR_SDFORMAT)
+macro(SEARCH_FOR_SDFORMAT)
+  set(SDF_VERSIONS "12" "11" "10" "9")
+  list(APPEND SDF_VERSIONS "")
+  set(P_REQUIRED False)
+  set(variadic_args ${ARGN})
+  list(LENGTH variadic_args variadic_count)
+  if(${variadic_count} GREATER 0)
+    list(GET variadic_args 0 optional_arg)
+    if(${optional_arg} STREQUAL "REQUIRED")
+      set(P_REQUIRED True)
+    else()
+      message(
+        STATUS
+          "Got an unknown optional arg: ${optional_arg}. Only REQUIRED is recognized."
+      )
+    endif()
+  endif()
+  foreach(version IN LISTS SDF_VERSIONS)
+    find_package(SDFormat${version} QUIET)
+    if(SDFormat${version}_FOUND)
+      set(SDFormat_FOUND True)
+      add_project_dependency(SDFormat${version})
+      message(STATUS "SDFormat${version} Found")
+      break()
+    endif()
+  endforeach(version)
+  if(NOT SDFormat_FOUND)
+    if(P_REQUIRED)
+      message(
+        FATAL_ERROR
+          "SDFormat required but not found. Accepted versions: ${SDF_VERSIONS}")
+    else()
+      message(STATUS "SDFormat not found. Accepted versions: ${SDF_VERSIONS}")
+    endif()
+  endif()
+endmacro(SEARCH_FOR_SDFORMAT)
diff --git a/cmake/setup.cfg b/cmake/setup.cfg
new file mode 100644
index 0000000..1cef592
--- /dev/null
+++ b/cmake/setup.cfg
@@ -0,0 +1,4 @@
+[flake8]
+max-line-length = 88
+extend-ignore = E203
+exclude = .docs/cmake.py
diff --git a/cmake/shared-library.cmake b/cmake/shared-library.cmake
index a777524..8cf31e0 100644
--- a/cmake/shared-library.cmake
+++ b/cmake/shared-library.cmake
@@ -1,43 +1,45 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-# Shared library related constants
-# (used for pkg-config file generation).
-# FIXME: can't we get these information from CMake directly?
-SET(LIBDIR_KW "-L")
-SET(LIBINCL_KW "-l")
-SET(LIBINCL_ABSKW "")
-SET(LIB_EXT "")
-IF(WIN32)
-  SET(LIB_EXT ".lib")
-ELSEIF(UNIX)
-  # Using -l:/some/absolute/path.so was an "undocumented ld feature, in
-  # actual fact a ld bug, that has since been fixed".
-  # This was apparently used (e.g. in ROS) because of pkg-config problems that
-  # have since been fixed.
-  # See: https://github.com/ros/catkin/issues/694#issuecomment-88323282
-  # Note: ld version on Linux can be 2.25.1 or 2.24
-  IF (NOT CMAKE_LINKER)
-    INCLUDE(CMakeFindBinUtils)
-  ENDIF()
+# Shared library related constants (used for pkg-config file generation). FIXME:
+# can't we get these information from CMake directly?
+set(LIBDIR_KW "-L")
+set(LIBINCL_KW "-l")
+set(LIBINCL_ABSKW "")
+set(LIB_EXT "")
+if(WIN32)
+  set(LIB_EXT ".lib")
+elseif(UNIX)
+  # Using -l:/some/absolute/path.so was an "undocumented ld feature, in actual
+  # fact a ld bug, that has since been fixed". This was apparently used (e.g. in
+  # ROS) because of pkg-config problems that have since been fixed. See:
+  # https://github.com/ros/catkin/issues/694#issuecomment-88323282 Note: ld
+  # version on Linux can be 2.25.1 or 2.24
+  if(NOT CMAKE_LINKER)
+    include(CMakeFindBinUtils)
+  endif()
 
-  EXECUTE_PROCESS(COMMAND ${CMAKE_LINKER} -v OUTPUT_VARIABLE LD_VERSION_STR ERROR_VARIABLE LD_VERSION_STR)
-  STRING(REGEX MATCH "([0-9]+\\.[0-9]+(\\.[0-9]+)?)" LD_VERSION ${LD_VERSION_STR})
-  IF(${LD_VERSION} VERSION_LESS "2.24.90")
-    SET(LIBINCL_ABSKW "-l:")
-  ELSE()
-    SET(LIBINCL_ABSKW "")
-  ENDIF()
-ENDIF(WIN32)
+  execute_process(
+    COMMAND ${CMAKE_LINKER} -v
+    OUTPUT_VARIABLE LD_VERSION_STR
+    ERROR_VARIABLE LD_VERSION_STR)
+  string(REGEX MATCH "([0-9]+\\.[0-9]+(\\.[0-9]+)?)" LD_VERSION
+               ${LD_VERSION_STR})
+  if(${LD_VERSION} VERSION_LESS "2.24.90")
+    set(LIBINCL_ABSKW "-l:")
+  else()
+    set(LIBINCL_ABSKW "")
+  endif()
+endif(WIN32)
diff --git a/cmake/sphinx.cmake b/cmake/sphinx.cmake
index 0cb8cb6..620fecf 100644
--- a/cmake/sphinx.cmake
+++ b/cmake/sphinx.cmake
@@ -1,133 +1,133 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # SPHINX_SETUP()
 # --------------
 #
-# Look for Sphinx, add a custom rule to generate the documentation and
-# install the documentation properly.
+# Look for Sphinx, add a custom rule to generate the documentation and install
+# the documentation properly.
 #
-MACRO(SPHINX_SETUP)
-  SET(SPHINX_BUILD_PATH "")
+macro(SPHINX_SETUP)
+  set(SPHINX_BUILD_PATH "")
 
-  #  With MSVC, it is likely thant sphinx has been installed using easy-install
+  # With MSVC, it is likely thant sphinx has been installed using easy-install
   # directly in the python folder.
-  IF (MSVC)
-    GET_FILENAME_COMPONENT(PYTHON_ROOT ${PYTHON_EXECUTABLE} DIRECTORY)
-    SET(SPHINX_BUILD_PATH ${PYTHON_ROOT}/Scripts)
-  ENDIF(MSVC)
-
-  FIND_PROGRAM(SPHINX_BUILD sphinx-build DOC
-    "Sphinx documentation generator tool"
+  if(MSVC)
+    get_filename_component(PYTHON_ROOT ${PYTHON_EXECUTABLE} DIRECTORY)
+    set(SPHINX_BUILD_PATH ${PYTHON_ROOT}/Scripts)
+  endif(MSVC)
+
+  find_program(
+    SPHINX_BUILD sphinx-build
+    DOC "Sphinx documentation generator tool"
     PATHS "${SPHINX_BUILD_PATH}")
 
-  IF (NOT SPHINX_BUILD)
-    MESSAGE(WARNING "Failed to find sphinx, documentation will not be generated.")
-  ELSE (NOT SPHINX_BUILD)
-
-    IF(MSVC)
-      # FIXME: it is impossible to trigger documentation installation
-      # at install, so put the target in ALL instead.
-      ADD_CUSTOM_TARGET(sphinx-doc ALL
-        COMMAND ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html ${CMAKE_CURRENT_BINARY_DIR}/sphinx
-        ${CMAKE_CURRENT_BINARY_DIR}/sphinx-html
-        COMMENT "Generating sphinx documentation"
-        )
-    ELSEIF(APPLE)
+  if(NOT SPHINX_BUILD)
+    message(
+      WARNING "Failed to find sphinx, documentation will not be generated.")
+  else(NOT SPHINX_BUILD)
+
+    if(MSVC)
+      # FIXME: it is impossible to trigger documentation installation at
+      # install, so put the target in ALL instead.
+      add_custom_target(
+        sphinx-doc ALL
+        COMMAND
+          ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html
+          ${CMAKE_CURRENT_BINARY_DIR}/sphinx
+          ${CMAKE_CURRENT_BINARY_DIR}/sphinx-html
+        COMMENT "Generating sphinx documentation")
+    elseif(APPLE)
       # THE DYLD_LIBRARY_PATH should be completed to run the sphinx command.
-      #  otherwise some symbols won't be found.
-      SET(EXTRA_LD_PATH "\"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\":")
-      SET(EXTRA_LD_PATH "${EXTRA_LD_PATH}\"${DYNAMIC_GRAPH_PLUGINDIR}\":")
-      ADD_CUSTOM_TARGET(sphinx-doc
-        COMMAND  export DYLD_LIBRARY_PATH=${EXTRA_LD_PATH}:\$DYLD_LIBRARY_PATH \;
-        ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html ${CMAKE_CURRENT_BINARY_DIR}/sphinx
-        ${CMAKE_CURRENT_BINARY_DIR}/sphinx-html
-        COMMENT "Generating sphinx documentation"
-        )
-
-      IF(INSTALL_DOCUMENTATION)
-        INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} sphinx-doc)")
-      ENDIF(INSTALL_DOCUMENTATION)
-    ELSE() #UNIX
+      # otherwise some symbols won't be found.
+      set(EXTRA_LD_PATH "\"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\":")
+      set(EXTRA_LD_PATH "${EXTRA_LD_PATH}\"${DYNAMIC_GRAPH_PLUGINDIR}\":")
+      add_custom_target(
+        sphinx-doc
+        COMMAND
+          export DYLD_LIBRARY_PATH=${EXTRA_LD_PATH}:\$DYLD_LIBRARY_PATH \;
+          ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html
+          ${CMAKE_CURRENT_BINARY_DIR}/sphinx
+          ${CMAKE_CURRENT_BINARY_DIR}/sphinx-html
+        COMMENT "Generating sphinx documentation")
+
+      if(INSTALL_DOCUMENTATION)
+        install(
+          CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} sphinx-doc)")
+      endif(INSTALL_DOCUMENTATION)
+    else() # UNIX
       # THE LD_LIBRARY_PATH should be completed to run the sphinx command.
-      #  otherwise some symbols won't be found.
-      SET(EXTRA_LD_PATH "\"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\":")
-      SET(EXTRA_LD_PATH "${EXTRA_LD_PATH}\"${DYNAMIC_GRAPH_PLUGINDIR}\":")
-      ADD_CUSTOM_TARGET(sphinx-doc
-        COMMAND  export LD_LIBRARY_PATH=${EXTRA_LD_PATH}:$$LD_LIBRARY_PATH \;
-        ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html ${CMAKE_CURRENT_BINARY_DIR}/sphinx
+      # otherwise some symbols won't be found.
+      set(EXTRA_LD_PATH "\"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\":")
+      set(EXTRA_LD_PATH "${EXTRA_LD_PATH}\"${DYNAMIC_GRAPH_PLUGINDIR}\":")
+      add_custom_target(
+        sphinx-doc
+        COMMAND
+          export LD_LIBRARY_PATH=${EXTRA_LD_PATH}:$$LD_LIBRARY_PATH \;
+          ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html
+          ${CMAKE_CURRENT_BINARY_DIR}/sphinx
+          ${CMAKE_CURRENT_BINARY_DIR}/sphinx-html
+        COMMENT "Generating sphinx documentation")
+
+      if(INSTALL_DOCUMENTATION)
+        install(
+          CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} sphinx-doc)")
+      endif(INSTALL_DOCUMENTATION)
+    endif(MSVC)
+
+    add_custom_command(
+      OUTPUT ${CMAKE_BINARY_DIR}/doc/sphinx-html
+      COMMAND
+        ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html
+        ${CMAKE_CURRENT_BINARY_DIR}/sphinx
         ${CMAKE_CURRENT_BINARY_DIR}/sphinx-html
-        COMMENT "Generating sphinx documentation"
-        )
-
-      IF(INSTALL_DOCUMENTATION)
-        INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_MAKE_PROGRAM} sphinx-doc)")
-      ENDIF(INSTALL_DOCUMENTATION)
-    ENDIF(MSVC)
-
-    ADD_CUSTOM_COMMAND(
-      OUTPUT
-      ${CMAKE_BINARY_DIR}/doc/sphinx-html
-      COMMAND ${PYTHON_EXECUTABLE} ${SPHINX_BUILD} -b html  ${CMAKE_CURRENT_BINARY_DIR}/sphinx
-        ${CMAKE_CURRENT_BINARY_DIR}/sphinx-html
-      COMMENT "Generating sphinx documentation"
-      )
+      COMMENT "Generating sphinx documentation")
 
     # Clean generated files.
-    SET_PROPERTY(
-      DIRECTORY APPEND PROPERTY
-      ADDITIONAL_MAKE_CLEAN_FILES
-      ${CMAKE_BINARY_DIR}/doc/sphinx-html
-      )
+    set_property(
+      DIRECTORY
+      APPEND
+      PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${CMAKE_BINARY_DIR}/doc/sphinx-html)
 
     # Install generated files.
-    IF(INSTALL_DOCUMENTATION)
-      INSTALL(DIRECTORY ${CMAKE_BINARY_DIR}/doc/sphinx-html
-        DESTINATION share/doc/${PROJECT_NAME})
+    if(INSTALL_DOCUMENTATION)
+      install(DIRECTORY ${CMAKE_BINARY_DIR}/doc/sphinx-html
+              DESTINATION share/doc/${PROJECT_NAME})
 
-      IF(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
-        INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/pictures
-          DESTINATION share/doc/${PROJECT_NAME}/sphinx-html)
-      ENDIF(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
-    ENDIF(INSTALL_DOCUMENTATION)
+      if(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
+        install(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/pictures
+                DESTINATION share/doc/${PROJECT_NAME}/sphinx-html)
+      endif(EXISTS ${PROJECT_SOURCE_DIR}/doc/pictures)
+    endif(INSTALL_DOCUMENTATION)
 
-  ENDIF(NOT SPHINX_BUILD)
-
-  LIST(APPEND LOGGING_WATCHED_VARIABLES
-    SPHINX_BUILD
-    )
-ENDMACRO(SPHINX_SETUP)
+  endif(NOT SPHINX_BUILD)
 
+  list(APPEND LOGGING_WATCHED_VARIABLES SPHINX_BUILD)
+endmacro(SPHINX_SETUP)
 
 # SPHINX_FINALIZE()
 # -----------------
 #
 # Generate Sphinx related files.
 #
-MACRO(SPHINX_FINALIZE)
-  IF (SPHINX_BUILD)
-  CONFIGURE_FILE(
-    ${CMAKE_CURRENT_SOURCE_DIR}/sphinx/index.rst.in
-    ${CMAKE_CURRENT_BINARY_DIR}/sphinx/index.rst
-    @ONLY
-    )
-
-  CONFIGURE_FILE(
-    ${CMAKE_CURRENT_SOURCE_DIR}/sphinx/conf.py.in
-    ${CMAKE_CURRENT_BINARY_DIR}/sphinx/conf.py
-    @ONLY
-    )
-  ENDIF(SPHINX_BUILD)
-ENDMACRO(SPHINX_FINALIZE)
+macro(SPHINX_FINALIZE)
+  if(SPHINX_BUILD)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/sphinx/index.rst.in
+                   ${CMAKE_CURRENT_BINARY_DIR}/sphinx/index.rst @ONLY)
+
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/sphinx/conf.py.in
+                   ${CMAKE_CURRENT_BINARY_DIR}/sphinx/conf.py @ONLY)
+  endif(SPHINX_BUILD)
+endmacro(SPHINX_FINALIZE)
diff --git a/cmake/stubs.cmake b/cmake/stubs.cmake
index f6c4a64..6112ab8 100644
--- a/cmake/stubs.cmake
+++ b/cmake/stubs.cmake
@@ -1,28 +1,30 @@
 # Copyright (C) 2021 INRIA
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-set(CURRENT_FILE_PATH ${CMAKE_CURRENT_LIST_DIR} CACHE INTERNAL "")
+set(CURRENT_FILE_PATH
+    ${CMAKE_CURRENT_LIST_DIR}
+    CACHE INTERNAL "")
 
-#.rst:
-# .. command:: LOAD_STUBGEN([GIT_TAG])
+# .rst: .. command:: LOAD_STUBGEN([GIT_TAG])
 #
-#    GIT_TAG: the git tag of stubgen. This optional argument allows to use a precise version of stubgen (not necessarily the last master branch).
+# GIT_TAG: the git tag of stubgen. This optional argument allows to use a
+# precise version of stubgen (not necessarily the last master branch).
 #
-#    Download and configure the stub generator module.
+# Download and configure the stub generator module.
 #
-MACRO(LOAD_STUBGEN)
+macro(LOAD_STUBGEN)
   # Handle optional argument
   set(GIT_TAG "master")
   set(extra_macro_args ${ARGN})
@@ -33,95 +35,87 @@ MACRO(LOAD_STUBGEN)
 
   # Download at configure time
   set(STUBGEN_DIR ${CMAKE_CURRENT_BINARY_DIR}/stubgen)
-  configure_file(${CURRENT_FILE_PATH}/stubgen/CMakeLists.txt.in stubgen/CMakeLists.txt)
-  execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
+  configure_file(${CURRENT_FILE_PATH}/stubgen/CMakeLists.txt.in
+                 stubgen/CMakeLists.txt)
+  execute_process(
+    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
     RESULT_VARIABLE result
     WORKING_DIRECTORY ${STUBGEN_DIR})
   if(result)
     message(FATAL_ERROR "CMake step for stubgen failed: ${result}")
   endif()
 
-  execute_process(COMMAND ${CMAKE_COMMAND} --build .
+  execute_process(
+    COMMAND ${CMAKE_COMMAND} --build .
     RESULT_VARIABLE result
     WORKING_DIRECTORY ${STUBGEN_DIR})
   if(result)
     message(FATAL_ERROR "Build step for stubgen failed: ${result}")
   endif()
 
-  SET(STUBGEN_MAIN_FILE ${STUBGEN_DIR}/src/pybind11_stubgen/__init__.py)
-ENDMACRO(LOAD_STUBGEN)
+  set(STUBGEN_MAIN_FILE ${STUBGEN_DIR}/src/pybind11_stubgen/__init__.py)
+endmacro(LOAD_STUBGEN)
 
-#.rst:
-# .. command:: LOAD_STUBGEN(module_path module_name module_install_dir)
+# .rst: .. command:: LOAD_STUBGEN(module_path module_name module_install_dir)
 #
-#    Generate the stubs associated to a given project.
-#    If the TARGET python exists, then the stubs generation will be performed after python target.
+# Generate the stubs associated to a given project. If the TARGET python exists,
+# then the stubs generation will be performed after python target.
 #
-#.rst:
-# .. variable:: module_path
+# .rst: .. variable:: module_path
 #
-#  Path pointing to the module
+# Path pointing to the module
 #
-#.rst:
-# .. variable:: module_name
+# .rst: .. variable:: module_name
 #
-#  Name of the module
+# Name of the module
 #
-#.rst:
-# .. variable:: module_install_dir
+# .rst: .. variable:: module_install_dir
 #
-#  Where the module is installed
+# Where the module is installed
 #
-FUNCTION(GENERATE_STUBS module_path module_name module_install_dir)
+function(GENERATE_STUBS module_path module_name module_install_dir)
 
-  IF(NOT STUBGEN_MAIN_FILE)
-    message(FATAL_ERROR "You need to first load the stubgen module via LOAD_STUBGEN.")
-  ENDIF(NOT STUBGEN_MAIN_FILE)
+  if(NOT STUBGEN_MAIN_FILE)
+    message(
+      FATAL_ERROR "You need to first load the stubgen module via LOAD_STUBGEN.")
+  endif(NOT STUBGEN_MAIN_FILE)
 
   # Regex from IsValidTargetName in CMake/Source/cmGeneratorExpression.cxx
-  IF(NOT module_path)
-    STRING(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" target_name "generate_stubs_${module_name}")
-  ELSE()
-    STRING(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" target_name "generate_stubs_${module_path}_${module_name}")
-  ENDIF()
+  if(NOT module_path)
+    string(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" target_name
+                         "generate_stubs_${module_name}")
+  else()
+    string(REGEX REPLACE "[^A-Za-z0-9_.+-]" "_" target_name
+                         "generate_stubs_${module_path}_${module_name}")
+  endif()
 
-  IF($ENV{PYTHONPATH})
-    SET(PYTHONPATH ${module_path};$ENV{PYTHONPATH})
-  ELSE()
-    SET(PYTHONPATH ${module_path})
-  ENDIF($ENV{PYTHONPATH})
+  if($ENV{PYTHONPATH})
+    set(PYTHONPATH ${module_path};$ENV{PYTHONPATH})
+  else()
+    set(PYTHONPATH ${module_path})
+  endif($ENV{PYTHONPATH})
 
-  ADD_CUSTOM_TARGET(
-    ${target_name}
-    ALL
+  add_custom_target(
+    ${target_name} ALL
     COMMAND
-    ${CMAKE_COMMAND} -E env PYTHONPATH=${PYTHONPATH}
-    "${PYTHON_EXECUTABLE}"
-    "${STUBGEN_MAIN_FILE}"
-    "-o"
-    "${module_path}"
-    "${module_name}"
-    "--boost-python"
-    --ignore-invalid signature
-    "--no-setup-py"
-    "--root-module-suffix"
-    ""
-    VERBATIM
-  )
-  IF(TARGET python)
-    ADD_DEPENDENCIES(${target_name} python)
-  ENDIF(TARGET python)
+      ${CMAKE_COMMAND} -E env PYTHONPATH=${PYTHONPATH} "${PYTHON_EXECUTABLE}"
+      "${STUBGEN_MAIN_FILE}" "-o" "${module_path}" "${module_name}"
+      "--boost-python" --ignore-invalid signature "--no-setup-py"
+      "--root-module-suffix" ""
+    VERBATIM)
+  if(TARGET python)
+    add_dependencies(${target_name} python)
+  endif(TARGET python)
 
-  INSTALL(
+  install(
     DIRECTORY ${module_path}/${module_name}
     DESTINATION ${module_install_dir}
-    FILES_MATCHING PATTERN "*.pyi"
-  )
+    FILES_MATCHING
+    PATTERN "*.pyi")
 
-  SET_PROPERTY(
+  set_property(
     TARGET ${target_name}
     APPEND
-    PROPERTY ADDITIONAL_CLEAN_FILES FILES_MATCHING PATTERN "*.pyi"
-  )
+    PROPERTY ADDITIONAL_CLEAN_FILES FILES_MATCHING PATTERN "*.pyi")
 
-ENDFUNCTION(GENERATE_STUBS module_name)
\ No newline at end of file
+endfunction(GENERATE_STUBS module_name)
diff --git a/cmake/swig.cmake b/cmake/swig.cmake
index a3ac0f8..5b83ed4 100644
--- a/cmake/swig.cmake
+++ b/cmake/swig.cmake
@@ -1,54 +1,57 @@
-MACRO(GENERATE_INCLUDE_FLAGS)
-	get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
-	SET(INCLUDE_FLAGS "")
-	foreach(dir ${dirs})
-		SET(INCLUDE_FLAGS "-I${dir}" ${INCLUDE_FLAGS})
-	endforeach()
-ENDMACRO(GENERATE_INCLUDE_FLAGS)
+macro(GENERATE_INCLUDE_FLAGS)
+  get_property(
+    dirs
+    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+    PROPERTY INCLUDE_DIRECTORIES)
+  set(INCLUDE_FLAGS "")
+  foreach(dir ${dirs})
+    set(INCLUDE_FLAGS "-I${dir}" ${INCLUDE_FLAGS})
+  endforeach()
+endmacro(GENERATE_INCLUDE_FLAGS)
 
-MACRO(ADD_SWIG_PYTHON_BINDING FILENAME DIRECTORY)
-	FIND_PROGRAM(SWIG swig)
-	IF(${SWIG} STREQUAL SWIG-NOTFOUND)
-		MESSAGE(FATAL_ERROR "Cannot find swig")
-	ENDIF()
-	GENERATE_INCLUDE_FLAGS()
-	SET(outname ${CMAKE_BINARY_DIR}/${DIRECTORY}/${FILENAME}_wrap.cxx)
-	ADD_CUSTOM_COMMAND(
-		OUTPUT ${outname}
-		COMMAND ${SWIG}
-		ARGS -c++ -python -outcurrentdir ${INCLUDE_FLAGS} ${CMAKE_SOURCE_DIR}/${DIRECTORY}/${FILENAME}.i
-		MAIN_DEPENDENCY ${FILENAME}.i
-		)
-	SET(PYTHON_SWIG_SOURCES ${FILENAME} ${PYTHON_SWIG_SOURCES})
-	SET(PYTHON_SWIG_STUBS ${CMAKE_BINARY_DIR}/${DIRECTORY}/${FILENAME}_wrap.cxx ${PYTHON_SWIG_STUBS})
-ENDMACRO(ADD_SWIG_PYTHON_BINDING FILENAME)
+macro(ADD_SWIG_PYTHON_BINDING FILENAME DIRECTORY)
+  find_program(SWIG swig)
+  if(${SWIG} STREQUAL SWIG-NOTFOUND)
+    message(FATAL_ERROR "Cannot find swig")
+  endif()
+  generate_include_flags()
+  set(outname ${CMAKE_BINARY_DIR}/${DIRECTORY}/${FILENAME}_wrap.cxx)
+  add_custom_command(
+    OUTPUT ${outname}
+    COMMAND ${SWIG} ARGS -c++ -python -outcurrentdir ${INCLUDE_FLAGS}
+            ${CMAKE_SOURCE_DIR}/${DIRECTORY}/${FILENAME}.i
+    MAIN_DEPENDENCY ${FILENAME}.i)
+  set(PYTHON_SWIG_SOURCES ${FILENAME} ${PYTHON_SWIG_SOURCES})
+  set(PYTHON_SWIG_STUBS ${CMAKE_BINARY_DIR}/${DIRECTORY}/${FILENAME}_wrap.cxx
+                        ${PYTHON_SWIG_STUBS})
+endmacro(ADD_SWIG_PYTHON_BINDING FILENAME)
 
-MACRO(GENERATE_SWIG_BINDINGS)
-	ADD_CUSTOM_TARGET(generate_python_bindings DEPENDS ${PYTHON_SWIG_STUBS})
-ENDMACRO(GENERATE_SWIG_BINDINGS)
+macro(GENERATE_SWIG_BINDINGS)
+  add_custom_target(generate_python_bindings DEPENDS ${PYTHON_SWIG_STUBS})
+endmacro(GENERATE_SWIG_BINDINGS)
 
-MACRO(BUILD_SWIG_BINDINGS LIBRARIES)
-	foreach(stub ${PYTHON_SWIG_SOURCES})
-		set(libname "${stub}_lib")
-		set(realname "_${stub}")
-		set(stubname "${stub}_wrap.cxx")
-		set(stubpath "${CMAKE_BINARY_DIR}/binding/${stubname}")
-		set(SWIG_TARGETS ${libname} ${SWIG_TARGETS})
-		set_source_files_properties(${stubpath} PROPERTIES GENERATED 1)
-		add_library(${libname} SHARED ${stubpath})
-		target_link_libraries(${libname} ${LIBRARIES})
-		add_dependencies(${libname} generate_python_bindings)
-		set_target_properties(${libname} PROPERTIES OUTPUT_NAME ${realname}
-						 PREFIX "")
-	endforeach()
-ENDMACRO()
+macro(BUILD_SWIG_BINDINGS LIBRARIES)
+  foreach(stub ${PYTHON_SWIG_SOURCES})
+    set(libname "${stub}_lib")
+    set(realname "_${stub}")
+    set(stubname "${stub}_wrap.cxx")
+    set(stubpath "${CMAKE_BINARY_DIR}/binding/${stubname}")
+    set(SWIG_TARGETS ${libname} ${SWIG_TARGETS})
+    set_source_files_properties(${stubpath} PROPERTIES GENERATED 1)
+    add_library(${libname} SHARED ${stubpath})
+    target_link_libraries(${libname} ${LIBRARIES})
+    add_dependencies(${libname} generate_python_bindings)
+    set_target_properties(${libname} PROPERTIES OUTPUT_NAME ${realname} PREFIX
+                                                                        "")
+  endforeach()
+endmacro()
 
-MACRO(INSTALL_SWIG_BINDINGS PYTHON_SITELIB PACKAGE)
-	foreach(target ${SWIG_TARGETS})
-		INSTALL(TARGETS ${target} DESTINATION ${PYTHON_SITELIB}/${PACKAGE})
-	endforeach()
-	foreach(source ${PYTHON_SWIG_SOURCES})
-		INSTALL(PROGRAMS ${CMAKE_BINARY_DIR}/binding/${source}.py
-			DESTINATION ${PYTHON_SITELIB}/${PACKAGE})
-	endforeach()
-ENDMACRO()
+macro(INSTALL_SWIG_BINDINGS PYTHON_SITELIB PACKAGE)
+  foreach(target ${SWIG_TARGETS})
+    install(TARGETS ${target} DESTINATION ${PYTHON_SITELIB}/${PACKAGE})
+  endforeach()
+  foreach(source ${PYTHON_SWIG_SOURCES})
+    install(PROGRAMS ${CMAKE_BINARY_DIR}/binding/${source}.py
+            DESTINATION ${PYTHON_SITELIB}/${PACKAGE})
+  endforeach()
+endmacro()
diff --git a/cmake/test.cmake b/cmake/test.cmake
index ae4b5f3..ed39184 100644
--- a/cmake/test.cmake
+++ b/cmake/test.cmake
@@ -1,162 +1,185 @@
 # Copyright (C) 2008-2020 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-#.rst:
-# .. variable:: DISABLE_TESTS
-#    :deprecated:
-#
-#   Boolean variable to configure unit test compilation declared with
-#   :command:`ADD_UNIT_TEST`.
-#
-#   A target *build_tests* is added to compile the unit-tests.
-#   In all cases, ``make all && make test`` compiles and runs the unit-tests.
-#
-#   * if ``OFF`` (default), the unit-tests are compiled with target *all*,
-#     as usual.
-#   * if ``ON``, a unit-test called *ctest_build_tests* is added.
-#     It is equivalent to the command ``make build_tests``.
-#     All unit-test added with :command:`ADD_UNIT_TEST` will be executed
-#     after unit-test *ctest_build_tests* completed.
-#
-#     Thus, the unit-tests are not compiled with target *all* but with target *test*.
-#     unit-test  is added and all tests added with
-IF(DEFINED DISABLE_TESTS)
-  MESSAGE(AUTHOR_WARNING "DISABLE_TESTS is deprecated. Use BUILD_TESTING instead.")
-  IF(DISABLE_TESTS)
-    SET(BUILD_TESTING OFF CACHE BOOL "")
-  ELSE()
-    SET(BUILD_TESTING ON CACHE BOOL "")
-  ENDIF()
-ENDIF(DEFINED DISABLE_TESTS)
-
-IF(NOT TARGET build_tests)
-  ADD_CUSTOM_TARGET(build_tests)
-ENDIF()
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# .rst: .. variable:: DISABLE_TESTS :deprecated:
+#
+# Boolean variable to configure unit test compilation declared with
+# :command:`ADD_UNIT_TEST`.
+#
+# A target *build_tests* is added to compile the unit-tests. In all cases,
+# ``make all && make test`` compiles and runs the unit-tests.
+#
+# * if ``OFF`` (default), the unit-tests are compiled with target *all*, as
+#   usual.
+# * if ``ON``, a unit-test called *ctest_build_tests* is added. It is equivalent
+#   to the command ``make build_tests``. All unit-test added with
+#   :command:`ADD_UNIT_TEST` will be executed after unit-test
+#   *ctest_build_tests* completed.
+#
+# Thus, the unit-tests are not compiled with target *all* but with target
+# *test*. unit-test  is added and all tests added with
+if(DEFINED DISABLE_TESTS)
+  message(
+    AUTHOR_WARNING "DISABLE_TESTS is deprecated. Use BUILD_TESTING instead.")
+  if(DISABLE_TESTS)
+    set(BUILD_TESTING
+        OFF
+        CACHE BOOL "")
+  else()
+    set(BUILD_TESTING
+        ON
+        CACHE BOOL "")
+  endif()
+endif(DEFINED DISABLE_TESTS)
+
+if(NOT TARGET build_tests)
+  add_custom_target(build_tests)
+endif()
 
 # Add new target 'run_tests' to improve integration with build tooling
-IF(NOT CMAKE_GENERATOR MATCHES "Visual Studio" AND NOT TARGET run_tests)
-  ADD_CUSTOM_TARGET(run_tests
+if(NOT CMAKE_GENERATOR MATCHES "Visual Studio" AND NOT TARGET run_tests)
+  add_custom_target(
+    run_tests
     COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure -V
-    VERBATIM
-  )
-ENDIF()
-
-IF(NOT DEFINED ctest_build_tests_exists)
-  SET_PROPERTY(GLOBAL PROPERTY ctest_build_tests_exists OFF)
-ENDIF(NOT DEFINED ctest_build_tests_exists)
-
-#.rst:
-# .. command:: CREATE_CTEST_BUILD_TESTS_TARGET
-#
-#    Create target ctest_build_tests if does not exist yet.
-#
-MACRO(CREATE_CTEST_BUILD_TESTS_TARGET)
-  GET_PROPERTY(ctest_build_tests_exists_value GLOBAL PROPERTY ctest_build_tests_exists)
-  IF(NOT BUILD_TESTING)
-    IF(NOT ctest_build_tests_exists_value)
-      ADD_TEST(ctest_build_tests "${CMAKE_COMMAND}" --build ${CMAKE_BINARY_DIR} --target build_tests -- $ENV{MAKEFLAGS})
-      SET_PROPERTY(GLOBAL PROPERTY ctest_build_tests_exists ON)
-    ENDIF(NOT ctest_build_tests_exists_value)
-  ENDIF(NOT BUILD_TESTING)
-ENDMACRO(CREATE_CTEST_BUILD_TESTS_TARGET)
-
-#.rst:
-# .. command:: ADD_UNIT_TEST (NAME SOURCE [SOURCE ...])
-#
-#   The behaviour of this function depends on :variable:`BUILD_TESTING` option.
-#
-MACRO(ADD_UNIT_TEST NAME)
-  CREATE_CTEST_BUILD_TESTS_TARGET()
-
-  IF(NOT BUILD_TESTING)
-    ADD_EXECUTABLE(${NAME} EXCLUDE_FROM_ALL ${ARGN})
-  ELSE(NOT BUILD_TESTING)
-    ADD_EXECUTABLE(${NAME} ${ARGN})
-  ENDIF(NOT BUILD_TESTING)
-
-  ADD_DEPENDENCIES(build_tests ${NAME})
-
-  ADD_TEST(${NAME} ${RUNTIME_OUTPUT_DIRECTORY}/${NAME})
+    VERBATIM)
+endif()
+
+if(NOT DEFINED ctest_build_tests_exists)
+  set_property(GLOBAL PROPERTY ctest_build_tests_exists OFF)
+endif(NOT DEFINED ctest_build_tests_exists)
+
+# .rst: .. command:: CREATE_CTEST_BUILD_TESTS_TARGET
+#
+# Create target ctest_build_tests if does not exist yet.
+#
+macro(CREATE_CTEST_BUILD_TESTS_TARGET)
+  get_property(ctest_build_tests_exists_value GLOBAL
+               PROPERTY ctest_build_tests_exists)
+  if(NOT BUILD_TESTING)
+    if(NOT ctest_build_tests_exists_value)
+      add_test(
+        ctest_build_tests
+        "${CMAKE_COMMAND}"
+        --build
+        ${CMAKE_BINARY_DIR}
+        --target
+        build_tests
+        --
+        $ENV{MAKEFLAGS})
+      set_property(GLOBAL PROPERTY ctest_build_tests_exists ON)
+    endif(NOT ctest_build_tests_exists_value)
+  endif(NOT BUILD_TESTING)
+endmacro(CREATE_CTEST_BUILD_TESTS_TARGET)
+
+# .rst: .. command:: ADD_UNIT_TEST (NAME SOURCE [SOURCE ...])
+#
+# The behaviour of this function depends on :variable:`BUILD_TESTING` option.
+#
+macro(ADD_UNIT_TEST NAME)
+  create_ctest_build_tests_target()
+
+  if(NOT BUILD_TESTING)
+    add_executable(${NAME} EXCLUDE_FROM_ALL ${ARGN})
+  else(NOT BUILD_TESTING)
+    add_executable(${NAME} ${ARGN})
+  endif(NOT BUILD_TESTING)
+
+  add_dependencies(build_tests ${NAME})
+
+  add_test(${NAME} ${RUNTIME_OUTPUT_DIRECTORY}/${NAME})
   # Support definition of DYLD_LIBRARY_PATH for OSX systems
-  IF(APPLE)
-    SET_TESTS_PROPERTIES(${NAME} PROPERTIES ENVIRONMENT "LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH};DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}")
-  ENDIF(APPLE)
-
-  IF(NOT BUILD_TESTING)
-    SET_TESTS_PROPERTIES(${NAME} PROPERTIES DEPENDS ctest_build_tests)
-  ENDIF(NOT BUILD_TESTING)
-ENDMACRO(ADD_UNIT_TEST NAME SOURCE)
-
-#.rst:
-# .. command:: ADD_PYTHON_UNIT_TEST (NAME SOURCE [MODULES...])
-#
-#   Add a test called `NAME` that runs an equivalent of ``python ${SOURCE}``,
-#   optionnaly with a `PYTHONPATH` set to `CMAKE_BINARY_DIR/MODULE_PATH` for each MODULES
-#   `SOURCE` is relative to `PROJECT_SOURCE_DIR`
-#
-#   .. note:: :command:`FINDPYTHON` should have been called first.
-#
-MACRO(ADD_PYTHON_UNIT_TEST NAME SOURCE)
-  IF(ENABLE_COVERAGE)
-    SET_PROPERTY(GLOBAL PROPERTY JRL_CMAKEMODULES_HAS_PYTHON_COVERAGE ON)
-    SET(PYTHONPATH "${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB}")
-    ADD_TEST(NAME ${NAME}
-      COMMAND ${PYTHON_EXECUTABLE} -m coverage run --branch -p --source=${PYTHONPATH} "${PROJECT_SOURCE_DIR}/${SOURCE}"
+  if(APPLE)
+    set_tests_properties(
+      ${NAME}
+      PROPERTIES
+        ENVIRONMENT
+        "LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH};DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}"
+    )
+  endif(APPLE)
+
+  if(NOT BUILD_TESTING)
+    set_tests_properties(${NAME} PROPERTIES DEPENDS ctest_build_tests)
+  endif(NOT BUILD_TESTING)
+endmacro(
+  ADD_UNIT_TEST
+  NAME
+  SOURCE)
+
+# .rst: .. command:: ADD_PYTHON_UNIT_TEST (NAME SOURCE [MODULES...])
+#
+# Add a test called `NAME` that runs an equivalent of ``python ${SOURCE}``,
+# optionnaly with a `PYTHONPATH` set to `CMAKE_BINARY_DIR/MODULE_PATH` for each
+# MODULES `SOURCE` is relative to `PROJECT_SOURCE_DIR`
+#
+# .. note:: :command:`FINDPYTHON` should have been called first.
+#
+macro(ADD_PYTHON_UNIT_TEST NAME SOURCE)
+  if(ENABLE_COVERAGE)
+    set_property(GLOBAL PROPERTY JRL_CMAKEMODULES_HAS_PYTHON_COVERAGE ON)
+    set(PYTHONPATH "${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB}")
+    add_test(
+      NAME ${NAME}
+      COMMAND ${PYTHON_EXECUTABLE} -m coverage run --branch -p
+              --source=${PYTHONPATH} "${PROJECT_SOURCE_DIR}/${SOURCE}"
       WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
-  ELSE()
-    ADD_TEST(NAME ${NAME} COMMAND ${PYTHON_EXECUTABLE} "${PROJECT_SOURCE_DIR}/${SOURCE}")
-    SET(PYTHONPATH)
-  ENDIF()
-
-  SET(MODULES "${ARGN}")  # ARGN is not a variable
-  FOREACH(MODULE_PATH IN LISTS MODULES)
-    LIST(APPEND PYTHONPATH "${CMAKE_BINARY_DIR}/${MODULE_PATH}")
-    IF(CMAKE_GENERATOR MATCHES "Visual Studio")
-      LIST(APPEND PYTHONPATH "${CMAKE_BINARY_DIR}/${MODULE_PATH}/$<CONFIG>")
-    ENDIF(CMAKE_GENERATOR MATCHES "Visual Studio")
-  ENDFOREACH(MODULE_PATH IN LISTS MODULES)
-
-  IF(DEFINED ENV{PYTHONPATH})
-    LIST(APPEND PYTHONPATH "$ENV{PYTHONPATH}")
-  ENDIF(DEFINED ENV{PYTHONPATH})
+  else()
+    add_test(NAME ${NAME} COMMAND ${PYTHON_EXECUTABLE}
+                                  "${PROJECT_SOURCE_DIR}/${SOURCE}")
+    set(PYTHONPATH)
+  endif()
+
+  set(MODULES "${ARGN}") # ARGN is not a variable
+  foreach(MODULE_PATH IN LISTS MODULES)
+    list(APPEND PYTHONPATH "${CMAKE_BINARY_DIR}/${MODULE_PATH}")
+    if(CMAKE_GENERATOR MATCHES "Visual Studio")
+      list(APPEND PYTHONPATH "${CMAKE_BINARY_DIR}/${MODULE_PATH}/$<CONFIG>")
+    endif(CMAKE_GENERATOR MATCHES "Visual Studio")
+  endforeach(MODULE_PATH IN LISTS MODULES)
+
+  if(DEFINED ENV{PYTHONPATH})
+    list(APPEND PYTHONPATH "$ENV{PYTHONPATH}")
+  endif(DEFINED ENV{PYTHONPATH})
 
   # get path separator to join those paths
-  EXECUTE_PROCESS(COMMAND
-      "${PYTHON_EXECUTABLE}" "-c" "import os; print(os.pathsep)"
-      OUTPUT_VARIABLE PATHSEP
-      OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-  IF(WIN32)
-    STRING(REPLACE ";" ":" PYTHONPATH_STR "${PYTHONPATH}")
-  ELSE(WIN32)
-    STRING(REPLACE ";" "${PATHSEP}" PYTHONPATH_STR "${PYTHONPATH}")
-  ENDIF(WIN32)
-  SET(ENV_VARIABLES "PYTHONPATH=${PYTHONPATH_STR}")
-  IF(APPLE)
-    LIST(APPEND ENV_VARIABLES "LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}")
-    LIST(APPEND ENV_VARIABLES "DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}")
-  ENDIF(APPLE)
-  SET_TESTS_PROPERTIES(${NAME} PROPERTIES ENVIRONMENT "${ENV_VARIABLES}")
-ENDMACRO(ADD_PYTHON_UNIT_TEST NAME SOURCE)
+  execute_process(
+    COMMAND "${PYTHON_EXECUTABLE}" "-c" "import os; print(os.pathsep)"
+    OUTPUT_VARIABLE PATHSEP
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+  if(WIN32)
+    string(REPLACE ";" ":" PYTHONPATH_STR "${PYTHONPATH}")
+  else(WIN32)
+    string(REPLACE ";" "${PATHSEP}" PYTHONPATH_STR "${PYTHONPATH}")
+  endif(WIN32)
+  set(ENV_VARIABLES "PYTHONPATH=${PYTHONPATH_STR}")
+  if(APPLE)
+    list(APPEND ENV_VARIABLES "LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}")
+    list(APPEND ENV_VARIABLES "DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}")
+  endif(APPLE)
+  set_tests_properties(${NAME} PROPERTIES ENVIRONMENT "${ENV_VARIABLES}")
+endmacro(
+  ADD_PYTHON_UNIT_TEST
+  NAME
+  SOURCE)
 
 # DEFINE_UNIT_TEST(NAME LIB)
 # ----------------------
 #
 # Compile a program and add it as a test
 #
-MACRO(DEFINE_UNIT_TEST NAME LIB)
-  ADD_UNIT_TEST(${NAME} ${NAME}.cc)
-  TARGET_LINK_LIBRARIES(${NAME} ${PUBLIC_KEYWORD} ${LIB})
-ENDMACRO(DEFINE_UNIT_TEST)
+macro(DEFINE_UNIT_TEST NAME LIB)
+  add_unit_test(${NAME} ${NAME}.cc)
+  target_link_libraries(${NAME} ${PUBLIC_KEYWORD} ${LIB})
+endmacro(DEFINE_UNIT_TEST)
diff --git a/cmake/uninstall.cmake b/cmake/uninstall.cmake
index ae81061..edd4eaf 100644
--- a/cmake/uninstall.cmake
+++ b/cmake/uninstall.cmake
@@ -1,57 +1,49 @@
 # Copyright (C) 2008-2014 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # _SETUP_PROJECT_UNINSTALL
 # ------------------------
 #
 # Add custom rule to uninstall the package.
 #
-MACRO(_SETUP_PROJECT_UNINSTALL)
-  # FIXME: it is utterly stupid to rely on the install manifest.
-  # Can't we just remember what we install ?!
-  CONFIGURE_FILE(
+macro(_SETUP_PROJECT_UNINSTALL)
+  # FIXME: it is utterly stupid to rely on the install manifest. Can't we just
+  # remember what we install ?!
+  configure_file(
     "${CMAKE_CURRENT_LIST_DIR}/cmake_uninstall.cmake.in"
-    "${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake"
-    IMMEDIATE
-    @ONLY
-    )
+    "${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake" IMMEDIATE @ONLY)
 
-  ADD_CUSTOM_TARGET(
-    uninstall
-    "${CMAKE_COMMAND}" -P
-    "${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake"
-    )
+  add_custom_target(
+    uninstall "${CMAKE_COMMAND}" -P
+              "${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake")
 
-  CONFIGURE_FILE(
-    "${CMAKE_CURRENT_LIST_DIR}/cmake_reinstall.cmake.in"
-    "${PROJECT_BINARY_DIR}/cmake/cmake_reinstall.cmake.configured"
-    )
-  IF(DEFINED CMAKE_BUILD_TYPE)
-    FILE(MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/cmake/${CMAKE_BUILD_TYPE}")
-  ELSE(DEFINED CMAKE_BUILD_TYPE)
-    FOREACH(CFG ${CMAKE_CONFIGURATION_TYPES})
-      FILE(MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/cmake/${CFG}")
-    ENDFOREACH()
-  ENDIF(DEFINED CMAKE_BUILD_TYPE)
-  FILE(GENERATE
+  configure_file("${CMAKE_CURRENT_LIST_DIR}/cmake_reinstall.cmake.in"
+                 "${PROJECT_BINARY_DIR}/cmake/cmake_reinstall.cmake.configured")
+  if(DEFINED CMAKE_BUILD_TYPE)
+    file(MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/cmake/${CMAKE_BUILD_TYPE}")
+  else(DEFINED CMAKE_BUILD_TYPE)
+    foreach(CFG ${CMAKE_CONFIGURATION_TYPES})
+      file(MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/cmake/${CFG}")
+    endforeach()
+  endif(DEFINED CMAKE_BUILD_TYPE)
+  file(
+    GENERATE
     OUTPUT "${PROJECT_BINARY_DIR}/cmake/$<CONFIGURATION>/cmake_reinstall.cmake"
-    INPUT "${PROJECT_BINARY_DIR}/cmake/cmake_reinstall.cmake.configured"
-    )
-  ADD_CUSTOM_TARGET(
+    INPUT "${PROJECT_BINARY_DIR}/cmake/cmake_reinstall.cmake.configured")
+  add_custom_target(
     reinstall
     "${CMAKE_COMMAND}" -P
-    "${PROJECT_BINARY_DIR}/cmake/$<CONFIGURATION>/cmake_reinstall.cmake"
-    )
-ENDMACRO(_SETUP_PROJECT_UNINSTALL)
+    "${PROJECT_BINARY_DIR}/cmake/$<CONFIGURATION>/cmake_reinstall.cmake")
+endmacro(_SETUP_PROJECT_UNINSTALL)
diff --git a/cmake/version-script.cmake b/cmake/version-script.cmake
index dd6d619..4a548a8 100644
--- a/cmake/version-script.cmake
+++ b/cmake/version-script.cmake
@@ -1,22 +1,22 @@
 # Copyright (C) 2017-2020 LAAS-CNRS, JRL AIST-CNRS.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
 include(CheckCCompilerFlag)
 # Introduced in 3.18.0 but VERSION_GREAT_OR_EQUAL is not available in CMake 3.1
 if(${CMAKE_VERSION} VERSION_LESS 3.18.0)
-# Do nothing
+  # Do nothing
 else()
   cmake_policy(PUSH)
   cmake_policy(SET CMP0057 NEW) # if IN_LIST
@@ -32,35 +32,41 @@ endif()
 macro(_CHECK_VERSION_SCRIPT_SUPPORT)
   set(VERSION_SCRIPT "${PROJECT_JRL_CMAKE_MODULE_DIR}/version-script-test.lds")
   if(COMMAND check_linker_flag)
-    check_linker_flag("C" "-Wl,--version-script=${VERSION_SCRIPT}" HAS_VERSION_SCRIPT_SUPPORT)
+    check_linker_flag("C" "-Wl,--version-script=${VERSION_SCRIPT}"
+                      HAS_VERSION_SCRIPT_SUPPORT)
   else()
-    check_c_compiler_flag("-Wl,--version-script=${VERSION_SCRIPT}" HAS_VERSION_SCRIPT_SUPPORT)
+    check_c_compiler_flag("-Wl,--version-script=${VERSION_SCRIPT}"
+                          HAS_VERSION_SCRIPT_SUPPORT)
   endif()
-  set(_HAS_VERSION_SCRIPT_SUPPORT ${HAS_VERSION_SCRIPT_SUPPORT} CACHE INTERNAL "Linker supports version scripts")
+  set(_HAS_VERSION_SCRIPT_SUPPORT
+      ${HAS_VERSION_SCRIPT_SUPPORT}
+      CACHE INTERNAL "Linker supports version scripts")
 endmacro(_CHECK_VERSION_SCRIPT_SUPPORT)
 
-#.rst:
-# .. command:: ADD_VERSION_SCRIPT(TARGET VERSION_SCRIPT)
+# .rst: .. command:: ADD_VERSION_SCRIPT(TARGET VERSION_SCRIPT)
 #
-#   This macro adds a version script to a given target and a link-time
-#   dependency between the target and the version script.
+# This macro adds a version script to a given target and a link-time dependency
+# between the target and the version script.
 #
-#   See https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html
+# See
+# https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html
 #
-#   It has no effect on platforms that do not support version script.
+# It has no effect on platforms that do not support version script.
 #
-#   :param TARGET:         Name of the target, the macro does nothing if TARGET is not a
-#                          cmake target.
-#   :param VERSION_SCRIPT: Version script to add to the library.
+# :param TARGET:         Name of the target, the macro does nothing if TARGET is
+# not a cmake target. :param VERSION_SCRIPT: Version script to add to the
+# library.
 #
 macro(ADD_VERSION_SCRIPT TARGET VERSION_SCRIPT)
   if(NOT DEFINED _HAS_VERSION_SCRIPT_SUPPORT)
-    _CHECK_VERSION_SCRIPT_SUPPORT()
+    _check_version_script_support()
   endif()
   if(_HAS_VERSION_SCRIPT_SUPPORT)
     if(TARGET ${TARGET})
-      set_property(TARGET ${TARGET} APPEND_STRING PROPERTY
-                   LINK_FLAGS " -Wl,--version-script=${VERSION_SCRIPT}")
+      set_property(
+        TARGET ${TARGET}
+        APPEND_STRING
+        PROPERTY LINK_FLAGS " -Wl,--version-script=${VERSION_SCRIPT}")
       set_target_properties(${TARGET} PROPERTIES LINK_DEPENDS ${VERSION_SCRIPT})
     endif()
   endif()
diff --git a/cmake/version.cmake b/cmake/version.cmake
index 9aa9cec..40959d6 100644
--- a/cmake/version.cmake
+++ b/cmake/version.cmake
@@ -1,255 +1,270 @@
 # Copyright (C) 2008-2019 LAAS-CNRS, JRL AIST-CNRS, INRIA.
 #
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
 #
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
 #
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-FUNCTION(_COMPUTE_VERSION_FROM_DOT_VERSION_FILE)
-  IF(EXISTS ${PROJECT_SOURCE_DIR}/.version)
+function(_COMPUTE_VERSION_FROM_DOT_VERSION_FILE)
+  if(EXISTS ${PROJECT_SOURCE_DIR}/.version)
     # Yes, use it. This is a stable version.
-    FILE(STRINGS .version _PROJECT_VERSION)
-    SET(PROJECT_VERSION ${_PROJECT_VERSION} PARENT_SCOPE)
-    SET(PROJECT_STABLE TRUE PARENT_SCOPE)
-    MESSAGE(STATUS "Package version (.version): ${_PROJECT_VERSION}")
-  ENDIF(EXISTS ${PROJECT_SOURCE_DIR}/.version)
-ENDFUNCTION()
-
-FUNCTION(_COMPUTE_VERSION_FROM_GIT_DESCRIBE)
-  FIND_PROGRAM(GIT git)
-  IF(GIT)
-    ####################################################################
+    file(STRINGS .version _PROJECT_VERSION)
+    set(PROJECT_VERSION
+        ${_PROJECT_VERSION}
+        PARENT_SCOPE)
+    set(PROJECT_STABLE
+        TRUE
+        PARENT_SCOPE)
+    message(STATUS "Package version (.version): ${_PROJECT_VERSION}")
+  endif(EXISTS ${PROJECT_SOURCE_DIR}/.version)
+endfunction()
+
+function(_COMPUTE_VERSION_FROM_GIT_DESCRIBE)
+  find_program(GIT git)
+  if(GIT)
+    # ##########################################################################
     # Check whether the repository is shallow or not
-    EXECUTE_PROCESS(COMMAND ${GIT} rev-parse --git-dir
-                    OUTPUT_VARIABLE GIT_PROJECT_DIR
-                    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-                    OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-    SET(GIT_PROJECT_DIR "${PROJECT_SOURCE_DIR}/${GIT_PROJECT_DIR}")
-    IF(IS_DIRECTORY "${GIT_PROJECT_DIR}/shallow")
-      SET(IS_SHALLOW TRUE)
-    ELSE(IS_DIRECTORY "${GIT_PROJECT_DIR}/shallow")
-      SET(IS_SHALLOW FALSE)
-    ENDIF(IS_DIRECTORY "${GIT_PROJECT_DIR}/shallow")
-    IF(IS_SHALLOW)
-      #EXECUTE_PROCESS(COMMAND ${GIT} fetch --unshallow)
-      MESSAGE(WARNING "It appears that your git repository is a shallow copy, meaning that the history has been truncated\n.
-                      Please consider updating your git repository with `git fetch --unshallow` in order to download the full history with tags to recover the current release version.") 
-    ENDIF(IS_SHALLOW)
-    ####################################################################
-
-    ####################################################################
+    execute_process(
+      COMMAND ${GIT} rev-parse --git-dir
+      OUTPUT_VARIABLE GIT_PROJECT_DIR
+      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+    set(GIT_PROJECT_DIR "${PROJECT_SOURCE_DIR}/${GIT_PROJECT_DIR}")
+    if(IS_DIRECTORY "${GIT_PROJECT_DIR}/shallow")
+      set(IS_SHALLOW TRUE)
+    else(IS_DIRECTORY "${GIT_PROJECT_DIR}/shallow")
+      set(IS_SHALLOW FALSE)
+    endif(IS_DIRECTORY "${GIT_PROJECT_DIR}/shallow")
+    if(IS_SHALLOW)
+      # EXECUTE_PROCESS(COMMAND ${GIT} fetch --unshallow)
+      message(
+        WARNING
+          "It appears that your git repository is a shallow copy, meaning that the history has been truncated\n.
+                      Please consider updating your git repository with `git fetch --unshallow` in order to download the full history with tags to recover the current release version."
+      )
+    endif(IS_SHALLOW)
+    # ##########################################################################
+
+    # ##########################################################################
     # Run describe: search for *signed* tags starting with v, from the HEAD and
     # display only the first four characters of the commit id.
-    EXECUTE_PROCESS(
+    execute_process(
       COMMAND ${GIT} describe --tags --abbrev=4 --match=v* HEAD
       WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
       RESULT_VARIABLE GIT_DESCRIBE_RESULT
       OUTPUT_VARIABLE GIT_DESCRIBE_OUTPUT
       ERROR_VARIABLE GIT_DESCRIBE_ERROR
-      OUTPUT_STRIP_TRAILING_WHITESPACE
-      )
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
 
     # Run diff-index to check whether the tree is clean or not.
-    EXECUTE_PROCESS(
+    execute_process(
       COMMAND ${GIT} diff-index --name-only HEAD
       WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
       RESULT_VARIABLE GIT_DIFF_INDEX_RESULT
       OUTPUT_VARIABLE GIT_DIFF_INDEX_OUTPUT
       ERROR_VARIABLE GIT_DIFF_INDEX_ERROR
-      OUTPUT_STRIP_TRAILING_WHITESPACE
-      )
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
 
     # Check if the tree is clean.
-    IF(GIT_DIFF_INDEX_RESULT OR GIT_DIFF_INDEX_OUTPUT)
-      SET(PROJECT_DIRTY TRUE PARENT_SCOPE)
-    ENDIF()
+    if(GIT_DIFF_INDEX_RESULT OR GIT_DIFF_INDEX_OUTPUT)
+      set(PROJECT_DIRTY
+          TRUE
+          PARENT_SCOPE)
+    endif()
 
     # Check if git describe worked and store the returned version number.
-    IF(NOT GIT_DESCRIBE_RESULT)
+    if(NOT GIT_DESCRIBE_RESULT)
       # Get rid of the tag prefix to generate the final version.
-      STRING(REGEX REPLACE "^v" "" _PROJECT_VERSION "${GIT_DESCRIBE_OUTPUT}")
+      string(REGEX REPLACE "^v" "" _PROJECT_VERSION "${GIT_DESCRIBE_OUTPUT}")
 
       # Append dirty if the project is dirty.
-      IF(DEFINED PROJECT_DIRTY)
-        SET(_PROJECT_VERSION "${_PROJECT_VERSION}-dirty")
-      ENDIF()
+      if(DEFINED PROJECT_DIRTY)
+        set(_PROJECT_VERSION "${_PROJECT_VERSION}-dirty")
+      endif()
 
-      IF(_PROJECT_VERSION)
-        SET(PROJECT_VERSION ${_PROJECT_VERSION} PARENT_SCOPE)
-      ENDIF()
+      if(_PROJECT_VERSION)
+        set(PROJECT_VERSION
+            ${_PROJECT_VERSION}
+            PARENT_SCOPE)
+      endif()
 
       # If there is a dash in the version number, it is an unstable release,
-      # otherwise it is a stable release.
-      # I.e. 1.0, 2, 0.1.3 are stable but 0.2.4-1-dg43 is unstable.
-      STRING(REGEX MATCH "-" PROJECT_STABLE "${_PROJECT_VERSION}")
-      IF(NOT PROJECT_STABLE STREQUAL -)
-        SET(PROJECT_STABLE TRUE PARENT_SCOPE)
-      ELSE()
-        SET(PROJECT_STABLE FALSE PARENT_SCOPE)
-      ENDIF()
-
-      MESSAGE(STATUS "Package version (git describe): ${_PROJECT_VERSION}")
-    ENDIF()
-    ####################################################################
-  ENDIF()
-ENDFUNCTION()
-
-FUNCTION(_COMPUTE_VERSION_FROM_ROS_PACKAGE_XML_FILE)
-  IF(EXISTS ${PROJECT_SOURCE_DIR}/package.xml)
-    FILE(READ "${PROJECT_SOURCE_DIR}/package.xml" PACKAGE_XML)
-    EXECUTE_PROCESS(COMMAND cat "${PROJECT_SOURCE_DIR}/package.xml"
+      # otherwise it is a stable release. I.e. 1.0, 2, 0.1.3 are stable but
+      # 0.2.4-1-dg43 is unstable.
+      string(REGEX MATCH "-" PROJECT_STABLE "${_PROJECT_VERSION}")
+      if(NOT PROJECT_STABLE STREQUAL -)
+        set(PROJECT_STABLE
+            TRUE
+            PARENT_SCOPE)
+      else()
+        set(PROJECT_STABLE
+            FALSE
+            PARENT_SCOPE)
+      endif()
+
+      message(STATUS "Package version (git describe): ${_PROJECT_VERSION}")
+    endif()
+    # ##########################################################################
+  endif()
+endfunction()
+
+function(_COMPUTE_VERSION_FROM_ROS_PACKAGE_XML_FILE)
+  if(EXISTS ${PROJECT_SOURCE_DIR}/package.xml)
+    file(READ "${PROJECT_SOURCE_DIR}/package.xml" PACKAGE_XML)
+    execute_process(
+      COMMAND cat "${PROJECT_SOURCE_DIR}/package.xml"
       COMMAND grep <version
       COMMAND cut -f2 -d >
       COMMAND cut -f1 -d <
       OUTPUT_STRIP_TRAILING_WHITESPACE
-      #COMMAND_ECHO STDOUT
+      # COMMAND_ECHO STDOUT
       OUTPUT_VARIABLE PACKAGE_XML_VERSION)
-    IF(NOT "${PACKAGE_XML_VERSION}" STREQUAL "")
-      SET(PROJECT_VERSION ${PACKAGE_XML_VERSION} PARENT_SCOPE)
-    ENDIF(NOT "${PACKAGE_XML_VERSION}" STREQUAL "")
-    MESSAGE(STATUS "Package version (ROS package.xml): ${PACKAGE_XML_VERSION}")
-  ENDIF(EXISTS ${PROJECT_SOURCE_DIR}/package.xml)
-ENDFUNCTION()
-
-#.rst:
-# .. ifmode:: user
-#
-#   .. variable:: PROJECT_VERSION_COMPUTATION_METHODS
-#
-#    List of methods used to compute the version number.
-#    Possible values are:
-#
-#    - *DOT_VERSION_FILE*:
-#
-#        If a .version file exists, interpret its content as the project version.
-#
-#    - *GIT_DESCRIBE*
-#
-#        ``git describe`` is used to retrieve the version number
-#        (see 'man git-describe'). This tool generates a version number from the git
-#        history. The version number follows this pattern ``TAG[-N-SHA1][-dirty]``,
-#        where:
-#      
-#        - ``TAG``: last matching tag (i.e. last signed tag starting with v, i.e. v0.1)
-#        - ``N``: number of commits since the last maching tag
-#        - ``SHA1``: sha1 of the current commit
-#        - ``-dirty``: added if the workig directory is dirty (there is some uncommitted
-#          changes).
-#
-#        For stable releases, i.e. the current commit is a matching tag, ``-N-SHA1`` is
-#        omitted. If the HEAD is on the signed tag v0.1, the version number will be
-#        0.1.
-#    
-#        If the HEAD is two commits after v0.5 and the last commit is 034f6d...
-#        The version number will be:
-#    
-#        - ``0.5-2-034f`` if there is no uncommitted changes,
-#        - ``0.5-2-034f-dirty`` if there is some uncommitted changes.
-#
-#    - *ROS_PACKAGE_XML_FILE*
-#
-#        If a package.xml file exists, interpret its content as a ROS package.xml file
-#        and extract the project version from its version tag.
-#
-#    .. note::
-#
-#      To safely compute the project version, you may consider the following cases:
-#
-#      - the software is retrieved through a tarball which does not contain the ``.git``
-#        directory. Hence, there is no way to search in the Git history to generate
-#        the version number.
-#
-#      - the softwares is retrieved through by clone a distant repository. In this case,
-#        the history may not be complete (shallow clone), thus the *GIT_DESCRIBE* method may fail.
-#
-#      - the *DOT_VERSION_FILE* and *ROS_PACKAGE_XML_FILE* will always work but
-#        forces the version number to be in the git tags and hardcoded in a file.
-
-#.rst:
-# .. ifmode:: internal
-#
-#   .. command:: VERSION_COMPUTE
-#
-#    Deduce the version number using the method as requested by
-#    :cmake:variable:`PROJECT_VERSION_COMPUTATION_METHODS`.
-#    The methods are called in order until one sets the variable ``PROJECT_VERSION``.
-#
-#    If `PROJECT_VERSION`` is already set, this macro does nothing.
-#
-MACRO(VERSION_COMPUTE)
-  SET(PROJECT_STABLE False)
-
-  IF("${PROJECT_SOURCE_DIR}" STREQUAL "")
-    SET(PROJECT_SOURCE_DIR "${PROJECT_JRL_CMAKE_MODULE_DIR}/..")
-  ENDIF()
-  IF(NOT DEFINED PROJECT_VERSION_COMPUTATION_METHODS)
-    LIST(APPEND PROJECT_VERSION_COMPUTATION_METHODS "ROS_PACKAGE_XML_FILE" "DOT_VERSION_FILE" "GIT_DESCRIBE")
-  ENDIF()
-
-  FOREACH(_computation_method ${PROJECT_VERSION_COMPUTATION_METHODS})
-    IF(NOT PROJECT_VERSION)
-      IF    (${_computation_method} STREQUAL "DOT_VERSION_FILE")
-        _COMPUTE_VERSION_FROM_DOT_VERSION_FILE()
-      ELSEIF(${_computation_method} STREQUAL "GIT_DESCRIBE")
-        _COMPUTE_VERSION_FROM_GIT_DESCRIBE()
-      ELSEIF(${_computation_method} STREQUAL "ROS_PACKAGE_XML_FILE")
-        _COMPUTE_VERSION_FROM_ROS_PACKAGE_XML_FILE()
-      ELSE  ()
-        MESSAGE(AUTHOR_WARNING "${_computation_method} is not a valid method to compute the project version.")
-      ENDIF()
-    ENDIF(NOT PROJECT_VERSION)
-  ENDFOREACH()
-  IF(NOT PROJECT_VERSION)
-    # set a default, ref https://github.com/jrl-umi3218/jrl-cmakemodules/issues/381
-    SET(PROJECT_VERSION 0.0.0)
-  ENDIF(NOT PROJECT_VERSION)
-  
+    if(NOT "${PACKAGE_XML_VERSION}" STREQUAL "")
+      set(PROJECT_VERSION
+          ${PACKAGE_XML_VERSION}
+          PARENT_SCOPE)
+    endif(NOT "${PACKAGE_XML_VERSION}" STREQUAL "")
+    message(STATUS "Package version (ROS package.xml): ${PACKAGE_XML_VERSION}")
+  endif(EXISTS ${PROJECT_SOURCE_DIR}/package.xml)
+endfunction()
+
+# .rst: .. ifmode:: user
+#
+# .. variable:: PROJECT_VERSION_COMPUTATION_METHODS
+#
+# List of methods used to compute the version number. Possible values are:
+#
+# * *DOT_VERSION_FILE*:
+#
+# If a .version file exists, interpret its content as the project version.
+#
+# * *GIT_DESCRIBE*
+#
+# ``git describe`` is used to retrieve the version number (see 'man
+# git-describe'). This tool generates a version number from the git history. The
+# version number follows this pattern ``TAG[-N-SHA1][-dirty]``, where:
+#
+# * ``TAG``: last matching tag (i.e. last signed tag starting with v, i.e. v0.1)
+# * ``N``: number of commits since the last maching tag
+# * ``SHA1``: sha1 of the current commit
+# * ``-dirty``: added if the workig directory is dirty (there is some
+#   uncommitted changes).
+#
+# For stable releases, i.e. the current commit is a matching tag, ``-N-SHA1`` is
+# omitted. If the HEAD is on the signed tag v0.1, the version number will be
+# 0.1.
+#
+# If the HEAD is two commits after v0.5 and the last commit is 034f6d... The
+# version number will be:
+#
+# * ``0.5-2-034f`` if there is no uncommitted changes,
+# * ``0.5-2-034f-dirty`` if there is some uncommitted changes.
+#
+# * *ROS_PACKAGE_XML_FILE*
+#
+# If a package.xml file exists, interpret its content as a ROS package.xml file
+# and extract the project version from its version tag.
+#
+# .. note::
+#
+# To safely compute the project version, you may consider the following cases:
+#
+# * the software is retrieved through a tarball which does not contain the
+#   ``.git`` directory. Hence, there is no way to search in the Git history to
+#   generate the version number.
+#
+# * the softwares is retrieved through by clone a distant repository. In this
+#   case, the history may not be complete (shallow clone), thus the
+#   *GIT_DESCRIBE* method may fail.
+#
+# * the *DOT_VERSION_FILE* and *ROS_PACKAGE_XML_FILE* will always work but
+#   forces the version number to be in the git tags and hardcoded in a file.
+
+# .rst: .. ifmode:: internal
+#
+# .. command:: VERSION_COMPUTE
+#
+# Deduce the version number using the method as requested by
+# :cmake:variable:`PROJECT_VERSION_COMPUTATION_METHODS`. The methods are called
+# in order until one sets the variable ``PROJECT_VERSION``.
+#
+# If `PROJECT_VERSION`` is already set, this macro does nothing.
+#
+macro(VERSION_COMPUTE)
+  set(PROJECT_STABLE False)
+
+  if("${PROJECT_SOURCE_DIR}" STREQUAL "")
+    set(PROJECT_SOURCE_DIR "${PROJECT_JRL_CMAKE_MODULE_DIR}/..")
+  endif()
+  if(NOT DEFINED PROJECT_VERSION_COMPUTATION_METHODS)
+    list(APPEND PROJECT_VERSION_COMPUTATION_METHODS "ROS_PACKAGE_XML_FILE"
+         "DOT_VERSION_FILE" "GIT_DESCRIBE")
+  endif()
+
+  foreach(_computation_method ${PROJECT_VERSION_COMPUTATION_METHODS})
+    if(NOT PROJECT_VERSION)
+      if(${_computation_method} STREQUAL "DOT_VERSION_FILE")
+        _compute_version_from_dot_version_file()
+      elseif(${_computation_method} STREQUAL "GIT_DESCRIBE")
+        _compute_version_from_git_describe()
+      elseif(${_computation_method} STREQUAL "ROS_PACKAGE_XML_FILE")
+        _compute_version_from_ros_package_xml_file()
+      else()
+        message(
+          AUTHOR_WARNING
+            "${_computation_method} is not a valid method to compute the project version."
+        )
+      endif()
+    endif(NOT PROJECT_VERSION)
+  endforeach()
+  if(NOT PROJECT_VERSION)
+    # set a default, ref
+    # https://github.com/jrl-umi3218/jrl-cmakemodules/issues/381
+    set(PROJECT_VERSION 0.0.0)
+  endif(NOT PROJECT_VERSION)
+
   # Set PROJECT_VERSION_{MAJOR,MINOR,PATCH} variables
-  IF(PROJECT_VERSION)
+  if(PROJECT_VERSION)
     # Compute the major, minor and patch version of the project
-    IF(NOT DEFINED PROJECT_VERSION_MAJOR AND
-       NOT DEFINED PROJECT_VERSION_MINOR AND
-       NOT DEFINED PROJECT_VERSION_PATCH)
-     SPLIT_VERSION_NUMBER(${PROJECT_VERSION}
-        PROJECT_VERSION_MAJOR
-        PROJECT_VERSION_MINOR
-        PROJECT_VERSION_PATCH)
-    ENDIF()
-  ENDIF()
-
-ENDMACRO()
-
-MACRO(SPLIT_VERSION_NUMBER VERSION
-    VERSION_MAJOR_VAR
-    VERSION_MINOR_VAR
-    VERSION_PATCH_VAR)
+    if(NOT DEFINED PROJECT_VERSION_MAJOR
+       AND NOT DEFINED PROJECT_VERSION_MINOR
+       AND NOT DEFINED PROJECT_VERSION_PATCH)
+      split_version_number(${PROJECT_VERSION} PROJECT_VERSION_MAJOR
+                           PROJECT_VERSION_MINOR PROJECT_VERSION_PATCH)
+    endif()
+  endif()
+
+endmacro()
+
+macro(SPLIT_VERSION_NUMBER VERSION VERSION_MAJOR_VAR VERSION_MINOR_VAR
+      VERSION_PATCH_VAR)
   # Compute the major, minor and patch version of the project
-  IF(${VERSION} MATCHES UNKNOWN)
-    SET(${VERSION_MAJOR_VAR} UNKNOWN)
-    SET(${VERSION_MINOR_VAR} UNKNOWN)
-    SET(${VERSION_PATCH_VAR} UNKNOWN)
-  ELSE()
+  if(${VERSION} MATCHES UNKNOWN)
+    set(${VERSION_MAJOR_VAR} UNKNOWN)
+    set(${VERSION_MINOR_VAR} UNKNOWN)
+    set(${VERSION_PATCH_VAR} UNKNOWN)
+  else()
     # Extract the version from PROJECT_VERSION
     string(REGEX REPLACE "-.*$" "" _PROJECT_VERSION_LIST "${VERSION}")
     string(REPLACE "." ";" _PROJECT_VERSION_LIST "${_PROJECT_VERSION_LIST}")
     list(LENGTH _PROJECT_VERSION_LIST SIZE)
-    IF(${SIZE} GREATER 0)
+    if(${SIZE} GREATER 0)
       list(GET _PROJECT_VERSION_LIST 0 ${VERSION_MAJOR_VAR})
-    ENDIF()
-    IF(${SIZE} GREATER 1)
+    endif()
+    if(${SIZE} GREATER 1)
       list(GET _PROJECT_VERSION_LIST 1 ${VERSION_MINOR_VAR})
-    ENDIF()
-    IF(${SIZE} GREATER 2)
+    endif()
+    if(${SIZE} GREATER 2)
       list(GET _PROJECT_VERSION_LIST 2 ${VERSION_PATCH_VAR})
-    ENDIF()
-  ENDIF()
-ENDMACRO()
+    endif()
+  endif()
+endmacro()
diff --git a/cmake/warning.hh.cmake b/cmake/warning.hh.cmake
index 46c48ae..b424186 100644
--- a/cmake/warning.hh.cmake
+++ b/cmake/warning.hh.cmake
@@ -1,4 +1,4 @@
-/* 
+/*
  * This file has been automatically generated by the jrl-cmakemodules.
  * Please see https://github.com/jrl-umi3218/jrl-cmakemodules/blob/master/warning.hh.cmake for details.
 */
diff --git a/cmake/xacro.cmake b/cmake/xacro.cmake
index 5198e1d..e79d633 100644
--- a/cmake/xacro.cmake
+++ b/cmake/xacro.cmake
@@ -1,95 +1,100 @@
 # Copyright (C) 2016 LAAS-CNRS, JRL AIST-CNRS.
 #
 
-MESSAGE(WARNING "This file is DEPRECATED and will be removed")
+message(WARNING "This file is DEPRECATED and will be removed")
 
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# This program is free software: you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation, either version 3 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program.  If not, see <http://www.gnu.org/licenses/>.
 
-#.rst:
+# .rst:
 #
 # .. variable:: XACRO_OPTIONS
 #
-#    Options passed to the xacro command. It defaults to ``--inorder``.
+# Options passed to the xacro command. It defaults to ``--inorder``.
 #
 # .. command:: RUN_XACRO (INPUT OUTPUT)
 #
-#   Add a custom command that runs the following command:
+# Add a custom command that runs the following command:
 #
-#     xacro.py -o ${OUTPUT} ${INPUT}
+# xacro.py -o ${OUTPUT} ${INPUT}
 #
-#   To trigger generation, use::
+# To trigger generation, use::
 #
-#     ADD_CUSTOM_TARGET (generate_urdf_files ALL DEPENDS ${ALL_GENERATED_URDF})
+# ADD_CUSTOM_TARGET (generate_urdf_files ALL DEPENDS ${ALL_GENERATED_URDF})
 #
-#   See also :cmake:variable:`XACRO_OPTIONS`.
+# See also :cmake:variable:`XACRO_OPTIONS`.
 #
-MACRO(RUN_XACRO INPUT OUTPUT)
-  MESSAGE(WARNING "DEPRECATED. Please use \"xacro_add_xacro_file(${INPUT})\".")
-  FIND_PACKAGE(catkin REQUIRED COMPONENTS xacro)
+macro(RUN_XACRO INPUT OUTPUT)
+  message(WARNING "DEPRECATED. Please use \"xacro_add_xacro_file(${INPUT})\".")
+  find_package(catkin REQUIRED COMPONENTS xacro)
 
-  IF(NOT DEFINED XACRO_OPTIONS)
-    SET(XACRO_OPTIONS "--inorder")
-  ENDIF()
+  if(NOT DEFINED XACRO_OPTIONS)
+    set(XACRO_OPTIONS "--inorder")
+  endif()
 
-  ADD_CUSTOM_COMMAND(
+  add_custom_command(
     OUTPUT ${OUTPUT}
-    COMMAND ${_xacro_py}
-    ARGS ${XACRO_OPTIONS} -o ${OUTPUT} ${INPUT}
+    COMMAND ${_xacro_py} ARGS ${XACRO_OPTIONS} -o ${OUTPUT} ${INPUT}
     MAIN_DEPENDENCY ${INPUT}
-    COMMENT "Generating ${OUTPUT}"
-    )
-  LIST(APPEND ALL_GENERATED_URDF ${OUTPUT})
+    COMMENT "Generating ${OUTPUT}")
+  list(APPEND ALL_GENERATED_URDF ${OUTPUT})
 
   # Clean generated files.
-  SET_PROPERTY(
-    DIRECTORY APPEND PROPERTY
-    ADDITIONAL_MAKE_CLEAN_FILES
-    ${OUTPUT}
-    )
+  set_property(
+    DIRECTORY
+    APPEND
+    PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${OUTPUT})
 
-  LIST(APPEND LOGGING_WATCHED_VARIABLES ALL_GENERATED_URDF)
-ENDMACRO(RUN_XACRO INPUT OUTPUT)
+  list(APPEND LOGGING_WATCHED_VARIABLES ALL_GENERATED_URDF)
+endmacro(
+  RUN_XACRO
+  INPUT
+  OUTPUT)
 
-#.rst:
-# .. command:: GENERATE_URDF_FILE (FILENAME EXTENSION)
+# .rst: .. command:: GENERATE_URDF_FILE (FILENAME EXTENSION)
 #
-#   Generate urdf ``${CMAKE_CURRENT_BINARY_DIR}/${FILENAME}.${EXTENSION}``
-#   from xacro ``${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro`` file.
+# Generate urdf ``${CMAKE_CURRENT_BINARY_DIR}/${FILENAME}.${EXTENSION}`` from
+# xacro ``${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro`` file.
 #
-#   To trigger generation, use::
+# To trigger generation, use::
 #
-#     ADD_CUSTOM_TARGET (generate_urdf_files DEPENDS ${ALL_GENERATED_URDF})
+# ADD_CUSTOM_TARGET (generate_urdf_files DEPENDS ${ALL_GENERATED_URDF})
 #
-#   :FILENAME:  XACRO filename without the extension
-#   :EXTENSION: desired extension of the output file, e.g. "urdf" or "srdf"
+# :FILENAME:  XACRO filename without the extension :EXTENSION: desired extension
+# of the output file, e.g. "urdf" or "srdf"
 #
-#   .. note:: If ``${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro`` does not exists,
-#          the macros tries to configure file ``${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in``
+# .. note:: If ``${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro`` does not
+# exists, the macros tries to configure file
+# ``${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in``
 #
-MACRO(GENERATE_URDF_FILE FILENAME EXTENSION)
-  IF (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
-    IF (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in)
-      MESSAGE(FATAL_ERROR "cannot find \"${FILENAME}.xacro\" or \"${FILENAME}.xacro.in\"")
-    ENDIF (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in)
+macro(GENERATE_URDF_FILE FILENAME EXTENSION)
+  if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
+    if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in)
+      message(
+        FATAL_ERROR
+          "cannot find \"${FILENAME}.xacro\" or \"${FILENAME}.xacro.in\"")
+    endif(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in)
 
-    SET(_XACRO_FILE_ ${CMAKE_CURRENT_BINARY_DIR}/${FILENAME}.xacro)
-    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in
-      ${_XACRO_FILE_} @ONLY)
+    set(_XACRO_FILE_ ${CMAKE_CURRENT_BINARY_DIR}/${FILENAME}.xacro)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro.in
+                   ${_XACRO_FILE_} @ONLY)
     # MESSAGE("Configuring ${FILENAME}.xacro.in")
-  ELSE (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
-    SET(_XACRO_FILE_ ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
-  ENDIF (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
+  else(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
+    set(_XACRO_FILE_ ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
+  endif(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}.xacro)
 
-  RUN_XACRO(${_XACRO_FILE_} ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_FILE})
-ENDMACRO(GENERATE_URDF_FILE FILENAME CONFIGURE)
+  run_xacro(${_XACRO_FILE_} ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_FILE})
+endmacro(
+  GENERATE_URDF_FILE
+  FILENAME
+  CONFIGURE)
diff --git a/unittest/CMakeLists.txt b/unittest/CMakeLists.txt
index a41d29b..80b451e 100644
--- a/unittest/CMakeLists.txt
+++ b/unittest/CMakeLists.txt
@@ -63,5 +63,7 @@ SET_TESTS_PROPERTIES("py-LLT" PROPERTIES DEPENDS ${PYWRAP})
 ADD_PYTHON_UNIT_TEST("py-LDLT" "unittest/python/test_LDLT.py" "python;unittest")
 SET_TESTS_PROPERTIES("py-LDLT" PROPERTIES DEPENDS ${PYWRAP})
 
-ADD_PYTHON_UNIT_TEST("py-MINRES" "unittest/python/test_MINRES.py" "python;unittest")
-SET_TESTS_PROPERTIES("py-MINRES" PROPERTIES DEPENDS ${PYWRAP})
+IF(NOT WIN32)
+  ADD_PYTHON_UNIT_TEST("py-MINRES" "unittest/python/test_MINRES.py" "python;unittest")
+  SET_TESTS_PROPERTIES("py-MINRES" PROPERTIES DEPENDS ${PYWRAP})
+ENDIF(NOT WIN32)
